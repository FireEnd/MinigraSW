
MinigraF401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000644c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c9f0  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022fdc  08022fdc  000400c8  2**0
                  CONTENTS
  4 .ARM          00000008  08022fdc  08022fdc  00032fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022fe4  08022fe4  000400c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022fe4  08022fe4  00032fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022fe8  08022fe8  00032fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08022fec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200000c8  080230b4  000400c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080230b4  000402ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e19  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179a  00000000  00000000  00048f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0004a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0004ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016af3  00000000  00000000  0004b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009385  00000000  00000000  0006208b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901d0  00000000  00000000  0006b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb5e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e8  00000000  00000000  000fb630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065d4 	.word	0x080065d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	080065d4 	.word	0x080065d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <butUnbl>:

uint8_t butUnbl(uint8_t i) { // odczyt przycisku (bez blokady)
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	// Numery przycisków: (0 - Generator | 1 - Rezystancja | 2 - Blokada | 3 - Podsłuch)
	static uint32_t lockTimer[BUT_N]; // timer debouncingu przycisków
	static uint8_t bufState[BUT_N]; // bufor statusu przycisków
	uint8_t ret; // zwracana wartość
	if(lockTimer[i] && HAL_GetTick() < lockTimer[i]) return bufState[i]; // jeśli trwa debouncing zwróć zapamiętany stan
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <butUnbl+0x9c>)
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00c      	beq.n	8000c20 <butUnbl+0x30>
 8000c06:	f003 f9f3 	bl	8003ff0 <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	491f      	ldr	r1, [pc, #124]	; (8000c8c <butUnbl+0x9c>)
 8000c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d203      	bcs.n	8000c20 <butUnbl+0x30>
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <butUnbl+0xa0>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	e031      	b.n	8000c84 <butUnbl+0x94>
	else { // jeśli nie debouncing
		ret = (BUT_PORT->IDR & (1<<(BUT_PIN+i))) ? 0:1; // zwracana wartość to odczyt przycisku
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <butUnbl+0xa4>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	320c      	adds	r2, #12
 8000c28:	2101      	movs	r1, #1
 8000c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	73fb      	strb	r3, [r7, #15]
		if(ret != bufState[i] && (lockTimer[i] == 0 || HAL_GetTick() >= lockTimer[i])) { // jeśli zbocze i nie debouncing
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <butUnbl+0xa0>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d01a      	beq.n	8000c7e <butUnbl+0x8e>
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <butUnbl+0x9c>)
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d008      	beq.n	8000c66 <butUnbl+0x76>
 8000c54:	f003 f9cc 	bl	8003ff0 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	490b      	ldr	r1, [pc, #44]	; (8000c8c <butUnbl+0x9c>)
 8000c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d30b      	bcc.n	8000c7e <butUnbl+0x8e>
			bufState[i] = ret; // zapamiętaj nowy stan przycisku
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4909      	ldr	r1, [pc, #36]	; (8000c90 <butUnbl+0xa0>)
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	54ca      	strb	r2, [r1, r3]
			lockTimer[i] = HAL_GetTick() + DEBOUNCE_TIME; // ustaw timer debouncingu
 8000c6e:	f003 f9bf 	bl	8003ff0 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	3214      	adds	r2, #20
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <butUnbl+0x9c>)
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		return bufState[i]; // zwróć stan przycisku
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <butUnbl+0xa0>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
	}
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200002b8 	.word	0x200002b8
 8000c90:	200002bc 	.word	0x200002bc
 8000c94:	40020400 	.word	0x40020400

08000c98 <but>:

uint8_t but(uint8_t i) { // odczyt przycisku
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	if(butLockFlag[i]) return 0; // jeśli zablokowany zwróć 0
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <but+0x2c>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <but+0x18>
 8000cac:	2300      	movs	r3, #0
 8000cae:	e004      	b.n	8000cba <but+0x22>
	else return butUnbl(i); // jeśli odblokowany zwróć przycisk
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff9c 	bl	8000bf0 <butUnbl>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000e4 	.word	0x200000e4

08000cc8 <WriteCmdParamN>:
uint16_t _MW = 0x202;
uint16_t _MP = 0x201;
uint16_t _MC = 0x200;
//uint16_t _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;

void WriteCmdParamN(uint16_t cmd, uint8_t n, uint8_t *data) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	603a      	str	r2, [r7, #0]
 8000cd2:	80fb      	strh	r3, [r7, #6]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	717b      	strb	r3, [r7, #5]
	CS_LOW;
 8000cd8:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4a34      	ldr	r2, [pc, #208]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ce2:	6153      	str	r3, [r2, #20]
	WriteCmd(cmd);
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000cea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cee:	6153      	str	r3, [r2, #20]
 8000cf0:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <WriteCmdParamN+0xec>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000cf8:	88fa      	ldrh	r2, [r7, #6]
 8000cfa:	0a12      	lsrs	r2, r2, #8
 8000cfc:	b292      	uxth	r2, r2
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <WriteCmdParamN+0xec>)
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <WriteCmdParamN+0xec>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4922      	ldr	r1, [pc, #136]	; (8000db4 <WriteCmdParamN+0xec>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	614b      	str	r3, [r1, #20]
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d3a:	6153      	str	r3, [r2, #20]
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6153      	str	r3, [r2, #20]
	for(uint8_t i=0; i<4; i++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e020      	b.n	8000d90 <WriteCmdParamN+0xc8>
		CD_DATA;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d58:	6153      	str	r3, [r2, #20]
		write8(data[i]);
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <WriteCmdParamN+0xec>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	6839      	ldr	r1, [r7, #0]
 8000d66:	440a      	add	r2, r1
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <WriteCmdParamN+0xec>)
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d88:	6153      	str	r3, [r2, #20]
	for(uint8_t i=0; i<4; i++) {
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d9db      	bls.n	8000d4e <WriteCmdParamN+0x86>
	}
	CS_HIGH;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <WriteCmdParamN+0xe8>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	6153      	str	r3, [r2, #20]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400

08000db8 <WriteCmdData>:
static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) {
	uint8_t data[4] = {d1, d2, d3, d4};
	WriteCmdParamN(cmd, 4, data);
}

void WriteCmdData(uint16_t cmd, uint16_t data) {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	80fb      	strh	r3, [r7, #6]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	80bb      	strh	r3, [r7, #4]
	//CS_LOW;
	//WriteCmd(cmd);
	CS_LOWiCD_COMMAND;
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <WriteCmdData+0xf0>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	4a36      	ldr	r2, [pc, #216]	; (8000ea8 <WriteCmdData+0xf0>)
 8000dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dd2:	6153      	str	r3, [r2, #20]
	write16(cmd);
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <WriteCmdData+0xf4>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	0a12      	lsrs	r2, r2, #8
 8000de0:	b292      	uxth	r2, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a31      	ldr	r2, [pc, #196]	; (8000eac <WriteCmdData+0xf4>)
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <WriteCmdData+0xf0>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <WriteCmdData+0xf0>)
 8000df0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <WriteCmdData+0xf0>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <WriteCmdData+0xf0>)
 8000dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e00:	6153      	str	r3, [r2, #20]
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <WriteCmdData+0xf4>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4927      	ldr	r1, [pc, #156]	; (8000eac <WriteCmdData+0xf4>)
 8000e10:	4313      	orrs	r3, r2
 8000e12:	614b      	str	r3, [r1, #20]
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e1e:	6153      	str	r3, [r2, #20]
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6153      	str	r3, [r2, #20]
	WriteData(data);
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6153      	str	r3, [r2, #20]
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <WriteCmdData+0xf4>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e40:	88ba      	ldrh	r2, [r7, #4]
 8000e42:	0a12      	lsrs	r2, r2, #8
 8000e44:	b292      	uxth	r2, r2
 8000e46:	4611      	mov	r1, r2
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <WriteCmdData+0xf4>)
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	6153      	str	r3, [r2, #20]
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <WriteCmdData+0xf4>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000e6e:	88bb      	ldrh	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	490e      	ldr	r1, [pc, #56]	; (8000eac <WriteCmdData+0xf4>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	614b      	str	r3, [r1, #20]
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e82:	6153      	str	r3, [r2, #20]
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6153      	str	r3, [r2, #20]
	CS_HIGH;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <WriteCmdData+0xf0>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6153      	str	r3, [r2, #20]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400

08000eb0 <setAddrWindow>:
	WriteCmdData(_MC, x);
	WriteCmdData(_MP, y);
	WriteCmdData(_MW, color);
}

void setAddrWindow(uint16_t x, uint16_t y, uint16_t x1, uint16_t y1) { // nie działa chyba
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	803b      	strh	r3, [r7, #0]
	if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;*/

	//uint8_t data[4] = {x >> 8, x, x1 >> 8, x1};
	//WriteCmdParamN(_SC, 4, data);
	// Przyspieszone WriteCmdParamN(_SC...)
	CS_LOW;
 8000ece:	4b9a      	ldr	r3, [pc, #616]	; (8001138 <setAddrWindow+0x288>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a99      	ldr	r2, [pc, #612]	; (8001138 <setAddrWindow+0x288>)
 8000ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ed8:	6153      	str	r3, [r2, #20]
	WriteCmd(_SC);
 8000eda:	4b97      	ldr	r3, [pc, #604]	; (8001138 <setAddrWindow+0x288>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a96      	ldr	r2, [pc, #600]	; (8001138 <setAddrWindow+0x288>)
 8000ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ee4:	6153      	str	r3, [r2, #20]
 8000ee6:	4b95      	ldr	r3, [pc, #596]	; (800113c <setAddrWindow+0x28c>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000eee:	4a94      	ldr	r2, [pc, #592]	; (8001140 <setAddrWindow+0x290>)
 8000ef0:	8812      	ldrh	r2, [r2, #0]
 8000ef2:	0a12      	lsrs	r2, r2, #8
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4a90      	ldr	r2, [pc, #576]	; (800113c <setAddrWindow+0x28c>)
 8000efa:	430b      	orrs	r3, r1
 8000efc:	6153      	str	r3, [r2, #20]
 8000efe:	4b8e      	ldr	r3, [pc, #568]	; (8001138 <setAddrWindow+0x288>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a8d      	ldr	r2, [pc, #564]	; (8001138 <setAddrWindow+0x288>)
 8000f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <setAddrWindow+0x288>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a8a      	ldr	r2, [pc, #552]	; (8001138 <setAddrWindow+0x288>)
 8000f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	4b89      	ldr	r3, [pc, #548]	; (800113c <setAddrWindow+0x28c>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000f1e:	4b88      	ldr	r3, [pc, #544]	; (8001140 <setAddrWindow+0x290>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4985      	ldr	r1, [pc, #532]	; (800113c <setAddrWindow+0x28c>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	614b      	str	r3, [r1, #20]
 8000f2a:	4b83      	ldr	r3, [pc, #524]	; (8001138 <setAddrWindow+0x288>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a82      	ldr	r2, [pc, #520]	; (8001138 <setAddrWindow+0x288>)
 8000f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b80      	ldr	r3, [pc, #512]	; (8001138 <setAddrWindow+0x288>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a7f      	ldr	r2, [pc, #508]	; (8001138 <setAddrWindow+0x288>)
 8000f3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f40:	6153      	str	r3, [r2, #20]
	CD_DATA;
 8000f42:	4b7d      	ldr	r3, [pc, #500]	; (8001138 <setAddrWindow+0x288>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a7c      	ldr	r2, [pc, #496]	; (8001138 <setAddrWindow+0x288>)
 8000f48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4c:	6153      	str	r3, [r2, #20]
	write8(x >> 8);
 8000f4e:	4b7b      	ldr	r3, [pc, #492]	; (800113c <setAddrWindow+0x28c>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	0a12      	lsrs	r2, r2, #8
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4a77      	ldr	r2, [pc, #476]	; (800113c <setAddrWindow+0x28c>)
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6153      	str	r3, [r2, #20]
 8000f64:	4b74      	ldr	r3, [pc, #464]	; (8001138 <setAddrWindow+0x288>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	4a73      	ldr	r2, [pc, #460]	; (8001138 <setAddrWindow+0x288>)
 8000f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f6e:	6153      	str	r3, [r2, #20]
 8000f70:	4b71      	ldr	r3, [pc, #452]	; (8001138 <setAddrWindow+0x288>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a70      	ldr	r2, [pc, #448]	; (8001138 <setAddrWindow+0x288>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6153      	str	r3, [r2, #20]
	write8(x);
 8000f7c:	4b6f      	ldr	r3, [pc, #444]	; (800113c <setAddrWindow+0x28c>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	496d      	ldr	r1, [pc, #436]	; (800113c <setAddrWindow+0x28c>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	614b      	str	r3, [r1, #20]
 8000f8c:	4b6a      	ldr	r3, [pc, #424]	; (8001138 <setAddrWindow+0x288>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4a69      	ldr	r2, [pc, #420]	; (8001138 <setAddrWindow+0x288>)
 8000f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f96:	6153      	str	r3, [r2, #20]
 8000f98:	4b67      	ldr	r3, [pc, #412]	; (8001138 <setAddrWindow+0x288>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a66      	ldr	r2, [pc, #408]	; (8001138 <setAddrWindow+0x288>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6153      	str	r3, [r2, #20]
	write8(x1 >> 8);
 8000fa4:	4b65      	ldr	r3, [pc, #404]	; (800113c <setAddrWindow+0x28c>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000fac:	887a      	ldrh	r2, [r7, #2]
 8000fae:	0a12      	lsrs	r2, r2, #8
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a61      	ldr	r2, [pc, #388]	; (800113c <setAddrWindow+0x28c>)
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <setAddrWindow+0x288>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a5e      	ldr	r2, [pc, #376]	; (8001138 <setAddrWindow+0x288>)
 8000fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <setAddrWindow+0x288>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a5b      	ldr	r2, [pc, #364]	; (8001138 <setAddrWindow+0x288>)
 8000fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd0:	6153      	str	r3, [r2, #20]
	write8(x1);
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	; (800113c <setAddrWindow+0x28c>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	4957      	ldr	r1, [pc, #348]	; (800113c <setAddrWindow+0x28c>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	614b      	str	r3, [r1, #20]
 8000fe2:	4b55      	ldr	r3, [pc, #340]	; (8001138 <setAddrWindow+0x288>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a54      	ldr	r2, [pc, #336]	; (8001138 <setAddrWindow+0x288>)
 8000fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b52      	ldr	r3, [pc, #328]	; (8001138 <setAddrWindow+0x288>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a51      	ldr	r2, [pc, #324]	; (8001138 <setAddrWindow+0x288>)
 8000ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff8:	6153      	str	r3, [r2, #20]
	CS_HIGH;
 8000ffa:	4b4f      	ldr	r3, [pc, #316]	; (8001138 <setAddrWindow+0x288>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <setAddrWindow+0x288>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6153      	str	r3, [r2, #20]

	//uint8_t data2[4] = {x >> 8, x, x1 >> 8, x1};
	//WriteCmdParamN(_SP, 4, data2);
	// Przyspieszone WriteCmdParamN(_SC...)
	CS_LOW;
 8001006:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <setAddrWindow+0x288>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a4b      	ldr	r2, [pc, #300]	; (8001138 <setAddrWindow+0x288>)
 800100c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001010:	6153      	str	r3, [r2, #20]
	WriteCmd(_SP);
 8001012:	4b49      	ldr	r3, [pc, #292]	; (8001138 <setAddrWindow+0x288>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a48      	ldr	r2, [pc, #288]	; (8001138 <setAddrWindow+0x288>)
 8001018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b47      	ldr	r3, [pc, #284]	; (800113c <setAddrWindow+0x28c>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001026:	4a47      	ldr	r2, [pc, #284]	; (8001144 <setAddrWindow+0x294>)
 8001028:	8812      	ldrh	r2, [r2, #0]
 800102a:	0a12      	lsrs	r2, r2, #8
 800102c:	b292      	uxth	r2, r2
 800102e:	4611      	mov	r1, r2
 8001030:	4a42      	ldr	r2, [pc, #264]	; (800113c <setAddrWindow+0x28c>)
 8001032:	430b      	orrs	r3, r1
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b40      	ldr	r3, [pc, #256]	; (8001138 <setAddrWindow+0x288>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a3f      	ldr	r2, [pc, #252]	; (8001138 <setAddrWindow+0x288>)
 800103c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <setAddrWindow+0x288>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a3c      	ldr	r2, [pc, #240]	; (8001138 <setAddrWindow+0x288>)
 8001048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <setAddrWindow+0x28c>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <setAddrWindow+0x294>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4937      	ldr	r1, [pc, #220]	; (800113c <setAddrWindow+0x28c>)
 800105e:	4313      	orrs	r3, r2
 8001060:	614b      	str	r3, [r1, #20]
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <setAddrWindow+0x288>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a34      	ldr	r2, [pc, #208]	; (8001138 <setAddrWindow+0x288>)
 8001068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <setAddrWindow+0x288>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a31      	ldr	r2, [pc, #196]	; (8001138 <setAddrWindow+0x288>)
 8001074:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001078:	6153      	str	r3, [r2, #20]
	CD_DATA;
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <setAddrWindow+0x288>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <setAddrWindow+0x288>)
 8001080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001084:	6153      	str	r3, [r2, #20]
	write8(y >> 8);
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <setAddrWindow+0x28c>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800108e:	88ba      	ldrh	r2, [r7, #4]
 8001090:	0a12      	lsrs	r2, r2, #8
 8001092:	b292      	uxth	r2, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a29      	ldr	r2, [pc, #164]	; (800113c <setAddrWindow+0x28c>)
 8001098:	430b      	orrs	r3, r1
 800109a:	6153      	str	r3, [r2, #20]
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <setAddrWindow+0x288>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	4a25      	ldr	r2, [pc, #148]	; (8001138 <setAddrWindow+0x288>)
 80010a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010a6:	6153      	str	r3, [r2, #20]
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <setAddrWindow+0x288>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <setAddrWindow+0x288>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b2:	6153      	str	r3, [r2, #20]
	write8(y);
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <setAddrWindow+0x28c>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	491f      	ldr	r1, [pc, #124]	; (800113c <setAddrWindow+0x28c>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	614b      	str	r3, [r1, #20]
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <setAddrWindow+0x288>)
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <setAddrWindow+0x288>)
 80010ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ce:	6153      	str	r3, [r2, #20]
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <setAddrWindow+0x288>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <setAddrWindow+0x288>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6153      	str	r3, [r2, #20]
	write8(y1 >> 8);
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <setAddrWindow+0x28c>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010e4:	883a      	ldrh	r2, [r7, #0]
 80010e6:	0a12      	lsrs	r2, r2, #8
 80010e8:	b292      	uxth	r2, r2
 80010ea:	4611      	mov	r1, r2
 80010ec:	4a13      	ldr	r2, [pc, #76]	; (800113c <setAddrWindow+0x28c>)
 80010ee:	430b      	orrs	r3, r1
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <setAddrWindow+0x288>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <setAddrWindow+0x288>)
 80010f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <setAddrWindow+0x288>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <setAddrWindow+0x288>)
 8001104:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001108:	6153      	str	r3, [r2, #20]
	write8(y1);
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <setAddrWindow+0x28c>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001112:	883b      	ldrh	r3, [r7, #0]
 8001114:	4909      	ldr	r1, [pc, #36]	; (800113c <setAddrWindow+0x28c>)
 8001116:	4313      	orrs	r3, r2
 8001118:	614b      	str	r3, [r1, #20]
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <setAddrWindow+0x288>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <setAddrWindow+0x288>)
 8001120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001124:	6153      	str	r3, [r2, #20]
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <setAddrWindow+0x288>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a03      	ldr	r2, [pc, #12]	; (8001138 <setAddrWindow+0x288>)
 800112c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001130:	6153      	str	r3, [r2, #20]
	CS_HIGH;
 8001132:	4b01      	ldr	r3, [pc, #4]	; (8001138 <setAddrWindow+0x288>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	e007      	b.n	8001148 <setAddrWindow+0x298>
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	20000002 	.word	0x20000002
 8001144:	20000006 	.word	0x20000006
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <setAddrWindow+0x2ac>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6153      	str	r3, [r2, #20]
    WriteCmdData(_SC, x);
    WriteCmdData(_SP, y);
    WriteCmdData(_EC, x1);
    WriteCmdData(_EP, y1);
#endif
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bc90      	pop	{r4, r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40020000 	.word	0x40020000

08001160 <fillRect>:
	}
	CS_HIGH;
	//setAddrWindow(0, 0, 240 - 1, 400 - 1);
}*/

void fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) { // to ten szybszy
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	uint8_t hi = color>>8;
 800117e:	8c3b      	ldrh	r3, [r7, #32]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	72fb      	strb	r3, [r7, #11]
	uint8_t lo = color&0xFF;
 8001186:	8c3b      	ldrh	r3, [r7, #32]
 8001188:	72bb      	strb	r3, [r7, #10]
	if(hi==lo) { // tryb zapiepszania
 800118a:	7afa      	ldrb	r2, [r7, #11]
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	429a      	cmp	r2, r3
 8001190:	f040 8088 	bne.w	80012a4 <fillRect+0x144>
		setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001194:	88fa      	ldrh	r2, [r7, #6]
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	3b01      	subs	r3, #1
 800119e:	b29c      	uxth	r4, r3
 80011a0:	88ba      	ldrh	r2, [r7, #4]
 80011a2:	883b      	ldrh	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3b01      	subs	r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	88b9      	ldrh	r1, [r7, #4]
 80011ae:	88f8      	ldrh	r0, [r7, #6]
 80011b0:	4622      	mov	r2, r4
 80011b2:	f7ff fe7d 	bl	8000eb0 <setAddrWindow>
		CS_LOW;
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <fillRect+0x26c>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a84      	ldr	r2, [pc, #528]	; (80013cc <fillRect+0x26c>)
 80011bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c0:	6153      	str	r3, [r2, #20]
		WriteCmd(_MW);
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <fillRect+0x26c>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a81      	ldr	r2, [pc, #516]	; (80013cc <fillRect+0x26c>)
 80011c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <fillRect+0x270>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011d6:	4a7f      	ldr	r2, [pc, #508]	; (80013d4 <fillRect+0x274>)
 80011d8:	8812      	ldrh	r2, [r2, #0]
 80011da:	0a12      	lsrs	r2, r2, #8
 80011dc:	b292      	uxth	r2, r2
 80011de:	4611      	mov	r1, r2
 80011e0:	4a7b      	ldr	r2, [pc, #492]	; (80013d0 <fillRect+0x270>)
 80011e2:	430b      	orrs	r3, r1
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b79      	ldr	r3, [pc, #484]	; (80013cc <fillRect+0x26c>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a78      	ldr	r2, [pc, #480]	; (80013cc <fillRect+0x26c>)
 80011ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b76      	ldr	r3, [pc, #472]	; (80013cc <fillRect+0x26c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a75      	ldr	r2, [pc, #468]	; (80013cc <fillRect+0x26c>)
 80011f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b74      	ldr	r3, [pc, #464]	; (80013d0 <fillRect+0x270>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <fillRect+0x274>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4970      	ldr	r1, [pc, #448]	; (80013d0 <fillRect+0x270>)
 800120e:	4313      	orrs	r3, r2
 8001210:	614b      	str	r3, [r1, #20]
 8001212:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <fillRect+0x26c>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a6d      	ldr	r2, [pc, #436]	; (80013cc <fillRect+0x26c>)
 8001218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <fillRect+0x26c>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <fillRect+0x26c>)
 8001224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001228:	6153      	str	r3, [r2, #20]
		//uint8_t hi = color>>8;
		//uint8_t lo = color&0xFF;
		uint16_t end = w;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	81fb      	strh	r3, [r7, #14]
		CD_DATA;
 800122e:	4b67      	ldr	r3, [pc, #412]	; (80013cc <fillRect+0x26c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a66      	ldr	r2, [pc, #408]	; (80013cc <fillRect+0x26c>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001238:	6153      	str	r3, [r2, #20]
		write_8(lo);
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <fillRect+0x270>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	4962      	ldr	r1, [pc, #392]	; (80013d0 <fillRect+0x270>)
 8001246:	4313      	orrs	r3, r2
 8001248:	614b      	str	r3, [r1, #20]
		while(h-- > 0) {
 800124a:	e01f      	b.n	800128c <fillRect+0x12c>
			end = w;
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	81fb      	strh	r3, [r7, #14]
			while(end-- > 0) {
 8001250:	e017      	b.n	8001282 <fillRect+0x122>
				/*write8(hi);
				write8(lo);*/
				WR_STROBE;
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <fillRect+0x26c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <fillRect+0x26c>)
 8001258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800125c:	6153      	str	r3, [r2, #20]
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <fillRect+0x26c>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <fillRect+0x26c>)
 8001264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001268:	6153      	str	r3, [r2, #20]
				WR_STROBE;
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <fillRect+0x26c>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a57      	ldr	r2, [pc, #348]	; (80013cc <fillRect+0x26c>)
 8001270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001274:	6153      	str	r3, [r2, #20]
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <fillRect+0x26c>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a54      	ldr	r2, [pc, #336]	; (80013cc <fillRect+0x26c>)
 800127c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001280:	6153      	str	r3, [r2, #20]
			while(end-- > 0) {
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	81fa      	strh	r2, [r7, #14]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e2      	bne.n	8001252 <fillRect+0xf2>
		while(h-- > 0) {
 800128c:	883b      	ldrh	r3, [r7, #0]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	803a      	strh	r2, [r7, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1da      	bne.n	800124c <fillRect+0xec>

			}
		}
		CS_HIGH;
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <fillRect+0x26c>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <fillRect+0x26c>)
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	6153      	str	r3, [r2, #20]
				write8(lo);
			}
		}
		CS_HIGH;
	}
}
 80012a2:	e08e      	b.n	80013c2 <fillRect+0x262>
		setAddrWindow(x, y, x + w - 1, y + h - 1);
 80012a4:	88fa      	ldrh	r2, [r7, #6]
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	4413      	add	r3, r2
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b29c      	uxth	r4, r3
 80012b0:	88ba      	ldrh	r2, [r7, #4]
 80012b2:	883b      	ldrh	r3, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	88b9      	ldrh	r1, [r7, #4]
 80012be:	88f8      	ldrh	r0, [r7, #6]
 80012c0:	4622      	mov	r2, r4
 80012c2:	f7ff fdf5 	bl	8000eb0 <setAddrWindow>
		CS_LOW;
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <fillRect+0x26c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a40      	ldr	r2, [pc, #256]	; (80013cc <fillRect+0x26c>)
 80012cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012d0:	6153      	str	r3, [r2, #20]
		WriteCmd(_MW);
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <fillRect+0x26c>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <fillRect+0x26c>)
 80012d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <fillRect+0x270>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80012e6:	4a3b      	ldr	r2, [pc, #236]	; (80013d4 <fillRect+0x274>)
 80012e8:	8812      	ldrh	r2, [r2, #0]
 80012ea:	0a12      	lsrs	r2, r2, #8
 80012ec:	b292      	uxth	r2, r2
 80012ee:	4611      	mov	r1, r2
 80012f0:	4a37      	ldr	r2, [pc, #220]	; (80013d0 <fillRect+0x270>)
 80012f2:	430b      	orrs	r3, r1
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <fillRect+0x26c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a34      	ldr	r2, [pc, #208]	; (80013cc <fillRect+0x26c>)
 80012fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <fillRect+0x26c>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a31      	ldr	r2, [pc, #196]	; (80013cc <fillRect+0x26c>)
 8001308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <fillRect+0x270>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <fillRect+0x274>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	492c      	ldr	r1, [pc, #176]	; (80013d0 <fillRect+0x270>)
 800131e:	4313      	orrs	r3, r2
 8001320:	614b      	str	r3, [r1, #20]
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <fillRect+0x26c>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <fillRect+0x26c>)
 8001328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <fillRect+0x26c>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a26      	ldr	r2, [pc, #152]	; (80013cc <fillRect+0x26c>)
 8001334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001338:	6153      	str	r3, [r2, #20]
		uint16_t end = w;
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	81bb      	strh	r3, [r7, #12]
		CD_DATA;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <fillRect+0x26c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <fillRect+0x26c>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001348:	6153      	str	r3, [r2, #20]
		while(h-- > 0) {
 800134a:	e02f      	b.n	80013ac <fillRect+0x24c>
			end = w;
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	81bb      	strh	r3, [r7, #12]
			while(end-- > 0) {
 8001350:	e027      	b.n	80013a2 <fillRect+0x242>
				write8(hi);
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <fillRect+0x270>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	491c      	ldr	r1, [pc, #112]	; (80013d0 <fillRect+0x270>)
 800135e:	4313      	orrs	r3, r2
 8001360:	614b      	str	r3, [r1, #20]
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <fillRect+0x26c>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a19      	ldr	r2, [pc, #100]	; (80013cc <fillRect+0x26c>)
 8001368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <fillRect+0x26c>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <fillRect+0x26c>)
 8001374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001378:	6153      	str	r3, [r2, #20]
				write8(lo);
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <fillRect+0x270>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001382:	7abb      	ldrb	r3, [r7, #10]
 8001384:	4912      	ldr	r1, [pc, #72]	; (80013d0 <fillRect+0x270>)
 8001386:	4313      	orrs	r3, r2
 8001388:	614b      	str	r3, [r1, #20]
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <fillRect+0x26c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <fillRect+0x26c>)
 8001390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001394:	6153      	str	r3, [r2, #20]
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <fillRect+0x26c>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <fillRect+0x26c>)
 800139c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a0:	6153      	str	r3, [r2, #20]
			while(end-- > 0) {
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	81ba      	strh	r2, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1d2      	bne.n	8001352 <fillRect+0x1f2>
		while(h-- > 0) {
 80013ac:	883b      	ldrh	r3, [r7, #0]
 80013ae:	1e5a      	subs	r2, r3, #1
 80013b0:	803a      	strh	r2, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ca      	bne.n	800134c <fillRect+0x1ec>
		CS_HIGH;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <fillRect+0x26c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <fillRect+0x26c>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6153      	str	r3, [r2, #20]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	2000000a 	.word	0x2000000a

080013d8 <col8to16>:
		write8(lo);
	}
	CS_HIGH;
}

uint16_t col8to16(uint8_t in) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	//return ((in & 0b11000000)<<8) | ((in & 0b0011100)<<6) | ((in & 0b0000011)<<3);
	return ((in & 0b11100000)<<8) | ((in & 0b00011100) <<6) | ((in & 0b00000011)<<3);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80013ec:	f023 031f 	bic.w	r3, r3, #31
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21a      	sxth	r2, r3
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	b21b      	sxth	r3, r3
 8001408:	f003 0318 	and.w	r3, r3, #24
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21b      	sxth	r3, r3
 8001412:	b29b      	uxth	r3, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <drawBitmapLo>:
			pxn++;
		}
	}
}

void drawBitmapLo(const uint8_t *mapin, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4603      	mov	r3, r0
 8001430:	817b      	strh	r3, [r7, #10]
 8001432:	460b      	mov	r3, r1
 8001434:	813b      	strh	r3, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 800143a:	897a      	ldrh	r2, [r7, #10]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4413      	add	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29c      	uxth	r4, r3
 8001446:	893a      	ldrh	r2, [r7, #8]
 8001448:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800144a:	4413      	add	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	3b01      	subs	r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	8939      	ldrh	r1, [r7, #8]
 8001454:	8978      	ldrh	r0, [r7, #10]
 8001456:	4622      	mov	r2, r4
 8001458:	f7ff fd2a 	bl	8000eb0 <setAddrWindow>
	CS_LOW;
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <drawBitmapLo+0x18c>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	4a52      	ldr	r2, [pc, #328]	; (80015ac <drawBitmapLo+0x18c>)
 8001462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001466:	6153      	str	r3, [r2, #20]
	WriteCmd(_MW);
 8001468:	4b50      	ldr	r3, [pc, #320]	; (80015ac <drawBitmapLo+0x18c>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <drawBitmapLo+0x18c>)
 800146e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001472:	6153      	str	r3, [r2, #20]
 8001474:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <drawBitmapLo+0x190>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <drawBitmapLo+0x194>)
 800147e:	8812      	ldrh	r2, [r2, #0]
 8001480:	0a12      	lsrs	r2, r2, #8
 8001482:	b292      	uxth	r2, r2
 8001484:	4611      	mov	r1, r2
 8001486:	4a4a      	ldr	r2, [pc, #296]	; (80015b0 <drawBitmapLo+0x190>)
 8001488:	430b      	orrs	r3, r1
 800148a:	6153      	str	r3, [r2, #20]
 800148c:	4b47      	ldr	r3, [pc, #284]	; (80015ac <drawBitmapLo+0x18c>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	4a46      	ldr	r2, [pc, #280]	; (80015ac <drawBitmapLo+0x18c>)
 8001492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001496:	6153      	str	r3, [r2, #20]
 8001498:	4b44      	ldr	r3, [pc, #272]	; (80015ac <drawBitmapLo+0x18c>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	4a43      	ldr	r2, [pc, #268]	; (80015ac <drawBitmapLo+0x18c>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6153      	str	r3, [r2, #20]
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <drawBitmapLo+0x190>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <drawBitmapLo+0x194>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	493f      	ldr	r1, [pc, #252]	; (80015b0 <drawBitmapLo+0x190>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	614b      	str	r3, [r1, #20]
 80014b8:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <drawBitmapLo+0x18c>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <drawBitmapLo+0x18c>)
 80014be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014c2:	6153      	str	r3, [r2, #20]
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <drawBitmapLo+0x18c>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	4a38      	ldr	r2, [pc, #224]	; (80015ac <drawBitmapLo+0x18c>)
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ce:	6153      	str	r3, [r2, #20]
	CD_DATA;
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <drawBitmapLo+0x18c>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	4a35      	ldr	r2, [pc, #212]	; (80015ac <drawBitmapLo+0x18c>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014da:	6153      	str	r3, [r2, #20]
	uint32_t pxn = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
	uint16_t endy = y+h;
 80014e0:	893a      	ldrh	r2, [r7, #8]
 80014e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80014e4:	4413      	add	r3, r2
 80014e6:	82fb      	strh	r3, [r7, #22]
	uint16_t endx = x+w;
 80014e8:	897a      	ldrh	r2, [r7, #10]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	4413      	add	r3, r2
 80014ee:	82bb      	strh	r3, [r7, #20]
	for(int16_t j=y; j<endy; j++) {
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	837b      	strh	r3, [r7, #26]
 80014f4:	e04b      	b.n	800158e <drawBitmapLo+0x16e>
		for(uint16_t i=x; i<endx; i++) {
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	833b      	strh	r3, [r7, #24]
 80014fa:	e03e      	b.n	800157a <drawBitmapLo+0x15a>
			write16(col8to16(mapin[pxn]));
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <drawBitmapLo+0x190>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	f403 447f 	and.w	r4, r3, #65280	; 0xff00
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff63 	bl	80013d8 <col8to16>
 8001512:	4603      	mov	r3, r0
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	b29b      	uxth	r3, r3
 8001518:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <drawBitmapLo+0x190>)
 800151a:	4323      	orrs	r3, r4
 800151c:	6153      	str	r3, [r2, #20]
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <drawBitmapLo+0x18c>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a22      	ldr	r2, [pc, #136]	; (80015ac <drawBitmapLo+0x18c>)
 8001524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <drawBitmapLo+0x18c>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <drawBitmapLo+0x18c>)
 8001530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <drawBitmapLo+0x190>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 447f 	and.w	r4, r3, #65280	; 0xff00
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff46 	bl	80013d8 <col8to16>
 800154c:	4603      	mov	r3, r0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <drawBitmapLo+0x190>)
 8001552:	4323      	orrs	r3, r4
 8001554:	6153      	str	r3, [r2, #20]
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <drawBitmapLo+0x18c>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <drawBitmapLo+0x18c>)
 800155c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <drawBitmapLo+0x18c>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <drawBitmapLo+0x18c>)
 8001568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156c:	6153      	str	r3, [r2, #20]
			pxn++;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
		for(uint16_t i=x; i<endx; i++) {
 8001574:	8b3b      	ldrh	r3, [r7, #24]
 8001576:	3301      	adds	r3, #1
 8001578:	833b      	strh	r3, [r7, #24]
 800157a:	8b3a      	ldrh	r2, [r7, #24]
 800157c:	8abb      	ldrh	r3, [r7, #20]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3bc      	bcc.n	80014fc <drawBitmapLo+0xdc>
	for(int16_t j=y; j<endy; j++) {
 8001582:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001586:	b29b      	uxth	r3, r3
 8001588:	3301      	adds	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	837b      	strh	r3, [r7, #26]
 800158e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001592:	8afb      	ldrh	r3, [r7, #22]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbae      	blt.n	80014f6 <drawBitmapLo+0xd6>
		}
	}
	CS_HIGH;
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <drawBitmapLo+0x18c>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <drawBitmapLo+0x18c>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6153      	str	r3, [r2, #20]
}
 80015a4:	bf00      	nop
 80015a6:	3724      	adds	r7, #36	; 0x24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400
 80015b4:	2000000a 	.word	0x2000000a

080015b8 <drawBitmapHi>:
			pxn++;
		}
	}
}

void drawBitmapHi(const uint16_t *mapin, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	4608      	mov	r0, r1
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	817b      	strh	r3, [r7, #10]
 80015ca:	460b      	mov	r3, r1
 80015cc:	813b      	strh	r3, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80fb      	strh	r3, [r7, #6]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80015d2:	897a      	ldrh	r2, [r7, #10]
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4413      	add	r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29c      	uxth	r4, r3
 80015de:	893a      	ldrh	r2, [r7, #8]
 80015e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015e2:	4413      	add	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	8939      	ldrh	r1, [r7, #8]
 80015ec:	8978      	ldrh	r0, [r7, #10]
 80015ee:	4622      	mov	r2, r4
 80015f0:	f7ff fc5e 	bl	8000eb0 <setAddrWindow>
	CS_LOW;
 80015f4:	4b51      	ldr	r3, [pc, #324]	; (800173c <drawBitmapHi+0x184>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4a50      	ldr	r2, [pc, #320]	; (800173c <drawBitmapHi+0x184>)
 80015fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fe:	6153      	str	r3, [r2, #20]
	WriteCmd(_MW);
 8001600:	4b4e      	ldr	r3, [pc, #312]	; (800173c <drawBitmapHi+0x184>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	4a4d      	ldr	r2, [pc, #308]	; (800173c <drawBitmapHi+0x184>)
 8001606:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800160a:	6153      	str	r3, [r2, #20]
 800160c:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <drawBitmapHi+0x188>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001614:	4a4b      	ldr	r2, [pc, #300]	; (8001744 <drawBitmapHi+0x18c>)
 8001616:	8812      	ldrh	r2, [r2, #0]
 8001618:	0a12      	lsrs	r2, r2, #8
 800161a:	b292      	uxth	r2, r2
 800161c:	4611      	mov	r1, r2
 800161e:	4a48      	ldr	r2, [pc, #288]	; (8001740 <drawBitmapHi+0x188>)
 8001620:	430b      	orrs	r3, r1
 8001622:	6153      	str	r3, [r2, #20]
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <drawBitmapHi+0x184>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	4a44      	ldr	r2, [pc, #272]	; (800173c <drawBitmapHi+0x184>)
 800162a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800162e:	6153      	str	r3, [r2, #20]
 8001630:	4b42      	ldr	r3, [pc, #264]	; (800173c <drawBitmapHi+0x184>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4a41      	ldr	r2, [pc, #260]	; (800173c <drawBitmapHi+0x184>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6153      	str	r3, [r2, #20]
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <drawBitmapHi+0x188>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001644:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <drawBitmapHi+0x18c>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	493d      	ldr	r1, [pc, #244]	; (8001740 <drawBitmapHi+0x188>)
 800164c:	4313      	orrs	r3, r2
 800164e:	614b      	str	r3, [r1, #20]
 8001650:	4b3a      	ldr	r3, [pc, #232]	; (800173c <drawBitmapHi+0x184>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4a39      	ldr	r2, [pc, #228]	; (800173c <drawBitmapHi+0x184>)
 8001656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800165a:	6153      	str	r3, [r2, #20]
 800165c:	4b37      	ldr	r3, [pc, #220]	; (800173c <drawBitmapHi+0x184>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4a36      	ldr	r2, [pc, #216]	; (800173c <drawBitmapHi+0x184>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001666:	6153      	str	r3, [r2, #20]
	CD_DATA;
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <drawBitmapHi+0x184>)
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	4a33      	ldr	r2, [pc, #204]	; (800173c <drawBitmapHi+0x184>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6153      	str	r3, [r2, #20]
	uint32_t pxn = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
	uint16_t endy = y+h;
 8001678:	893a      	ldrh	r2, [r7, #8]
 800167a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800167c:	4413      	add	r3, r2
 800167e:	82fb      	strh	r3, [r7, #22]
	uint16_t endx = x+w;
 8001680:	897a      	ldrh	r2, [r7, #10]
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4413      	add	r3, r2
 8001686:	82bb      	strh	r3, [r7, #20]
	for(int16_t j=y; j<endy; j++) {
 8001688:	893b      	ldrh	r3, [r7, #8]
 800168a:	837b      	strh	r3, [r7, #26]
 800168c:	e046      	b.n	800171c <drawBitmapHi+0x164>
		for(uint16_t i=x; i<endx; i++) {
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	833b      	strh	r3, [r7, #24]
 8001692:	e039      	b.n	8001708 <drawBitmapHi+0x150>
			write16(mapin[pxn]);
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <drawBitmapHi+0x188>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	0052      	lsls	r2, r2, #1
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	440a      	add	r2, r1
 80016a4:	8812      	ldrh	r2, [r2, #0]
 80016a6:	0a12      	lsrs	r2, r2, #8
 80016a8:	b292      	uxth	r2, r2
 80016aa:	4611      	mov	r1, r2
 80016ac:	4a24      	ldr	r2, [pc, #144]	; (8001740 <drawBitmapHi+0x188>)
 80016ae:	430b      	orrs	r3, r1
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <drawBitmapHi+0x184>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <drawBitmapHi+0x184>)
 80016b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016bc:	6153      	str	r3, [r2, #20]
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <drawBitmapHi+0x184>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <drawBitmapHi+0x184>)
 80016c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <drawBitmapHi+0x188>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	68f9      	ldr	r1, [r7, #12]
 80016d8:	440b      	add	r3, r1
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4918      	ldr	r1, [pc, #96]	; (8001740 <drawBitmapHi+0x188>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	614b      	str	r3, [r1, #20]
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <drawBitmapHi+0x184>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <drawBitmapHi+0x184>)
 80016ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016ee:	6153      	str	r3, [r2, #20]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <drawBitmapHi+0x184>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	4a11      	ldr	r2, [pc, #68]	; (800173c <drawBitmapHi+0x184>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6153      	str	r3, [r2, #20]
			pxn++;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3301      	adds	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
		for(uint16_t i=x; i<endx; i++) {
 8001702:	8b3b      	ldrh	r3, [r7, #24]
 8001704:	3301      	adds	r3, #1
 8001706:	833b      	strh	r3, [r7, #24]
 8001708:	8b3a      	ldrh	r2, [r7, #24]
 800170a:	8abb      	ldrh	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3c1      	bcc.n	8001694 <drawBitmapHi+0xdc>
	for(int16_t j=y; j<endy; j++) {
 8001710:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001714:	b29b      	uxth	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	837b      	strh	r3, [r7, #26]
 800171c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001720:	8afb      	ldrh	r3, [r7, #22]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbb3      	blt.n	800168e <drawBitmapHi+0xd6>
		}
	}
	CS_HIGH;
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <drawBitmapHi+0x184>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <drawBitmapHi+0x184>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6153      	str	r3, [r2, #20]
}
 8001732:	bf00      	nop
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	bf00      	nop
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	2000000a 	.word	0x2000000a

08001748 <drawMonoBitmap>:

void drawMonoBitmap(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t color, uint16_t bgc) {
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	81fb      	strh	r3, [r7, #14]
 8001756:	460b      	mov	r3, r1
 8001758:	81bb      	strh	r3, [r7, #12]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
	// Monochromatyczna mapa bitowa o zdefiniowanej kolorystyce. Mapa to jednowymiarowa tablica bajtów niosąca informacje o kolejnych bitach
	// Pierwsze dwa bajty to szerokość i wysokość

	uint16_t w = bitmap[0];
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	837b      	strh	r3, [r7, #26]
	uint16_t h = bitmap[1];
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	3301      	adds	r3, #1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	833b      	strh	r3, [r7, #24]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 800176c:	89fa      	ldrh	r2, [r7, #14]
 800176e:	8b7b      	ldrh	r3, [r7, #26]
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b29c      	uxth	r4, r3
 8001778:	89ba      	ldrh	r2, [r7, #12]
 800177a:	8b3b      	ldrh	r3, [r7, #24]
 800177c:	4413      	add	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	89b9      	ldrh	r1, [r7, #12]
 8001786:	89f8      	ldrh	r0, [r7, #14]
 8001788:	4622      	mov	r2, r4
 800178a:	f7ff fb91 	bl	8000eb0 <setAddrWindow>
	CS_LOW;
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <drawMonoBitmap+0x214>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a72      	ldr	r2, [pc, #456]	; (800195c <drawMonoBitmap+0x214>)
 8001794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001798:	6153      	str	r3, [r2, #20]
	WriteCmd(_MW);
 800179a:	4b70      	ldr	r3, [pc, #448]	; (800195c <drawMonoBitmap+0x214>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a6f      	ldr	r2, [pc, #444]	; (800195c <drawMonoBitmap+0x214>)
 80017a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017a4:	6153      	str	r3, [r2, #20]
 80017a6:	4b6e      	ldr	r3, [pc, #440]	; (8001960 <drawMonoBitmap+0x218>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017ae:	4a6d      	ldr	r2, [pc, #436]	; (8001964 <drawMonoBitmap+0x21c>)
 80017b0:	8812      	ldrh	r2, [r2, #0]
 80017b2:	0a12      	lsrs	r2, r2, #8
 80017b4:	b292      	uxth	r2, r2
 80017b6:	4611      	mov	r1, r2
 80017b8:	4a69      	ldr	r2, [pc, #420]	; (8001960 <drawMonoBitmap+0x218>)
 80017ba:	430b      	orrs	r3, r1
 80017bc:	6153      	str	r3, [r2, #20]
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <drawMonoBitmap+0x214>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a66      	ldr	r2, [pc, #408]	; (800195c <drawMonoBitmap+0x214>)
 80017c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b64      	ldr	r3, [pc, #400]	; (800195c <drawMonoBitmap+0x214>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a63      	ldr	r2, [pc, #396]	; (800195c <drawMonoBitmap+0x214>)
 80017d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	4b62      	ldr	r3, [pc, #392]	; (8001960 <drawMonoBitmap+0x218>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80017de:	4b61      	ldr	r3, [pc, #388]	; (8001964 <drawMonoBitmap+0x21c>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	495e      	ldr	r1, [pc, #376]	; (8001960 <drawMonoBitmap+0x218>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	614b      	str	r3, [r1, #20]
 80017ea:	4b5c      	ldr	r3, [pc, #368]	; (800195c <drawMonoBitmap+0x214>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a5b      	ldr	r2, [pc, #364]	; (800195c <drawMonoBitmap+0x214>)
 80017f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f4:	6153      	str	r3, [r2, #20]
 80017f6:	4b59      	ldr	r3, [pc, #356]	; (800195c <drawMonoBitmap+0x214>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a58      	ldr	r2, [pc, #352]	; (800195c <drawMonoBitmap+0x214>)
 80017fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001800:	6153      	str	r3, [r2, #20]
	CD_DATA;
 8001802:	4b56      	ldr	r3, [pc, #344]	; (800195c <drawMonoBitmap+0x214>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a55      	ldr	r2, [pc, #340]	; (800195c <drawMonoBitmap+0x214>)
 8001808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180c:	6153      	str	r3, [r2, #20]
	uint16_t i, j;
	uint16_t num = ceil(w*h/8)+2;
 800180e:	8b7b      	ldrh	r3, [r7, #26]
 8001810:	8b3a      	ldrh	r2, [r7, #24]
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	da00      	bge.n	800181c <drawMonoBitmap+0xd4>
 800181a:	3307      	adds	r3, #7
 800181c:	10db      	asrs	r3, r3, #3
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe ffb2 	bl	8000788 <__aeabi_i2d>
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182c:	f7fe fe60 	bl	80004f0 <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f838 	bl	80008ac <__aeabi_d2uiz>
 800183c:	4603      	mov	r3, r0
 800183e:	82fb      	strh	r3, [r7, #22]
	uint8_t coltab[4];
	coltab[0] = color>>8; coltab[1] = color & 0xFF;
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	743b      	strb	r3, [r7, #16]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	747b      	strb	r3, [r7, #17]
	coltab[2] = bgc>>8;   coltab[3] = bgc&0xFF;
 8001850:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	74bb      	strb	r3, [r7, #18]
 800185a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800185c:	b2db      	uxtb	r3, r3
 800185e:	74fb      	strb	r3, [r7, #19]
	//uint8_t bitnum = 0;
	for(j=2; j<num; j++) {
 8001860:	2302      	movs	r3, #2
 8001862:	83bb      	strh	r3, [r7, #28]
 8001864:	e06c      	b.n	8001940 <drawMonoBitmap+0x1f8>
		for(i=0; i<8; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	83fb      	strh	r3, [r7, #30]
 800186a:	e063      	b.n	8001934 <drawMonoBitmap+0x1ec>
			if(bitmap[j] & (1<<i)) { // jeśli 1 - kolor
 800186c:	8bbb      	ldrh	r3, [r7, #28]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	8bfb      	ldrh	r3, [r7, #30]
 8001878:	fa42 f303 	asr.w	r3, r2, r3
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02a      	beq.n	80018da <drawMonoBitmap+0x192>
				write8(coltab[0]);
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <drawMonoBitmap+0x218>)
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800188c:	7c3a      	ldrb	r2, [r7, #16]
 800188e:	4611      	mov	r1, r2
 8001890:	4a33      	ldr	r2, [pc, #204]	; (8001960 <drawMonoBitmap+0x218>)
 8001892:	430b      	orrs	r3, r1
 8001894:	6153      	str	r3, [r2, #20]
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <drawMonoBitmap+0x214>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a30      	ldr	r2, [pc, #192]	; (800195c <drawMonoBitmap+0x214>)
 800189c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <drawMonoBitmap+0x214>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <drawMonoBitmap+0x214>)
 80018a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ac:	6153      	str	r3, [r2, #20]
				write8(coltab[1]);
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <drawMonoBitmap+0x218>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80018b6:	7c7a      	ldrb	r2, [r7, #17]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4a29      	ldr	r2, [pc, #164]	; (8001960 <drawMonoBitmap+0x218>)
 80018bc:	430b      	orrs	r3, r1
 80018be:	6153      	str	r3, [r2, #20]
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <drawMonoBitmap+0x214>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4a25      	ldr	r2, [pc, #148]	; (800195c <drawMonoBitmap+0x214>)
 80018c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018ca:	6153      	str	r3, [r2, #20]
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <drawMonoBitmap+0x214>)
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <drawMonoBitmap+0x214>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	6153      	str	r3, [r2, #20]
 80018d8:	e029      	b.n	800192e <drawMonoBitmap+0x1e6>
			}
			else { // jeśli 0 - tło
				write8(coltab[2]);
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <drawMonoBitmap+0x218>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80018e2:	7cba      	ldrb	r2, [r7, #18]
 80018e4:	4611      	mov	r1, r2
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <drawMonoBitmap+0x218>)
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6153      	str	r3, [r2, #20]
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <drawMonoBitmap+0x214>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <drawMonoBitmap+0x214>)
 80018f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018f6:	6153      	str	r3, [r2, #20]
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <drawMonoBitmap+0x214>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <drawMonoBitmap+0x214>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001902:	6153      	str	r3, [r2, #20]
				write8(coltab[3]);
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <drawMonoBitmap+0x218>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800190c:	7cfa      	ldrb	r2, [r7, #19]
 800190e:	4611      	mov	r1, r2
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <drawMonoBitmap+0x218>)
 8001912:	430b      	orrs	r3, r1
 8001914:	6153      	str	r3, [r2, #20]
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <drawMonoBitmap+0x214>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <drawMonoBitmap+0x214>)
 800191c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <drawMonoBitmap+0x214>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4a0d      	ldr	r2, [pc, #52]	; (800195c <drawMonoBitmap+0x214>)
 8001928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192c:	6153      	str	r3, [r2, #20]
		for(i=0; i<8; i++) {
 800192e:	8bfb      	ldrh	r3, [r7, #30]
 8001930:	3301      	adds	r3, #1
 8001932:	83fb      	strh	r3, [r7, #30]
 8001934:	8bfb      	ldrh	r3, [r7, #30]
 8001936:	2b07      	cmp	r3, #7
 8001938:	d998      	bls.n	800186c <drawMonoBitmap+0x124>
	for(j=2; j<num; j++) {
 800193a:	8bbb      	ldrh	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	83bb      	strh	r3, [r7, #28]
 8001940:	8bba      	ldrh	r2, [r7, #28]
 8001942:	8afb      	ldrh	r3, [r7, #22]
 8001944:	429a      	cmp	r2, r3
 8001946:	d38e      	bcc.n	8001866 <drawMonoBitmap+0x11e>
			}
		}
	}
	CS_HIGH;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <drawMonoBitmap+0x214>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <drawMonoBitmap+0x214>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6153      	str	r3, [r2, #20]
}
 8001954:	bf00      	nop
 8001956:	3724      	adds	r7, #36	; 0x24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	2000000a 	.word	0x2000000a

08001968 <reset>:

uint16_t RGB2col(uint8_t R, uint8_t G, uint8_t B) {
	return ((R&0b11111000)<<8) | ((G&0b11111100)<<3) | ((B&0b11111000)>>3);
}

void reset() {
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	/*LCD_CTRL_PORT->MODER &= ~(1<<(LCD_RS_PIN*2+1));
	LCD_CTRL_PORT->MODER |=  (1<<(LCD_RS_PIN*2));
	LCD_CTRL_PORT->MODER &= ~(1<<(LCD_WR_PIN*2+1));
	LCD_CTRL_PORT->MODER |=  (1<<(LCD_WR_PIN*2));*/

	LCD_CTRL_PORT->MODER &= ~((LCD_RS_PIN*LCD_RS_PIN)<<1);
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <reset+0x7c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <reset+0x7c>)
 8001972:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001976:	6013      	str	r3, [r2, #0]
	LCD_CTRL_PORT->MODER |=  (LCD_RS_PIN*LCD_RS_PIN);
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <reset+0x7c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <reset+0x7c>)
 800197e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]
	LCD_CTRL_PORT->MODER &= ~((LCD_WR_PIN*LCD_WR_PIN)<<1);
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <reset+0x7c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <reset+0x7c>)
 800198a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800198e:	6013      	str	r3, [r2, #0]
	LCD_CTRL_PORT->MODER |=  (LCD_WR_PIN*LCD_WR_PIN);
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <reset+0x7c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <reset+0x7c>)
 8001996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800199a:	6013      	str	r3, [r2, #0]
	CS_HIGH;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <reset+0x7c>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <reset+0x7c>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6153      	str	r3, [r2, #20]
	RD_IDLE;
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <reset+0x7c>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <reset+0x7c>)
 80019ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b2:	6153      	str	r3, [r2, #20]
	WR_IDLE;
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <reset+0x7c>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <reset+0x7c>)
 80019ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019be:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(LCD_MISC_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	4808      	ldr	r0, [pc, #32]	; (80019e8 <reset+0x80>)
 80019c8:	f003 fd26 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019cc:	2064      	movs	r0, #100	; 0x64
 80019ce:	f002 fb1b 	bl	8004008 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_MISC_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <reset+0x80>)
 80019da:	f003 fd1d 	bl	8005418 <HAL_GPIO_WritePin>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020800 	.word	0x40020800

080019ec <init_table>:
    }
}
#else
//#define TFTLCD_DELAY 0xFFFF
//#define TFTLCD_DELAY8 0x7F
static void init_table(const uint8_t *table, int16_t size) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
    //copes with any uint8_t table.  Even HX8347 style
    uint8_t p=0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
    while (size > 0) {
 80019fc:	e072      	b.n	8001ae4 <init_table+0xf8>
        uint8_t cmd = table[p++];
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	73fa      	strb	r2, [r7, #15]
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	733b      	strb	r3, [r7, #12]
        uint8_t len = table[p++];
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	73fa      	strb	r2, [r7, #15]
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	73bb      	strb	r3, [r7, #14]
        if (cmd == TFTLCD_DELAY8) {
 8001a1e:	7b3b      	ldrb	r3, [r7, #12]
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d106      	bne.n	8001a32 <init_table+0x46>
            HAL_Delay(len);
 8001a24:	7bbb      	ldrb	r3, [r7, #14]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 faee 	bl	8004008 <HAL_Delay>
            len = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73bb      	strb	r3, [r7, #14]
 8001a30:	e050      	b.n	8001ad4 <init_table+0xe8>
        } else {
            CS_LOW;
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <init_table+0x10c>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <init_table+0x10c>)
 8001a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a3c:	6153      	str	r3, [r2, #20]
            CD_COMMAND;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <init_table+0x10c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a2d      	ldr	r2, [pc, #180]	; (8001af8 <init_table+0x10c>)
 8001a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a48:	6153      	str	r3, [r2, #20]
            write8(cmd);
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <init_table+0x110>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001a52:	7b3b      	ldrb	r3, [r7, #12]
 8001a54:	4929      	ldr	r1, [pc, #164]	; (8001afc <init_table+0x110>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	614b      	str	r3, [r1, #20]
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <init_table+0x10c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <init_table+0x10c>)
 8001a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <init_table+0x10c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <init_table+0x10c>)
 8001a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a70:	6153      	str	r3, [r2, #20]
            for (uint8_t d = 0; d++ < len; ) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	737b      	strb	r3, [r7, #13]
 8001a76:	e021      	b.n	8001abc <init_table+0xd0>
                uint8_t x = table[p++];
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	73fa      	strb	r2, [r7, #15]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	72fb      	strb	r3, [r7, #11]
                CD_DATA;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <init_table+0x10c>)
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <init_table+0x10c>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6153      	str	r3, [r2, #20]
                write8(x);
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <init_table+0x110>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	4917      	ldr	r1, [pc, #92]	; (8001afc <init_table+0x110>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	614b      	str	r3, [r1, #20]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <init_table+0x10c>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <init_table+0x10c>)
 8001aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aae:	6153      	str	r3, [r2, #20]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <init_table+0x10c>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <init_table+0x10c>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6153      	str	r3, [r2, #20]
            for (uint8_t d = 0; d++ < len; ) {
 8001abc:	7b7b      	ldrb	r3, [r7, #13]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	737a      	strb	r2, [r7, #13]
 8001ac2:	7bba      	ldrb	r2, [r7, #14]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8d7      	bhi.n	8001a78 <init_table+0x8c>
                    CD_COMMAND;
                    cmd++;
                    write8(cmd);
                }*/
            }
            CS_HIGH;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <init_table+0x10c>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <init_table+0x10c>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6153      	str	r3, [r2, #20]
        }
        size -= len + 2;
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b02      	subs	r3, #2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	dc88      	bgt.n	80019fe <init_table+0x12>
    }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400

08001b00 <initDisplay>:
	        *p16 = 400;

	        _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
}
#else
void initDisplay() {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
	int16_t *p16;
	reset();
 8001b06:	f7ff ff2f 	bl	8001968 <reset>

	const uint8_t *table8_ads = NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
	int16_t table_size;
	//_lcd_xor=0;
	_lcd_capable = (1<<1) | (1<<0) | (1<<10);
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <initDisplay+0x60>)
 8001b10:	f240 4203 	movw	r2, #1027	; 0x403
 8001b14:	801a      	strh	r2, [r3, #0]
			//            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
			0xCA, 1, 0x00,      //DGC LUT ???
			0xEA, 1, 0x80,      //3-Gamma Function Enable
			//                     0xB0, 1, 0x03,      //Enable Protect
	};
	table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <initDisplay+0x64>)
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	231e      	movs	r3, #30
 8001b1c:	817b      	strh	r3, [r7, #10]
	p16 = (int16_t *) & HEIGHT;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <initDisplay+0x68>)
 8001b20:	607b      	str	r3, [r7, #4]
	*p16 = 400;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b28:	801a      	strh	r2, [r3, #0]
	p16 = (int16_t *) & WIDTH;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <initDisplay+0x6c>)
 8001b2c:	607b      	str	r3, [r7, #4]
	*p16 = 240;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	22f0      	movs	r2, #240	; 0xf0
 8001b32:	801a      	strh	r2, [r3, #0]

    if (table8_ads != NULL) {
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <initDisplay+0x56>
        static const uint8_t wake_on[] = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(reset_off, sizeof(reset_off));
 8001b3a:	2109      	movs	r1, #9
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <initDisplay+0x70>)
 8001b3e:	f7ff ff55 	bl	80019ec <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001b42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b46:	4619      	mov	r1, r3
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff ff4f 	bl	80019ec <init_table>
		init_table(wake_on, sizeof(wake_on));
 8001b4e:	2106      	movs	r1, #6
 8001b50:	4808      	ldr	r0, [pc, #32]	; (8001b74 <initDisplay+0x74>)
 8001b52:	f7ff ff4b 	bl	80019ec <init_table>
    }
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200000fc 	.word	0x200000fc
 8001b64:	08022f5c 	.word	0x08022f5c
 8001b68:	20000010 	.word	0x20000010
 8001b6c:	20000012 	.word	0x20000012
 8001b70:	08022f7c 	.word	0x08022f7c
 8001b74:	08022f88 	.word	0x08022f88

08001b78 <setRotation>:
#endif

void setRotation(uint8_t r) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
	uint16_t GS, SS, ORG; //, REV = _lcd_rev;
	uint8_t val; // , d[3];
	rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b7d      	ldr	r3, [pc, #500]	; (8001d80 <setRotation+0x208>)
 8001b8c:	701a      	strb	r2, [r3, #0]
	//_width = (rotation & 1) ? HEIGHT : WIDTH;
	//_height = (rotation & 1) ? WIDTH : HEIGHT;
	switch (rotation) {
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <setRotation+0x208>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d816      	bhi.n	8001bc4 <setRotation+0x4c>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <setRotation+0x24>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bb3 	.word	0x08001bb3
 8001ba4:	08001bb9 	.word	0x08001bb9
 8001ba8:	08001bbf 	.word	0x08001bbf
	case 0:                    //PORTRAIT:
		val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8001bac:	2348      	movs	r3, #72	; 0x48
 8001bae:	72fb      	strb	r3, [r7, #11]
		break;
 8001bb0:	e008      	b.n	8001bc4 <setRotation+0x4c>
	case 1:                    //LANDSCAPE: 90 degrees
		val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8001bb2:	2328      	movs	r3, #40	; 0x28
 8001bb4:	72fb      	strb	r3, [r7, #11]
		break;
 8001bb6:	e005      	b.n	8001bc4 <setRotation+0x4c>
	case 2:                    //PORTRAIT_REV: 180 degrees
		val = 0x88;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8001bb8:	2388      	movs	r3, #136	; 0x88
 8001bba:	72fb      	strb	r3, [r7, #11]
		break;
 8001bbc:	e002      	b.n	8001bc4 <setRotation+0x4c>
	case 3:                    //LANDSCAPE_REV: 270 degrees
		val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8001bbe:	23f8      	movs	r3, #248	; 0xf8
 8001bc0:	72fb      	strb	r3, [r7, #11]
		break;
 8001bc2:	bf00      	nop
	}
	if (_lcd_capable & INVERT_GS)
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <setRotation+0x20c>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <setRotation+0x64>
		val ^= 0x80;
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_SS)
 8001bdc:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <setRotation+0x20c>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <setRotation+0x7a>
		val ^= 0x40;
 8001be8:	7afb      	ldrb	r3, [r7, #11]
 8001bea:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_RGB)
 8001bf2:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <setRotation+0x20c>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <setRotation+0x90>
		val ^= 0x08;
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	f083 0308 	eor.w	r3, r3, #8
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & MIPI_DCS_REV1) {
 8001c08:	4b5e      	ldr	r3, [pc, #376]	; (8001d84 <setRotation+0x20c>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01c      	beq.n	8001c4e <setRotation+0xd6>
		//common_MC:
		_MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8001c14:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <setRotation+0x210>)
 8001c16:	222a      	movs	r2, #42	; 0x2a
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <setRotation+0x214>)
 8001c1c:	222b      	movs	r2, #43	; 0x2b
 8001c1e:	801a      	strh	r2, [r3, #0]
 8001c20:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <setRotation+0x218>)
 8001c22:	222c      	movs	r2, #44	; 0x2c
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <setRotation+0x21c>)
 8001c28:	222a      	movs	r2, #42	; 0x2a
 8001c2a:	801a      	strh	r2, [r3, #0]
 8001c2c:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <setRotation+0x220>)
 8001c2e:	222a      	movs	r2, #42	; 0x2a
 8001c30:	801a      	strh	r2, [r3, #0]
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <setRotation+0x224>)
 8001c34:	222b      	movs	r2, #43	; 0x2b
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <setRotation+0x228>)
 8001c3a:	222b      	movs	r2, #43	; 0x2b
 8001c3c:	801a      	strh	r2, [r3, #0]
		//common_BGR:
		WriteCmdParamN(0x36, 1, &val);
 8001c3e:	f107 030b 	add.w	r3, r7, #11
 8001c42:	461a      	mov	r2, r3
 8001c44:	2101      	movs	r1, #1
 8001c46:	2036      	movs	r0, #54	; 0x36
 8001c48:	f7ff f83e 	bl	8000cc8 <WriteCmdParamN>
 8001c4c:	e06a      	b.n	8001d24 <setRotation+0x1ac>
		//_lcd_madctl = val;
	}
	// cope with 9320 variants
	else {
		_MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <setRotation+0x210>)
 8001c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c54:	801a      	strh	r2, [r3, #0]
 8001c56:	4b4d      	ldr	r3, [pc, #308]	; (8001d8c <setRotation+0x214>)
 8001c58:	f240 2201 	movw	r2, #513	; 0x201
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <setRotation+0x218>)
 8001c60:	f240 2202 	movw	r2, #514	; 0x202
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <setRotation+0x21c>)
 8001c68:	f44f 7204 	mov.w	r2, #528	; 0x210
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <setRotation+0x220>)
 8001c70:	f240 2211 	movw	r2, #529	; 0x211
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <setRotation+0x224>)
 8001c78:	f240 2212 	movw	r2, #530	; 0x212
 8001c7c:	801a      	strh	r2, [r3, #0]
 8001c7e:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <setRotation+0x228>)
 8001c80:	f240 2213 	movw	r2, #531	; 0x213
 8001c84:	801a      	strh	r2, [r3, #0]
		GS = (val & 0x80) ? (1 << 15) : 0;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c94:	827b      	strh	r3, [r7, #18]
		uint16_t NL;
		NL = ((HEIGHT / 8) - 1) << 9;
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <setRotation+0x22c>)
 8001c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da00      	bge.n	8001ca2 <setRotation+0x12a>
 8001ca0:	3307      	adds	r3, #7
 8001ca2:	10db      	asrs	r3, r3, #3
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	823b      	strh	r3, [r7, #16]
		//  WriteCmdData(0x400, GS | NL);
		uint16_t scan;
		if (GS == 0) scan = 0;
 8001cb0:	8a7b      	ldrh	r3, [r7, #18]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <setRotation+0x144>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	82bb      	strh	r3, [r7, #20]
 8001cba:	e001      	b.n	8001cc0 <setRotation+0x148>
		else scan = 0x04;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	82bb      	strh	r3, [r7, #20]
		WriteCmdData(0x400, GS | NL | scan);
 8001cc0:	8a7a      	ldrh	r2, [r7, #18]
 8001cc2:	8a3b      	ldrh	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	8abb      	ldrh	r3, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cd4:	f7ff f870 	bl	8000db8 <WriteCmdData>

		SS = (val & 0x40) ? (1 << 8) : 0;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	81fb      	strh	r3, [r7, #14]
		//SS = (val&0x05)<<8;
		WriteCmdData(0x01, SS);     // set Driver Output Control
 8001ce4:	89fb      	ldrh	r3, [r7, #14]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff f865 	bl	8000db8 <WriteCmdData>
		//common_ORG:
		ORG = (val & 0x20) ? (1 << 3) : 0;
 8001cee:	7afb      	ldrb	r3, [r7, #11]
 8001cf0:	109b      	asrs	r3, r3, #2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	82fb      	strh	r3, [r7, #22]
		if (val & 0x08)
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <setRotation+0x194>
			ORG |= 0x1000;  //BGR
 8001d04:	8afb      	ldrh	r3, [r7, #22]
 8001d06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d0a:	82fb      	strh	r3, [r7, #22]
		_lcd_madctl = ORG | 0x0030;
 8001d0c:	8afb      	ldrh	r3, [r7, #22]
 8001d0e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <setRotation+0x230>)
 8001d16:	801a      	strh	r2, [r3, #0]
		WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <setRotation+0x230>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f7ff f84a 	bl	8000db8 <WriteCmdData>
	}
	if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <setRotation+0x208>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <setRotation+0x200>
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <setRotation+0x20c>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11d      	bne.n	8001d78 <setRotation+0x200>
		uint16_t x;
		x = _MC, _MC = _MP, _MP = x;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <setRotation+0x210>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	81bb      	strh	r3, [r7, #12]
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <setRotation+0x214>)
 8001d44:	881a      	ldrh	r2, [r3, #0]
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <setRotation+0x210>)
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <setRotation+0x214>)
 8001d4c:	89bb      	ldrh	r3, [r7, #12]
 8001d4e:	8013      	strh	r3, [r2, #0]
		x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <setRotation+0x21c>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	81bb      	strh	r3, [r7, #12]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <setRotation+0x224>)
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <setRotation+0x21c>)
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <setRotation+0x224>)
 8001d60:	89bb      	ldrh	r3, [r7, #12]
 8001d62:	8013      	strh	r3, [r2, #0]
		x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <setRotation+0x220>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	81bb      	strh	r3, [r7, #12]
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <setRotation+0x228>)
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <setRotation+0x220>)
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <setRotation+0x228>)
 8001d74:	89bb      	ldrh	r3, [r7, #12]
 8001d76:	8013      	strh	r3, [r2, #0]
	}

}
 8001d78:	bf00      	nop
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200000fe 	.word	0x200000fe
 8001d84:	200000fc 	.word	0x200000fc
 8001d88:	2000000e 	.word	0x2000000e
 8001d8c:	2000000c 	.word	0x2000000c
 8001d90:	2000000a 	.word	0x2000000a
 8001d94:	20000002 	.word	0x20000002
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	20000006 	.word	0x20000006
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000010 	.word	0x20000010
 8001da8:	20000100 	.word	0x20000100

08001dac <drawDefChar>:
uint16_t litera_o = 1; // przerwa między literami
uint16_t txt_color = WHITE; // kolor tekstu
uint16_t txt_bg = BLACK; // kolor tła
uint16_t txt_margin_x = 0; // lewy margines tekstu

void drawDefChar(uint16_t x, uint16_t y, unsigned char c, uint16_t color, uint16_t bg) {
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4604      	mov	r4, r0
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	80fb      	strh	r3, [r7, #6]
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	803b      	strh	r3, [r7, #0]
	// 1750 znaków w 110ms
	uint16_t j, i;
	setAddrWindow(x, y, x + 4, y + 7);
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	88bb      	ldrh	r3, [r7, #4]
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	88b9      	ldrh	r1, [r7, #4]
 8001dd8:	88f8      	ldrh	r0, [r7, #6]
 8001dda:	f7ff f869 	bl	8000eb0 <setAddrWindow>
	CS_LOW;
 8001dde:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <drawDefChar+0x18c>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <drawDefChar+0x18c>)
 8001de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de8:	6153      	str	r3, [r2, #20]
	WriteCmd(_MW);
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <drawDefChar+0x18c>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <drawDefChar+0x18c>)
 8001df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <drawDefChar+0x190>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001dfe:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <drawDefChar+0x194>)
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	0a12      	lsrs	r2, r2, #8
 8001e04:	b292      	uxth	r2, r2
 8001e06:	4611      	mov	r1, r2
 8001e08:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <drawDefChar+0x190>)
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	6153      	str	r3, [r2, #20]
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <drawDefChar+0x18c>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <drawDefChar+0x18c>)
 8001e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e18:	6153      	str	r3, [r2, #20]
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <drawDefChar+0x18c>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	4a46      	ldr	r2, [pc, #280]	; (8001f38 <drawDefChar+0x18c>)
 8001e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e24:	6153      	str	r3, [r2, #20]
 8001e26:	4b45      	ldr	r3, [pc, #276]	; (8001f3c <drawDefChar+0x190>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <drawDefChar+0x194>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4941      	ldr	r1, [pc, #260]	; (8001f3c <drawDefChar+0x190>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	614b      	str	r3, [r1, #20]
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <drawDefChar+0x18c>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <drawDefChar+0x18c>)
 8001e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e44:	6153      	str	r3, [r2, #20]
 8001e46:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <drawDefChar+0x18c>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <drawDefChar+0x18c>)
 8001e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e50:	6153      	str	r3, [r2, #20]
	CD_DATA;
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <drawDefChar+0x18c>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4a38      	ldr	r2, [pc, #224]	; (8001f38 <drawDefChar+0x18c>)
 8001e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5c:	6153      	str	r3, [r2, #20]
	for(i=0; i<8; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	81bb      	strh	r3, [r7, #12]
 8001e62:	e05b      	b.n	8001f1c <drawDefChar+0x170>
		for(j=0; j<5; j++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	81fb      	strh	r3, [r7, #14]
 8001e68:	e052      	b.n	8001f10 <drawDefChar+0x164>
			write16( (default_font[c*5+j] & (1<<i)) ? color : bg);
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <drawDefChar+0x190>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <drawDefChar+0x198>)
 8001e80:	5cd3      	ldrb	r3, [r2, r3]
 8001e82:	461a      	mov	r2, r3
 8001e84:	89bb      	ldrh	r3, [r7, #12]
 8001e86:	fa42 f303 	asr.w	r3, r2, r3
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <drawDefChar+0xec>
 8001e92:	883b      	ldrh	r3, [r7, #0]
 8001e94:	121b      	asrs	r3, r3, #8
 8001e96:	e001      	b.n	8001e9c <drawDefChar+0xf0>
 8001e98:	8c3b      	ldrh	r3, [r7, #32]
 8001e9a:	121b      	asrs	r3, r3, #8
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <drawDefChar+0x190>)
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	6153      	str	r3, [r2, #20]
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <drawDefChar+0x18c>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <drawDefChar+0x18c>)
 8001ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eac:	6153      	str	r3, [r2, #20]
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <drawDefChar+0x18c>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <drawDefChar+0x18c>)
 8001eb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb8:	6153      	str	r3, [r2, #20]
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <drawDefChar+0x190>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	441a      	add	r2, r3
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <drawDefChar+0x198>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	89bb      	ldrh	r3, [r7, #12]
 8001ed6:	fa42 f303 	asr.w	r3, r2, r3
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <drawDefChar+0x13c>
 8001ee2:	883b      	ldrh	r3, [r7, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e001      	b.n	8001eec <drawDefChar+0x140>
 8001ee8:	8c3b      	ldrh	r3, [r7, #32]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <drawDefChar+0x190>)
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6153      	str	r3, [r2, #20]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <drawDefChar+0x18c>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <drawDefChar+0x18c>)
 8001ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001efc:	6153      	str	r3, [r2, #20]
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <drawDefChar+0x18c>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <drawDefChar+0x18c>)
 8001f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f08:	6153      	str	r3, [r2, #20]
		for(j=0; j<5; j++) {
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	81fb      	strh	r3, [r7, #14]
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d9a9      	bls.n	8001e6a <drawDefChar+0xbe>
	for(i=0; i<8; i++) {
 8001f16:	89bb      	ldrh	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	81bb      	strh	r3, [r7, #12]
 8001f1c:	89bb      	ldrh	r3, [r7, #12]
 8001f1e:	2b07      	cmp	r3, #7
 8001f20:	d9a0      	bls.n	8001e64 <drawDefChar+0xb8>
		}
	}
	CS_HIGH;
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <drawDefChar+0x18c>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <drawDefChar+0x18c>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6153      	str	r3, [r2, #20]
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	2000000a 	.word	0x2000000a
 8001f44:	0800662c 	.word	0x0800662c

08001f48 <writeChar>:

void writeChar(unsigned char c) {
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	drawDefChar(cur_x, cur_y, c, txt_color, txt_bg);
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <writeChar+0xa4>)
 8001f54:	8818      	ldrh	r0, [r3, #0]
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <writeChar+0xa8>)
 8001f58:	8819      	ldrh	r1, [r3, #0]
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <writeChar+0xac>)
 8001f5c:	881c      	ldrh	r4, [r3, #0]
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <writeChar+0xb0>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	79fa      	ldrb	r2, [r7, #7]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	4623      	mov	r3, r4
 8001f68:	f7ff ff20 	bl	8001dac <drawDefChar>
	if(400-cur_x >= 2*(litera_w+litera_o)) cur_x += litera_w + litera_o;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <writeChar+0xa4>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <writeChar+0xb4>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <writeChar+0xb8>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	440b      	add	r3, r1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	429a      	cmp	r2, r3
 8001f84:	db0c      	blt.n	8001fa0 <writeChar+0x58>
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <writeChar+0xb4>)
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <writeChar+0xb8>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <writeChar+0xa4>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <writeChar+0xa4>)
 8001f9c:	801a      	strh	r2, [r3, #0]
	else {
		cur_x = txt_margin_x;
		if(240-cur_y >= 2*(litera_h+litera_o)) cur_y += litera_h + litera_o;
		else cur_y = 0;
	}
}
 8001f9e:	e020      	b.n	8001fe2 <writeChar+0x9a>
		cur_x = txt_margin_x;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <writeChar+0xbc>)
 8001fa2:	881a      	ldrh	r2, [r3, #0]
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <writeChar+0xa4>)
 8001fa6:	801a      	strh	r2, [r3, #0]
		if(240-cur_y >= 2*(litera_h+litera_o)) cur_y += litera_h + litera_o;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <writeChar+0xa8>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	f1c3 02f0 	rsb	r2, r3, #240	; 0xf0
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <writeChar+0xc0>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <writeChar+0xb8>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	440b      	add	r3, r1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	db0c      	blt.n	8001fdc <writeChar+0x94>
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <writeChar+0xc0>)
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <writeChar+0xb8>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <writeChar+0xa8>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <writeChar+0xa8>)
 8001fd8:	801a      	strh	r2, [r3, #0]
}
 8001fda:	e002      	b.n	8001fe2 <writeChar+0x9a>
		else cur_y = 0;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <writeChar+0xa8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000102 	.word	0x20000102
 8001ff0:	20000104 	.word	0x20000104
 8001ff4:	2000001a 	.word	0x2000001a
 8001ff8:	20000106 	.word	0x20000106
 8001ffc:	20000014 	.word	0x20000014
 8002000:	20000018 	.word	0x20000018
 8002004:	20000108 	.word	0x20000108
 8002008:	20000016 	.word	0x20000016

0800200c <naivePrint>:

void naivePrint(char textin[]) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	uint16_t textlen = strlen(textin);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7fe f8e3 	bl	80001e0 <strlen>
 800201a:	4603      	mov	r3, r0
 800201c:	81bb      	strh	r3, [r7, #12]
	for(uint16_t i=0; i<textlen; i++) {
 800201e:	2300      	movs	r3, #0
 8002020:	81fb      	strh	r3, [r7, #14]
 8002022:	e031      	b.n	8002088 <naivePrint+0x7c>
		if(textin[i] == '\n') {
 8002024:	89fb      	ldrh	r3, [r7, #14]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b0a      	cmp	r3, #10
 800202e:	d121      	bne.n	8002074 <naivePrint+0x68>
			cur_x = txt_margin_x;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <naivePrint+0x90>)
 8002032:	881a      	ldrh	r2, [r3, #0]
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <naivePrint+0x94>)
 8002036:	801a      	strh	r2, [r3, #0]
			if(240-cur_y >= 2*(litera_h+litera_o)) cur_y += litera_h + litera_o;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <naivePrint+0x98>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f1c3 02f0 	rsb	r2, r3, #240	; 0xf0
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <naivePrint+0x9c>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <naivePrint+0xa0>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	440b      	add	r3, r1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	429a      	cmp	r2, r3
 8002050:	db0c      	blt.n	800206c <naivePrint+0x60>
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <naivePrint+0x9c>)
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <naivePrint+0xa0>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <naivePrint+0x98>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <naivePrint+0x98>)
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	e00a      	b.n	8002082 <naivePrint+0x76>
			else cur_y = 0;
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <naivePrint+0x98>)
 800206e:	2200      	movs	r2, #0
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e006      	b.n	8002082 <naivePrint+0x76>
		}
		else writeChar(textin[i]);
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff63 	bl	8001f48 <writeChar>
	for(uint16_t i=0; i<textlen; i++) {
 8002082:	89fb      	ldrh	r3, [r7, #14]
 8002084:	3301      	adds	r3, #1
 8002086:	81fb      	strh	r3, [r7, #14]
 8002088:	89fa      	ldrh	r2, [r7, #14]
 800208a:	89bb      	ldrh	r3, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3c9      	bcc.n	8002024 <naivePrint+0x18>
	}
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000108 	.word	0x20000108
 80020a0:	20000102 	.word	0x20000102
 80020a4:	20000104 	.word	0x20000104
 80020a8:	20000016 	.word	0x20000016
 80020ac:	20000018 	.word	0x20000018

080020b0 <setFont>:
  uint8_t yAdvance; ///< Newline distance (y axis)
} GFXfont;

GFXfont *gfxFont = NULL;

void setFont(const GFXfont *f) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	gfxFont = (GFXfont *)f;
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <setFont+0x1c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000010c 	.word	0x2000010c

080020d0 <writeCusChar>:
		}
	}
	CS_HIGH; // zakończ transmisję
}

void writeCusChar(unsigned char cin) {
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	unsigned char c = cin - gfxFont->first;
 80020da:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <writeCusChar+0x224>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	891b      	ldrh	r3, [r3, #8]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	763b      	strb	r3, [r7, #24]
	GFXglyph *glyph = gfxFont->glyph + c;
 80020e8:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <writeCusChar+0x224>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	7e3b      	ldrb	r3, [r7, #24]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
	uint8_t *bitmap = gfxFont->bitmap;
 80020f6:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <writeCusChar+0x224>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	613b      	str	r3, [r7, #16]
	uint8_t w = glyph->width;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	789b      	ldrb	r3, [r3, #2]
 8002102:	73fb      	strb	r3, [r7, #15]
	uint8_t h = glyph->height;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	78db      	ldrb	r3, [r3, #3]
 8002108:	73bb      	strb	r3, [r7, #14]
	uint16_t bo = glyph->bitmapOffset;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	83fb      	strh	r3, [r7, #30]
	int8_t xo = glyph->xOffset;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	795b      	ldrb	r3, [r3, #5]
 8002114:	737b      	strb	r3, [r7, #13]
	int8_t yo = glyph->yOffset;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	799b      	ldrb	r3, [r3, #6]
 800211a:	733b      	strb	r3, [r7, #12]
	uint8_t xa = glyph->xAdvance;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	72fb      	strb	r3, [r7, #11]
	uint8_t ya = gfxFont->yAdvance;
 8002122:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <writeCusChar+0x224>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	7b1b      	ldrb	r3, [r3, #12]
 8002128:	72bb      	strb	r3, [r7, #10]

	uint16_t i, bj=0;
 800212a:	2300      	movs	r3, #0
 800212c:	837b      	strh	r3, [r7, #26]
	uint8_t bajt = bitmap[bo]; // odczytaj pierwszy bajt bitmapy
 800212e:	8bfb      	ldrh	r3, [r7, #30]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	767b      	strb	r3, [r7, #25]
	uint16_t pixn = w*h; // liczba pikseli bitmapy
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	b29a      	uxth	r2, r3
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	b29b      	uxth	r3, r3
 8002140:	fb12 f303 	smulbb	r3, r2, r3
 8002144:	813b      	strh	r3, [r7, #8]

	if(cin == '\n') {
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b0a      	cmp	r3, #10
 800214a:	d115      	bne.n	8002178 <writeCusChar+0xa8>
		cur_x = txt_margin_x;
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <writeCusChar+0x228>)
 800214e:	881a      	ldrh	r2, [r3, #0]
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <writeCusChar+0x22c>)
 8002152:	801a      	strh	r2, [r3, #0]
		cur_y += ya;
 8002154:	7abb      	ldrb	r3, [r7, #10]
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <writeCusChar+0x230>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	4413      	add	r3, r2
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b67      	ldr	r3, [pc, #412]	; (8002300 <writeCusChar+0x230>)
 8002162:	801a      	strh	r2, [r3, #0]
		if(cur_y > 239) cur_y = ya;
 8002164:	4b66      	ldr	r3, [pc, #408]	; (8002300 <writeCusChar+0x230>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	2bef      	cmp	r3, #239	; 0xef
 800216a:	f240 8126 	bls.w	80023ba <writeCusChar+0x2ea>
 800216e:	7abb      	ldrb	r3, [r7, #10]
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <writeCusChar+0x230>)
 8002174:	801a      	strh	r2, [r3, #0]
		return;
 8002176:	e120      	b.n	80023ba <writeCusChar+0x2ea>
	}

	if(cur_x+xa > 399) {
 8002178:	4b60      	ldr	r3, [pc, #384]	; (80022fc <writeCusChar+0x22c>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	4413      	add	r3, r2
 8002182:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002186:	db13      	blt.n	80021b0 <writeCusChar+0xe0>
		cur_x = txt_margin_x;
 8002188:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <writeCusChar+0x228>)
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	4b5b      	ldr	r3, [pc, #364]	; (80022fc <writeCusChar+0x22c>)
 800218e:	801a      	strh	r2, [r3, #0]
		cur_y += ya;
 8002190:	7abb      	ldrb	r3, [r7, #10]
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <writeCusChar+0x230>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	4413      	add	r3, r2
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <writeCusChar+0x230>)
 800219e:	801a      	strh	r2, [r3, #0]
		if(cur_y > 239) cur_y = ya;
 80021a0:	4b57      	ldr	r3, [pc, #348]	; (8002300 <writeCusChar+0x230>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	2bef      	cmp	r3, #239	; 0xef
 80021a6:	d903      	bls.n	80021b0 <writeCusChar+0xe0>
 80021a8:	7abb      	ldrb	r3, [r7, #10]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	4b54      	ldr	r3, [pc, #336]	; (8002300 <writeCusChar+0x230>)
 80021ae:	801a      	strh	r2, [r3, #0]
	}

	setAddrWindow(cur_x+xo, cur_y+yo, cur_x+xo + w-1, cur_y+yo + h -1); // przekaż wyświetlaczowi okno bitmapy
 80021b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b51      	ldr	r3, [pc, #324]	; (80022fc <writeCusChar+0x22c>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	b298      	uxth	r0, r3
 80021be:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <writeCusChar+0x230>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	b299      	uxth	r1, r3
 80021cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <writeCusChar+0x22c>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	b29a      	uxth	r2, r3
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4413      	add	r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29c      	uxth	r4, r3
 80021e6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b44      	ldr	r3, [pc, #272]	; (8002300 <writeCusChar+0x230>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	7bbb      	ldrb	r3, [r7, #14]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4622      	mov	r2, r4
 8002202:	f7fe fe55 	bl	8000eb0 <setAddrWindow>
	CS_LOW;
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <writeCusChar+0x234>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <writeCusChar+0x234>)
 800220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002210:	6153      	str	r3, [r2, #20]
	WriteCmd(_MW);
 8002212:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <writeCusChar+0x234>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <writeCusChar+0x234>)
 8002218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800221c:	6153      	str	r3, [r2, #20]
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <writeCusChar+0x238>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002226:	4a39      	ldr	r2, [pc, #228]	; (800230c <writeCusChar+0x23c>)
 8002228:	8812      	ldrh	r2, [r2, #0]
 800222a:	0a12      	lsrs	r2, r2, #8
 800222c:	b292      	uxth	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <writeCusChar+0x238>)
 8002232:	430b      	orrs	r3, r1
 8002234:	6153      	str	r3, [r2, #20]
 8002236:	4b33      	ldr	r3, [pc, #204]	; (8002304 <writeCusChar+0x234>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	4a32      	ldr	r2, [pc, #200]	; (8002304 <writeCusChar+0x234>)
 800223c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002240:	6153      	str	r3, [r2, #20]
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <writeCusChar+0x234>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <writeCusChar+0x234>)
 8002248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224c:	6153      	str	r3, [r2, #20]
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <writeCusChar+0x238>)
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <writeCusChar+0x23c>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	492a      	ldr	r1, [pc, #168]	; (8002308 <writeCusChar+0x238>)
 800225e:	4313      	orrs	r3, r2
 8002260:	614b      	str	r3, [r1, #20]
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <writeCusChar+0x234>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a27      	ldr	r2, [pc, #156]	; (8002304 <writeCusChar+0x234>)
 8002268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226c:	6153      	str	r3, [r2, #20]
 800226e:	4b25      	ldr	r3, [pc, #148]	; (8002304 <writeCusChar+0x234>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4a24      	ldr	r2, [pc, #144]	; (8002304 <writeCusChar+0x234>)
 8002274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002278:	6153      	str	r3, [r2, #20]
	CD_DATA;
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <writeCusChar+0x234>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <writeCusChar+0x234>)
 8002280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002284:	6153      	str	r3, [r2, #20]
	for(i=0; i<pixn; i++) { // każdy piksel bitmapy
 8002286:	2300      	movs	r3, #0
 8002288:	83bb      	strh	r3, [r7, #28]
 800228a:	e06a      	b.n	8002362 <writeCusChar+0x292>
		write16((bajt & (0x80>>bj)) ? txt_color : txt_bg); // wyślij piksel
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <writeCusChar+0x238>)
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002294:	7e79      	ldrb	r1, [r7, #25]
 8002296:	8b7a      	ldrh	r2, [r7, #26]
 8002298:	2080      	movs	r0, #128	; 0x80
 800229a:	fa40 f202 	asr.w	r2, r0, r2
 800229e:	400a      	ands	r2, r1
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	d004      	beq.n	80022ae <writeCusChar+0x1de>
 80022a4:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <writeCusChar+0x240>)
 80022a6:	8812      	ldrh	r2, [r2, #0]
 80022a8:	1212      	asrs	r2, r2, #8
 80022aa:	4611      	mov	r1, r2
 80022ac:	e003      	b.n	80022b6 <writeCusChar+0x1e6>
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <writeCusChar+0x244>)
 80022b0:	8812      	ldrh	r2, [r2, #0]
 80022b2:	1212      	asrs	r2, r2, #8
 80022b4:	4611      	mov	r1, r2
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <writeCusChar+0x238>)
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6153      	str	r3, [r2, #20]
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <writeCusChar+0x234>)
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <writeCusChar+0x234>)
 80022c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022c6:	6153      	str	r3, [r2, #20]
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <writeCusChar+0x234>)
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <writeCusChar+0x234>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d2:	6153      	str	r3, [r2, #20]
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <writeCusChar+0x238>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80022dc:	7e79      	ldrb	r1, [r7, #25]
 80022de:	8b7b      	ldrh	r3, [r7, #26]
 80022e0:	2080      	movs	r0, #128	; 0x80
 80022e2:	fa40 f303 	asr.w	r3, r0, r3
 80022e6:	400b      	ands	r3, r1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <writeCusChar+0x248>
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <writeCusChar+0x240>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e014      	b.n	800231e <writeCusChar+0x24e>
 80022f4:	2000010c 	.word	0x2000010c
 80022f8:	20000108 	.word	0x20000108
 80022fc:	20000102 	.word	0x20000102
 8002300:	20000104 	.word	0x20000104
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	2000000a 	.word	0x2000000a
 8002310:	2000001a 	.word	0x2000001a
 8002314:	20000106 	.word	0x20000106
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <writeCusChar+0x2f4>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	492a      	ldr	r1, [pc, #168]	; (80023c8 <writeCusChar+0x2f8>)
 8002320:	4313      	orrs	r3, r2
 8002322:	614b      	str	r3, [r1, #20]
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <writeCusChar+0x2fc>)
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <writeCusChar+0x2fc>)
 800232a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800232e:	6153      	str	r3, [r2, #20]
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <writeCusChar+0x2fc>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	4a25      	ldr	r2, [pc, #148]	; (80023cc <writeCusChar+0x2fc>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233a:	6153      	str	r3, [r2, #20]
		bj++; // następny piksel bajtu
 800233c:	8b7b      	ldrh	r3, [r7, #26]
 800233e:	3301      	adds	r3, #1
 8002340:	837b      	strh	r3, [r7, #26]
		if(bj > 7) { // jeśli bajt się skończy
 8002342:	8b7b      	ldrh	r3, [r7, #26]
 8002344:	2b07      	cmp	r3, #7
 8002346:	d909      	bls.n	800235c <writeCusChar+0x28c>
			bj=0; // zresetuj odczytywany bit
 8002348:	2300      	movs	r3, #0
 800234a:	837b      	strh	r3, [r7, #26]
			bo++; // przejdź do następnego bajtu
 800234c:	8bfb      	ldrh	r3, [r7, #30]
 800234e:	3301      	adds	r3, #1
 8002350:	83fb      	strh	r3, [r7, #30]
			bajt = bitmap[bo]; // odczytaj następny bajt
 8002352:	8bfb      	ldrh	r3, [r7, #30]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	767b      	strb	r3, [r7, #25]
	for(i=0; i<pixn; i++) { // każdy piksel bitmapy
 800235c:	8bbb      	ldrh	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	83bb      	strh	r3, [r7, #28]
 8002362:	8bba      	ldrh	r2, [r7, #28]
 8002364:	893b      	ldrh	r3, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d390      	bcc.n	800228c <writeCusChar+0x1bc>
		}
	}
	CS_HIGH; // zakończ transmisję
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <writeCusChar+0x2fc>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <writeCusChar+0x2fc>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6153      	str	r3, [r2, #20]


	cur_x += xa;
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <writeCusChar+0x300>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <writeCusChar+0x300>)
 8002384:	801a      	strh	r2, [r3, #0]
	if(cur_x > 399) {
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <writeCusChar+0x300>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800238e:	d315      	bcc.n	80023bc <writeCusChar+0x2ec>
		cur_x = txt_margin_x;
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <writeCusChar+0x304>)
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <writeCusChar+0x300>)
 8002396:	801a      	strh	r2, [r3, #0]
		cur_y += ya;
 8002398:	7abb      	ldrb	r3, [r7, #10]
 800239a:	b29a      	uxth	r2, r3
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <writeCusChar+0x308>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <writeCusChar+0x308>)
 80023a6:	801a      	strh	r2, [r3, #0]
		if(cur_y > 239) cur_y = ya;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <writeCusChar+0x308>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	2bef      	cmp	r3, #239	; 0xef
 80023ae:	d905      	bls.n	80023bc <writeCusChar+0x2ec>
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <writeCusChar+0x308>)
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	e000      	b.n	80023bc <writeCusChar+0x2ec>
		return;
 80023ba:	bf00      	nop
	}
}
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000106 	.word	0x20000106
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020000 	.word	0x40020000
 80023d0:	20000102 	.word	0x20000102
 80023d4:	20000108 	.word	0x20000108
 80023d8:	20000104 	.word	0x20000104

080023dc <naiveCusPrint>:

void naiveCusPrint(const char textin[]) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	uint16_t textlen = strlen(textin);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fd fefb 	bl	80001e0 <strlen>
 80023ea:	4603      	mov	r3, r0
 80023ec:	81bb      	strh	r3, [r7, #12]
	for(uint16_t i=0; i<textlen; i++) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	81fb      	strh	r3, [r7, #14]
 80023f2:	e009      	b.n	8002408 <naiveCusPrint+0x2c>
		writeCusChar(textin[i]);
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fe67 	bl	80020d0 <writeCusChar>
	for(uint16_t i=0; i<textlen; i++) {
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	3301      	adds	r3, #1
 8002406:	81fb      	strh	r3, [r7, #14]
 8002408:	89fa      	ldrh	r2, [r7, #14]
 800240a:	89bb      	ldrh	r3, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d3f1      	bcc.n	80023f4 <naiveCusPrint+0x18>
	}
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <odTyU>:

uint16_t odTyU(uint16_t in) { // zamienia bity uinta na od tyłu
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	80fb      	strh	r3, [r7, #6]
	uint16_t ret = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<16; i++) {
 8002450:	2300      	movs	r3, #0
 8002452:	737b      	strb	r3, [r7, #13]
 8002454:	e019      	b.n	800248a <odTyU+0x48>
		// wytnij i-ty bit, przesuń go na początek i wstaw w (15-i)ty bit wyjścia
		ret |= ((in&(1<<i)) != 0) << (15-i);
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	7b7b      	ldrb	r3, [r7, #13]
 800245a:	fa42 f303 	asr.w	r3, r2, r3
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	7b7b      	ldrb	r3, [r7, #13]
 8002470:	f1c3 030f 	rsb	r3, r3, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	b21a      	sxth	r2, r3
 800247a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800247e:	4313      	orrs	r3, r2
 8002480:	b21b      	sxth	r3, r3
 8002482:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<16; i++) {
 8002484:	7b7b      	ldrb	r3, [r7, #13]
 8002486:	3301      	adds	r3, #1
 8002488:	737b      	strb	r3, [r7, #13]
 800248a:	7b7b      	ldrb	r3, [r7, #13]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d9e2      	bls.n	8002456 <odTyU+0x14>
	}
	return ret;
 8002490:	89fb      	ldrh	r3, [r7, #14]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <getRandomNumber>:

float getRandomNumber() { // generuje losowego floata (0.0 - 1.0)
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
	static uint16_t prevBuf; // poprzednio wygenerowana wartość
	uint16_t buf = 0; // aktualnie generowana wartość
 80024a6:	2300      	movs	r3, #0
 80024a8:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	717b      	strb	r3, [r7, #5]

	for(i=0; i<16; i+=4) { // połowa bitów pochodzi z szumów ADC
 80024ae:	2300      	movs	r3, #0
 80024b0:	717b      	strb	r3, [r7, #5]
 80024b2:	e018      	b.n	80024e6 <getRandomNumber+0x46>
		buf |= (ADC_INS[i>>2] && 0b11) << i; // z każdego ADC'ka po 2 najmłodsze bity
 80024b4:	797b      	ldrb	r3, [r7, #5]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <getRandomNumber+0xb0>)
 80024be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	797b      	ldrb	r3, [r7, #5]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	b21a      	sxth	r2, r3
 80024d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21b      	sxth	r3, r3
 80024de:	80fb      	strh	r3, [r7, #6]
	for(i=0; i<16; i+=4) { // połowa bitów pochodzi z szumów ADC
 80024e0:	797b      	ldrb	r3, [r7, #5]
 80024e2:	3304      	adds	r3, #4
 80024e4:	717b      	strb	r3, [r7, #5]
 80024e6:	797b      	ldrb	r3, [r7, #5]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d9e3      	bls.n	80024b4 <getRandomNumber+0x14>
	}

	uint16_t krwawaMasakra = (~odTyU(prevBuf))*2137; // zamień i odwróć bity poprzedniej liczby i pomnóż przez gupotę
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <getRandomNumber+0xb4>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ffa6 	bl	8002442 <odTyU>
 80024f6:	4603      	mov	r3, r0
 80024f8:	43db      	mvns	r3, r3
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	0152      	lsls	r2, r2, #5
 8002500:	441a      	add	r2, r3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	441a      	add	r2, r3
 8002506:	0052      	lsls	r2, r2, #1
 8002508:	441a      	add	r2, r3
 800250a:	00d2      	lsls	r2, r2, #3
 800250c:	4413      	add	r3, r2
 800250e:	807b      	strh	r3, [r7, #2]
	buf |= krwawaMasakra & 0b1100110011001100; // połowa bitów pochodzi od zrujnowanej wartości poprzedniej
 8002510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002514:	f423 534c 	bic.w	r3, r3, #13056	; 0x3300
 8002518:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 800251c:	b21a      	sxth	r2, r3
 800251e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002522:	4313      	orrs	r3, r2
 8002524:	b21b      	sxth	r3, r3
 8002526:	80fb      	strh	r3, [r7, #6]
	prevBuf = buf; // zapamiętaj bufor na przyszłość
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <getRandomNumber+0xb4>)
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	8013      	strh	r3, [r2, #0]
	return ((float)buf) / 65536.0;
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002538:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002558 <getRandomNumber+0xb8>
 800253c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002540:	eef0 7a66 	vmov.f32	s15, s13
}
 8002544:	eeb0 0a67 	vmov.f32	s0, s15
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200000ec 	.word	0x200000ec
 8002554:	200002be 	.word	0x200002be
 8002558:	47800000 	.word	0x47800000
 800255c:	00000000 	.word	0x00000000

08002560 <generateRura>:
#define audio_zmuszony_NS 35890
#define audio_zmuszony_PITCH 2

#endif

void generateRura(int16_t kom[]) { // generuje losowe dane kolejnej rury
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	float randvals[3]; // wygenerowane losowe liczby
#ifdef RNG
	uint32_t rbuf;
#endif
	for(uint8_t i=0; i<3; i++) {
 8002568:	2300      	movs	r3, #0
 800256a:	77fb      	strb	r3, [r7, #31]
 800256c:	e00d      	b.n	800258a <generateRura+0x2a>
#ifdef RNG
		HAL_RNG_GenerateRandomNumber(&hrng, &rbuf);
		randvals[i] = (float)rbuf / 4294967296.0;
#else
		randvals[i] = getRandomNumber();
 800256e:	7ffc      	ldrb	r4, [r7, #31]
 8002570:	f7ff ff96 	bl	80024a0 <getRandomNumber>
 8002574:	eef0 7a40 	vmov.f32	s15, s0
 8002578:	00a3      	lsls	r3, r4, #2
 800257a:	3320      	adds	r3, #32
 800257c:	443b      	add	r3, r7
 800257e:	3b10      	subs	r3, #16
 8002580:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0; i<3; i++) {
 8002584:	7ffb      	ldrb	r3, [r7, #31]
 8002586:	3301      	adds	r3, #1
 8002588:	77fb      	strb	r3, [r7, #31]
 800258a:	7ffb      	ldrb	r3, [r7, #31]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d9ee      	bls.n	800256e <generateRura+0xe>
	}

	// Przepraszam że stałe nie zdefiniowane ale dużo tego i bez sensu
	// Teraz z losowych wartości obliczamy parametry rur
	int16_t vals[3]; // trzy losowe parametry rur
	vals[0] = (RURA_W<<1) + (FACE_RADIUS<<2) + (50.0*randvals[0]); // położenie X
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe f90a 	bl	80007ac <__aeabi_f2d>
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <generateRura+0x178>)
 800259e:	f7fd fe77 	bl	8000290 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <generateRura+0x17c>)
 80025b0:	f7fd ff9e 	bl	80004f0 <__adddf3>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe f94e 	bl	800085c <__aeabi_d2iz>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	813b      	strh	r3, [r7, #8]
	vals[1] = 30 + (140.0*randvals[1]) - (40.0*randvals[2]); // położenie Y luki
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe f8ef 	bl	80007ac <__aeabi_f2d>
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <generateRura+0x180>)
 80025d4:	f7fd fe5c 	bl	8000290 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <generateRura+0x184>)
 80025e6:	f7fd ff83 	bl	80004f0 <__adddf3>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4614      	mov	r4, r2
 80025f0:	461d      	mov	r5, r3
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe f8d9 	bl	80007ac <__aeabi_f2d>
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <generateRura+0x188>)
 8002600:	f7fd fe46 	bl	8000290 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd ff6e 	bl	80004ec <__aeabi_dsub>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe f920 	bl	800085c <__aeabi_d2iz>
 800261c:	4603      	mov	r3, r0
 800261e:	b21b      	sxth	r3, r3
 8002620:	817b      	strh	r3, [r7, #10]
	vals[2] = (FACE_RADIUS<<1)+45 + (80.0*randvals[2]) - (10.0*randvals[1]); // wysokość luki
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe f8c1 	bl	80007ac <__aeabi_f2d>
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <generateRura+0x18c>)
 8002630:	f7fd fe2e 	bl	8000290 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	a324      	add	r3, pc, #144	; (adr r3, 80026d0 <generateRura+0x170>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd ff55 	bl	80004f0 <__adddf3>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	461d      	mov	r5, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe f8ab 	bl	80007ac <__aeabi_f2d>
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <generateRura+0x190>)
 800265c:	f7fd fe18 	bl	8000290 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd ff40 	bl	80004ec <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe f8f2 	bl	800085c <__aeabi_d2iz>
 8002678:	4603      	mov	r3, r0
 800267a:	b21b      	sxth	r3, r3
 800267c:	81bb      	strh	r3, [r7, #12]

	if(vals[1] < 2) vals[1] = 2; // musi być widać chociaż kontur górnej rury
 800267e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002682:	2b01      	cmp	r3, #1
 8002684:	dc01      	bgt.n	800268a <generateRura+0x12a>
 8002686:	2302      	movs	r3, #2
 8002688:	817b      	strh	r3, [r7, #10]
	if(vals[1]+vals[2] > SCR_HEIGHT-3) vals[2] = SCR_HEIGHT-vals[1]-3; // musi być widać chociaż kontur dolnej rury
 800268a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800268e:	461a      	mov	r2, r3
 8002690:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002694:	4413      	add	r3, r2
 8002696:	2bed      	cmp	r3, #237	; 0xed
 8002698:	dd07      	ble.n	80026aa <generateRura+0x14a>
 800269a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f1c3 03ed 	rsb	r3, r3, #237	; 0xed
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	81bb      	strh	r3, [r7, #12]

	kom[0]=vals[0]; kom[1] = vals[1]; kom[2] = vals[2]; // zwróć uzyskane dane
 80026aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3302      	adds	r3, #2
 80026b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3304      	adds	r3, #4
 80026c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80026c4:	801a      	strh	r2, [r3, #0]
}
 80026c6:	bf00      	nop
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bdb0      	pop	{r4, r5, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	00000000 	.word	0x00000000
 80026d4:	4055c000 	.word	0x4055c000
 80026d8:	40490000 	.word	0x40490000
 80026dc:	40648000 	.word	0x40648000
 80026e0:	40618000 	.word	0x40618000
 80026e4:	403e0000 	.word	0x403e0000
 80026e8:	40440000 	.word	0x40440000
 80026ec:	40540000 	.word	0x40540000
 80026f0:	40240000 	.word	0x40240000

080026f4 <startoweRury>:

void startoweRury() { // generuje startową tablicę rur przy uruchamianiu gry
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
	ruraCrossed[0] = 0; // ustaw pierwszą rurę na nieprzekroczoną
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <startoweRury+0xa4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
	generateRura(rury[0]); // pierwsza rura normalnie
 8002700:	4826      	ldr	r0, [pc, #152]	; (800279c <startoweRury+0xa8>)
 8002702:	f7ff ff2d 	bl	8002560 <generateRura>
	rury[0][0] += SCR_WIDTH; // Wyrzuć rurę poza kadr
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <startoweRury+0xa8>)
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21a      	sxth	r2, r3
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <startoweRury+0xa8>)
 8002718:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=1; i<LICZBA_RUR; i++) { // przeleć przez całą tablicę
 800271a:	2301      	movs	r3, #1
 800271c:	80fb      	strh	r3, [r7, #6]
 800271e:	e033      	b.n	8002788 <startoweRury+0x94>
		generateRura(rury[i]); // wygeneruj nową rurę
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4a1c      	ldr	r2, [pc, #112]	; (800279c <startoweRury+0xa8>)
 800272c:	4413      	add	r3, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff16 	bl	8002560 <generateRura>
		rury[i][0] += rury[i-1][0] + RURA_W; // położoną w prawo od poprzedniej
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	4919      	ldr	r1, [pc, #100]	; (800279c <startoweRury+0xa8>)
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	440b      	add	r3, r1
 8002742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002746:	b299      	uxth	r1, r3
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	1e5a      	subs	r2, r3, #1
 800274c:	4813      	ldr	r0, [pc, #76]	; (800279c <startoweRury+0xa8>)
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4403      	add	r3, r0
 8002758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275c:	b29b      	uxth	r3, r3
 800275e:	440b      	add	r3, r1
 8002760:	b29b      	uxth	r3, r3
 8002762:	3328      	adds	r3, #40	; 0x28
 8002764:	b29b      	uxth	r3, r3
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	b218      	sxth	r0, r3
 800276a:	490c      	ldr	r1, [pc, #48]	; (800279c <startoweRury+0xa8>)
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	440b      	add	r3, r1
 8002776:	4602      	mov	r2, r0
 8002778:	801a      	strh	r2, [r3, #0]
		ruraCrossed[i] = 0; // ustaw rurę na nieprzekroczoną
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4a06      	ldr	r2, [pc, #24]	; (8002798 <startoweRury+0xa4>)
 800277e:	2100      	movs	r1, #0
 8002780:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=1; i<LICZBA_RUR; i++) { // przeleć przez całą tablicę
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	3301      	adds	r3, #1
 8002786:	80fb      	strh	r3, [r7, #6]
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	2b09      	cmp	r3, #9
 800278c:	d9c8      	bls.n	8002720 <startoweRury+0x2c>
	}
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000110 	.word	0x20000110
 800279c:	2000001c 	.word	0x2000001c

080027a0 <safeFillRect>:

void safeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) { // rysuje wypełniony prostokąt, ale posiada zabezpieczenia żeby nic się nie wysypało gdy wpiszemy do funkcji jakieś gupoty
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	4604      	mov	r4, r0
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	80fb      	strh	r3, [r7, #6]
 80027b2:	4603      	mov	r3, r0
 80027b4:	80bb      	strh	r3, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	807b      	strh	r3, [r7, #2]
 80027ba:	4613      	mov	r3, r2
 80027bc:	803b      	strh	r3, [r7, #0]
	if(x>SCR_WIDTH-1) return; // jeśli całość znajduje się poza kadrem, nic nie rób
 80027be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80027c6:	da52      	bge.n	800286e <safeFillRect+0xce>
	if(y>SCR_HEIGHT-1) return;
 80027c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027cc:	2bef      	cmp	r3, #239	; 0xef
 80027ce:	dc50      	bgt.n	8002872 <safeFillRect+0xd2>
	if(x < 0) {
 80027d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da0d      	bge.n	80027f4 <safeFillRect+0x54>
		if(w>-x) w += x;
 80027d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80027dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e0:	425b      	negs	r3, r3
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dd47      	ble.n	8002876 <safeFillRect+0xd6>
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	4413      	add	r3, r2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	807b      	strh	r3, [r7, #2]
		else return;
		x=0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	80fb      	strh	r3, [r7, #6]
	}
	if(y < 0) {
 80027f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da0d      	bge.n	8002818 <safeFillRect+0x78>
		if(h>-y) h += y;
 80027fc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002800:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002804:	425b      	negs	r3, r3
 8002806:	429a      	cmp	r2, r3
 8002808:	dd37      	ble.n	800287a <safeFillRect+0xda>
 800280a:	883a      	ldrh	r2, [r7, #0]
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	b29b      	uxth	r3, r3
 8002812:	803b      	strh	r3, [r7, #0]
		else return;
		y=0;
 8002814:	2300      	movs	r3, #0
 8002816:	80bb      	strh	r3, [r7, #4]
	}
	if(w < 0) return; // jeśli bzdurne wymiary, nic nie rób
 8002818:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db2e      	blt.n	800287e <safeFillRect+0xde>
	if(h < 0) return;
 8002820:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db2c      	blt.n	8002882 <safeFillRect+0xe2>
	if(x+w > SCR_WIDTH) w = SCR_WIDTH-x;
 8002828:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800282c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002830:	4413      	add	r3, r2
 8002832:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002836:	dd04      	ble.n	8002842 <safeFillRect+0xa2>
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800283e:	b29b      	uxth	r3, r3
 8002840:	807b      	strh	r3, [r7, #2]
	if(y+h > SCR_HEIGHT) h = SCR_HEIGHT-y;
 8002842:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002846:	f9b7 3000 	ldrsh.w	r3, [r7]
 800284a:	4413      	add	r3, r2
 800284c:	2bf0      	cmp	r3, #240	; 0xf0
 800284e:	dd04      	ble.n	800285a <safeFillRect+0xba>
 8002850:	88bb      	ldrh	r3, [r7, #4]
 8002852:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002856:	b29b      	uxth	r3, r3
 8002858:	803b      	strh	r3, [r7, #0]

	fillRect(x, y, w, h, color); // narysuj kształt o skorygowanych wymiarach
 800285a:	88f8      	ldrh	r0, [r7, #6]
 800285c:	88b9      	ldrh	r1, [r7, #4]
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	883c      	ldrh	r4, [r7, #0]
 8002862:	8b3b      	ldrh	r3, [r7, #24]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4623      	mov	r3, r4
 8002868:	f7fe fc7a 	bl	8001160 <fillRect>
 800286c:	e00a      	b.n	8002884 <safeFillRect+0xe4>
	if(x>SCR_WIDTH-1) return; // jeśli całość znajduje się poza kadrem, nic nie rób
 800286e:	bf00      	nop
 8002870:	e008      	b.n	8002884 <safeFillRect+0xe4>
	if(y>SCR_HEIGHT-1) return;
 8002872:	bf00      	nop
 8002874:	e006      	b.n	8002884 <safeFillRect+0xe4>
		else return;
 8002876:	bf00      	nop
 8002878:	e004      	b.n	8002884 <safeFillRect+0xe4>
		else return;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <safeFillRect+0xe4>
	if(w < 0) return; // jeśli bzdurne wymiary, nic nie rób
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <safeFillRect+0xe4>
	if(h < 0) return;
 8002882:	bf00      	nop
}
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
	...

0800288c <drawFace>:
	lx = x;
	ly = y;
}
#else

void drawFace(uint16_t x, uint16_t y, uint8_t scared) { // rysuje grafikę mordy (poprzednio nazywała się ryjsuj() )
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
 8002896:	460b      	mov	r3, r1
 8002898:	80bb      	strh	r3, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	70fb      	strb	r3, [r7, #3]
	static uint16_t lx; // poprzednie położenie w poziomie
	static uint16_t ly; // poprzednie położenie w pionie
	static uint8_t lsc; // poprzedni stan lękowy
	if(x==lx && y==ly && scared==lsc) return; // jeśli położenie się nie zmieniło to nic nie rób
 800289e:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <drawFace+0x238>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d10a      	bne.n	80028be <drawFace+0x32>
 80028a8:	4b87      	ldr	r3, [pc, #540]	; (8002ac8 <drawFace+0x23c>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	88ba      	ldrh	r2, [r7, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d105      	bne.n	80028be <drawFace+0x32>
 80028b2:	4b86      	ldr	r3, [pc, #536]	; (8002acc <drawFace+0x240>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f000 8175 	beq.w	8002ba8 <drawFace+0x31c>
	if(y > ly) fillRect(x-(MINIGRA_RYJEC_W>>1), ly-(MINIGRA_RYJEC_H>>1), MINIGRA_RYJEC_W, y-ly+1, GRA_BG);
	else       fillRect(x-(MINIGRA_RYJEC_W>>1),  y+(MINIGRA_RYJEC_H>>1), MINIGRA_RYJEC_W, ly-y+1, GRA_BG);
#else
	uint16_t ystart;
	int16_t trv; // ile pikseli w pionie jeszcze trzeba zamazać
	if(y > ly) { // jeśli zamazać górę
 80028be:	4b82      	ldr	r3, [pc, #520]	; (8002ac8 <drawFace+0x23c>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	88ba      	ldrh	r2, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f240 8094 	bls.w	80029f2 <drawFace+0x166>
		ystart = ly-(MINIGRA_RYJEC_H>>1); // początek zamazywania
 80028ca:	4b7f      	ldr	r3, [pc, #508]	; (8002ac8 <drawFace+0x23c>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	3b15      	subs	r3, #21
 80028d0:	82fb      	strh	r3, [r7, #22]
		trv = y-ly; // jaki dystans trzeba zamazać
 80028d2:	4b7d      	ldr	r3, [pc, #500]	; (8002ac8 <drawFace+0x23c>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	88ba      	ldrh	r2, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	b29b      	uxth	r3, r3
 80028dc:	823b      	strh	r3, [r7, #16]
		uint16_t yend = ystart+trv;
 80028de:	8a3a      	ldrh	r2, [r7, #16]
 80028e0:	8afb      	ldrh	r3, [r7, #22]
 80028e2:	4413      	add	r3, r2
 80028e4:	81bb      	strh	r3, [r7, #12]

		setAddrWindow(x-(MINIGRA_RYJEC_W>>1), ystart, x+(MINIGRA_RYJEC_W>>1), yend); // ustaw zakres pikseli wyświetlacza do którego wyślemy dane
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	3b0f      	subs	r3, #15
 80028ea:	b298      	uxth	r0, r3
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	330f      	adds	r3, #15
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	89bb      	ldrh	r3, [r7, #12]
 80028f4:	8af9      	ldrh	r1, [r7, #22]
 80028f6:	f7fe fadb 	bl	8000eb0 <setAddrWindow>
		CS_LOW;
 80028fa:	4b75      	ldr	r3, [pc, #468]	; (8002ad0 <drawFace+0x244>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4a74      	ldr	r2, [pc, #464]	; (8002ad0 <drawFace+0x244>)
 8002900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002904:	6153      	str	r3, [r2, #20]
		WriteCmd(_MW);
 8002906:	4b72      	ldr	r3, [pc, #456]	; (8002ad0 <drawFace+0x244>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4a71      	ldr	r2, [pc, #452]	; (8002ad0 <drawFace+0x244>)
 800290c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002910:	6153      	str	r3, [r2, #20]
 8002912:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <drawFace+0x248>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <drawFace+0x24c>)
 800291c:	8812      	ldrh	r2, [r2, #0]
 800291e:	0a12      	lsrs	r2, r2, #8
 8002920:	b292      	uxth	r2, r2
 8002922:	4611      	mov	r1, r2
 8002924:	4a6b      	ldr	r2, [pc, #428]	; (8002ad4 <drawFace+0x248>)
 8002926:	430b      	orrs	r3, r1
 8002928:	6153      	str	r3, [r2, #20]
 800292a:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <drawFace+0x244>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4a68      	ldr	r2, [pc, #416]	; (8002ad0 <drawFace+0x244>)
 8002930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002934:	6153      	str	r3, [r2, #20]
 8002936:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <drawFace+0x244>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <drawFace+0x244>)
 800293c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002940:	6153      	str	r3, [r2, #20]
 8002942:	4b64      	ldr	r3, [pc, #400]	; (8002ad4 <drawFace+0x248>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <drawFace+0x24c>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4960      	ldr	r1, [pc, #384]	; (8002ad4 <drawFace+0x248>)
 8002952:	4313      	orrs	r3, r2
 8002954:	614b      	str	r3, [r1, #20]
 8002956:	4b5e      	ldr	r3, [pc, #376]	; (8002ad0 <drawFace+0x244>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	4a5d      	ldr	r2, [pc, #372]	; (8002ad0 <drawFace+0x244>)
 800295c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002960:	6153      	str	r3, [r2, #20]
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <drawFace+0x244>)
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <drawFace+0x244>)
 8002968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296c:	6153      	str	r3, [r2, #20]
		//uint8_t hi = color>>8;
		//uint8_t lo = color&0xFF;
		uint16_t end = MINIGRA_RYJEC_W;
 800296e:	231f      	movs	r3, #31
 8002970:	82bb      	strh	r3, [r7, #20]
		CD_DATA; // poinformuj wyświetlacz że wysyłamy dane
 8002972:	4b57      	ldr	r3, [pc, #348]	; (8002ad0 <drawFace+0x244>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4a56      	ldr	r2, [pc, #344]	; (8002ad0 <drawFace+0x244>)
 8002978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297c:	6153      	str	r3, [r2, #20]
		//write_8(lo);
		while(ystart <= yend) { // wszystkie wiersze zamazanego obszaru
 800297e:	e02d      	b.n	80029dc <drawFace+0x150>
			end = MINIGRA_RYJEC_W; // liczba kolumn to szerokość bitmapy
 8002980:	231f      	movs	r3, #31
 8002982:	82bb      	strh	r3, [r7, #20]
			write_8(tuorows[ystart]); // ustaw wyjście danych na kolor piksela tła
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <drawFace+0x248>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800298c:	8afa      	ldrh	r2, [r7, #22]
 800298e:	4953      	ldr	r1, [pc, #332]	; (8002adc <drawFace+0x250>)
 8002990:	5c8a      	ldrb	r2, [r1, r2]
 8002992:	4611      	mov	r1, r2
 8002994:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <drawFace+0x248>)
 8002996:	430b      	orrs	r3, r1
 8002998:	6153      	str	r3, [r2, #20]
			while(end-- > 0) { // wszystkie kolumny
 800299a:	e017      	b.n	80029cc <drawFace+0x140>
				/*write8(hi);
						write8(lo);*/
				WR_STROBE; // impuls linii zegarowej
 800299c:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <drawFace+0x244>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <drawFace+0x244>)
 80029a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029a6:	6153      	str	r3, [r2, #20]
 80029a8:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <drawFace+0x244>)
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	4a48      	ldr	r2, [pc, #288]	; (8002ad0 <drawFace+0x244>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b2:	6153      	str	r3, [r2, #20]
				WR_STROBE;
 80029b4:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <drawFace+0x244>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4a45      	ldr	r2, [pc, #276]	; (8002ad0 <drawFace+0x244>)
 80029ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029be:	6153      	str	r3, [r2, #20]
 80029c0:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <drawFace+0x244>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4a42      	ldr	r2, [pc, #264]	; (8002ad0 <drawFace+0x244>)
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ca:	6153      	str	r3, [r2, #20]
			while(end-- > 0) { // wszystkie kolumny
 80029cc:	8abb      	ldrh	r3, [r7, #20]
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	82ba      	strh	r2, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e2      	bne.n	800299c <drawFace+0x110>
				// dwa tyknięcia zegara ponieważ przesyłamy 16-bit kolor jako 2 bajty. Ponieważ są identyczne, można zapieeeeeeepszać
			}
			ystart++; // inkrementuj aktualny wiersz
 80029d6:	8afb      	ldrh	r3, [r7, #22]
 80029d8:	3301      	adds	r3, #1
 80029da:	82fb      	strh	r3, [r7, #22]
		while(ystart <= yend) { // wszystkie wiersze zamazanego obszaru
 80029dc:	8afa      	ldrh	r2, [r7, #22]
 80029de:	89bb      	ldrh	r3, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d9cd      	bls.n	8002980 <drawFace+0xf4>
		}
		CS_HIGH; // wyłącz ChipSelect wyświetlacza
 80029e4:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <drawFace+0x244>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	4a39      	ldr	r2, [pc, #228]	; (8002ad0 <drawFace+0x244>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6153      	str	r3, [r2, #20]
 80029f0:	e0a0      	b.n	8002b34 <drawFace+0x2a8>
	}
	else { // jeśli trzeba zamazać dół
		ystart =  y+(MINIGRA_RYJEC_H>>1); // wiersz początku zamazywania
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	3315      	adds	r3, #21
 80029f6:	82fb      	strh	r3, [r7, #22]
		trv = ly-y; // wysokość do zamazania
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <drawFace+0x23c>)
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	88bb      	ldrh	r3, [r7, #4]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	823b      	strh	r3, [r7, #16]
		uint16_t yend = ystart+trv; // wiersz końca zamazywania
 8002a04:	8a3a      	ldrh	r2, [r7, #16]
 8002a06:	8afb      	ldrh	r3, [r7, #22]
 8002a08:	4413      	add	r3, r2
 8002a0a:	81fb      	strh	r3, [r7, #14]

		setAddrWindow(x-(MINIGRA_RYJEC_W>>1), ystart, x+(MINIGRA_RYJEC_W>>1), yend); // patrz na komentarze wyżej
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	3b0f      	subs	r3, #15
 8002a10:	b298      	uxth	r0, r3
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	330f      	adds	r3, #15
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	8af9      	ldrh	r1, [r7, #22]
 8002a1c:	f7fe fa48 	bl	8000eb0 <setAddrWindow>
		CS_LOW;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <drawFace+0x244>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <drawFace+0x244>)
 8002a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2a:	6153      	str	r3, [r2, #20]
		WriteCmd(_MW);
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <drawFace+0x244>)
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <drawFace+0x244>)
 8002a32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a36:	6153      	str	r3, [r2, #20]
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <drawFace+0x248>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a40:	4a25      	ldr	r2, [pc, #148]	; (8002ad8 <drawFace+0x24c>)
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	0a12      	lsrs	r2, r2, #8
 8002a46:	b292      	uxth	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <drawFace+0x248>)
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6153      	str	r3, [r2, #20]
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <drawFace+0x244>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <drawFace+0x244>)
 8002a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a5a:	6153      	str	r3, [r2, #20]
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <drawFace+0x244>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <drawFace+0x244>)
 8002a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a66:	6153      	str	r3, [r2, #20]
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <drawFace+0x248>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <drawFace+0x24c>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4917      	ldr	r1, [pc, #92]	; (8002ad4 <drawFace+0x248>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	614b      	str	r3, [r1, #20]
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <drawFace+0x244>)
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <drawFace+0x244>)
 8002a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a86:	6153      	str	r3, [r2, #20]
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <drawFace+0x244>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <drawFace+0x244>)
 8002a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a92:	6153      	str	r3, [r2, #20]
		//uint8_t hi = color>>8;
		//uint8_t lo = color&0xFF;
		uint16_t end = MINIGRA_RYJEC_W;
 8002a94:	231f      	movs	r3, #31
 8002a96:	827b      	strh	r3, [r7, #18]
		CD_DATA;
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <drawFace+0x244>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <drawFace+0x244>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa2:	6153      	str	r3, [r2, #20]
		//write_8(lo);
		while(ystart <= yend) {
 8002aa4:	e03c      	b.n	8002b20 <drawFace+0x294>
			end = MINIGRA_RYJEC_W;
 8002aa6:	231f      	movs	r3, #31
 8002aa8:	827b      	strh	r3, [r7, #18]
			write_8(tuorows[ystart]);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <drawFace+0x248>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ab2:	8afa      	ldrh	r2, [r7, #22]
 8002ab4:	4909      	ldr	r1, [pc, #36]	; (8002adc <drawFace+0x250>)
 8002ab6:	5c8a      	ldrb	r2, [r1, r2]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <drawFace+0x248>)
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6153      	str	r3, [r2, #20]
			while(end-- > 0) {
 8002ac0:	e026      	b.n	8002b10 <drawFace+0x284>
 8002ac2:	bf00      	nop
 8002ac4:	200002c0 	.word	0x200002c0
 8002ac8:	200002c2 	.word	0x200002c2
 8002acc:	200002c4 	.word	0x200002c4
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	2000000a 	.word	0x2000000a
 8002adc:	20000120 	.word	0x20000120
				/*write8(hi);
						write8(lo);*/
				WR_STROBE;
 8002ae0:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <drawFace+0x324>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4a32      	ldr	r2, [pc, #200]	; (8002bb0 <drawFace+0x324>)
 8002ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aea:	6153      	str	r3, [r2, #20]
 8002aec:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <drawFace+0x324>)
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	4a2f      	ldr	r2, [pc, #188]	; (8002bb0 <drawFace+0x324>)
 8002af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af6:	6153      	str	r3, [r2, #20]
				WR_STROBE;
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <drawFace+0x324>)
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <drawFace+0x324>)
 8002afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b02:	6153      	str	r3, [r2, #20]
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <drawFace+0x324>)
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <drawFace+0x324>)
 8002b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0e:	6153      	str	r3, [r2, #20]
			while(end-- > 0) {
 8002b10:	8a7b      	ldrh	r3, [r7, #18]
 8002b12:	1e5a      	subs	r2, r3, #1
 8002b14:	827a      	strh	r2, [r7, #18]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e2      	bne.n	8002ae0 <drawFace+0x254>
			}
			ystart++;
 8002b1a:	8afb      	ldrh	r3, [r7, #22]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	82fb      	strh	r3, [r7, #22]
		while(ystart <= yend) {
 8002b20:	8afa      	ldrh	r2, [r7, #22]
 8002b22:	89fb      	ldrh	r3, [r7, #14]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d9be      	bls.n	8002aa6 <drawFace+0x21a>
		}
		CS_HIGH;
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <drawFace+0x324>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <drawFace+0x324>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6153      	str	r3, [r2, #20]
	}
#endif

	switch(scared) { // którą mordę narysować
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d01f      	beq.n	8002b7a <drawFace+0x2ee>
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	dc2a      	bgt.n	8002b94 <drawFace+0x308>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <drawFace+0x2d4>
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d126      	bne.n	8002b94 <drawFace+0x308>
	case WYSTRASZONA_MORDA: // przestraszony
		drawBitmapHi(scared_31x43, x-(MINIGRA_RYJEC_W>>1), y-(MINIGRA_RYJEC_H>>1), MINIGRA_RYJEC_W, MINIGRA_RYJEC_H);
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	3b0f      	subs	r3, #15
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	88bb      	ldrh	r3, [r7, #4]
 8002b4e:	3b15      	subs	r3, #21
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	232b      	movs	r3, #43	; 0x2b
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	231f      	movs	r3, #31
 8002b58:	4816      	ldr	r0, [pc, #88]	; (8002bb4 <drawFace+0x328>)
 8002b5a:	f7fe fd2d 	bl	80015b8 <drawBitmapHi>
		break;
 8002b5e:	e019      	b.n	8002b94 <drawFace+0x308>
	case NORMALNA_MORDA: // normalny
		drawBitmapHi(JI_31x43,     x-(MINIGRA_RYJEC_W>>1), y-(MINIGRA_RYJEC_H>>1), MINIGRA_RYJEC_W, MINIGRA_RYJEC_H);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	3b0f      	subs	r3, #15
 8002b64:	b299      	uxth	r1, r3
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	3b15      	subs	r3, #21
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	232b      	movs	r3, #43	; 0x2b
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	231f      	movs	r3, #31
 8002b72:	4811      	ldr	r0, [pc, #68]	; (8002bb8 <drawFace+0x32c>)
 8002b74:	f7fe fd20 	bl	80015b8 <drawBitmapHi>
		break;
 8002b78:	e00c      	b.n	8002b94 <drawFace+0x308>
	case NAWYQUADZIE_MORDA: // poszedł na wykład
		drawBitmapHi(dead_31x43,   x-(MINIGRA_RYJEC_W>>1), y-(MINIGRA_RYJEC_H>>1), MINIGRA_RYJEC_W, MINIGRA_RYJEC_H);
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	3b0f      	subs	r3, #15
 8002b7e:	b299      	uxth	r1, r3
 8002b80:	88bb      	ldrh	r3, [r7, #4]
 8002b82:	3b15      	subs	r3, #21
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	232b      	movs	r3, #43	; 0x2b
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	231f      	movs	r3, #31
 8002b8c:	480b      	ldr	r0, [pc, #44]	; (8002bbc <drawFace+0x330>)
 8002b8e:	f7fe fd13 	bl	80015b8 <drawBitmapHi>
		break;
 8002b92:	bf00      	nop
	}

	lx = x; // zapamiętaj parametry na przyszłość
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <drawFace+0x334>)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	8013      	strh	r3, [r2, #0]
	ly = y;
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <drawFace+0x338>)
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	8013      	strh	r3, [r2, #0]
	lsc = scared;
 8002ba0:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <drawFace+0x33c>)
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	7013      	strb	r3, [r2, #0]
 8002ba6:	e000      	b.n	8002baa <drawFace+0x31e>
	if(x==lx && y==ly && scared==lsc) return; // jeśli położenie się nie zmieniło to nic nie rób
 8002ba8:	bf00      	nop
}
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	0800a130 	.word	0x0800a130
 8002bb8:	080096c4 	.word	0x080096c4
 8002bbc:	0800ab9c 	.word	0x0800ab9c
 8002bc0:	200002c0 	.word	0x200002c0
 8002bc4:	200002c2 	.word	0x200002c2
 8002bc8:	200002c4 	.word	0x200002c4

08002bcc <updateRura>:
		safeFillRect(x+RURA_W, 0, lx-x, y, GRA_BG); // wymaż górną część rury
		safeFillRect(x+RURA_W, y+h, lx-x, 239-y-h, GRA_BG); // wymaż dolną część rury
	}
}
#else // jeśli włączone kontury rur
void updateRura(int16_t x, int16_t y, int16_t lx, int16_t h) { // zaktualizuj położenie danej rury z konturem
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	80fb      	strh	r3, [r7, #6]
 8002bde:	4603      	mov	r3, r0
 8002be0:	80bb      	strh	r3, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	807b      	strh	r3, [r7, #2]
 8002be6:	4613      	mov	r3, r2
 8002be8:	803b      	strh	r3, [r7, #0]
	if(x == lx) return; // jeśli obecna rura jest taka sama jak poprzednia to nic nie rób
 8002bea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	f000 81db 	beq.w	8002fae <updateRura+0x3e2>

	if(x < lx && x < SCR_WIDTH) { // jeśli w lewo (i w sumie tyle, w prawo mi się nie chciało)
 8002bf8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f280 81d5 	bge.w	8002fb0 <updateRura+0x3e4>
 8002c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002c0e:	f280 81cf 	bge.w	8002fb0 <updateRura+0x3e4>
		if(lx-x <= RURA_LIN) { // jeśli przesunięcie nie większe niż grubość linii
 8002c12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	dc46      	bgt.n	8002cae <updateRura+0xe2>
			safeFillRect(x, 0, lx-x, y, RURA_LIN_COLOR); // jeśli mniejsze przesunięcie niż linia, sama linia (góra)
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c2e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c32:	f646 316b 	movw	r1, #27499	; 0x6b6b
 8002c36:	9100      	str	r1, [sp, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	f7ff fdb1 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_W-RURA_LIN, 0, lx-x, y, RURA_LIN_COLOR); // prawa pionowa linia
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	3325      	adds	r3, #37	; 0x25
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b218      	sxth	r0, r3
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c54:	f646 316b 	movw	r1, #27499	; 0x6b6b
 8002c58:	9100      	str	r1, [sp, #0]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f7ff fda0 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, y-RURA_LIN, lx-x, RURA_LIN, RURA_LIN_COLOR); // pozioma linia
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	3303      	adds	r3, #3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b218      	sxth	r0, r3
 8002c68:	88bb      	ldrh	r3, [r7, #4]
 8002c6a:	3b03      	subs	r3, #3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b219      	sxth	r1, r3
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	f646 336b 	movw	r3, #27499	; 0x6b6b
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2303      	movs	r3, #3
 8002c82:	f7ff fd8d 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, 0, lx-x, y-RURA_LIN, RURA_COLOR); // tło rury
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	3303      	adds	r3, #3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	b218      	sxth	r0, r3
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b21a      	sxth	r2, r3
 8002c98:	88bb      	ldrh	r3, [r7, #4]
 8002c9a:	3b03      	subs	r3, #3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	f641 611e 	movw	r1, #7710	; 0x1e1e
 8002ca4:	9100      	str	r1, [sp, #0]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f7ff fd7a 	bl	80027a0 <safeFillRect>
 8002cac:	e03f      	b.n	8002d2e <updateRura+0x162>
		}
		else { // jeśli więcej niż grubość linii
			safeFillRect(x, 0, RURA_LIN, y, RURA_LIN_COLOR); // linia lewa
 8002cae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cb2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002cb6:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8002cba:	9200      	str	r2, [sp, #0]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	f7ff fd6e 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, 0, lx-x-RURA_LIN, y-RURA_LIN, RURA_COLOR); // tło rury
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b218      	sxth	r0, r3
 8002ccc:	887a      	ldrh	r2, [r7, #2]
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	88bb      	ldrh	r3, [r7, #4]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	f641 611e 	movw	r1, #7710	; 0x1e1e
 8002ce6:	9100      	str	r1, [sp, #0]
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f7ff fd59 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_W-RURA_LIN, 0, RURA_LIN, y, RURA_LIN_COLOR); // prawa pionowa linia
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	3325      	adds	r3, #37	; 0x25
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	b218      	sxth	r0, r3
 8002cf6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cfa:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8002cfe:	9200      	str	r2, [sp, #0]
 8002d00:	2203      	movs	r2, #3
 8002d02:	2100      	movs	r1, #0
 8002d04:	f7ff fd4c 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, y-RURA_LIN, lx-x, RURA_LIN, RURA_LIN_COLOR); // pozioma linia
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b218      	sxth	r0, r3
 8002d10:	88bb      	ldrh	r3, [r7, #4]
 8002d12:	3b03      	subs	r3, #3
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b219      	sxth	r1, r3
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21a      	sxth	r2, r3
 8002d22:	f646 336b 	movw	r3, #27499	; 0x6b6b
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2303      	movs	r3, #3
 8002d2a:	f7ff fd39 	bl	80027a0 <safeFillRect>
		}

		if(lx-x <= RURA_LIN) { // jeśli przesunięcie o nie więcej niż grubość linii
 8002d2e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	dc68      	bgt.n	8002e0e <updateRura+0x242>
			safeFillRect(x, y+h, lx-x, SCR_HEIGHT-y-h, RURA_LIN_COLOR); // jeśli mniejsze przesunięcie niż linia, sama linia (dół)
 8002d3c:	88ba      	ldrh	r2, [r7, #4]
 8002d3e:	883b      	ldrh	r3, [r7, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	b219      	sxth	r1, r3
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b21c      	sxth	r4, r3
 8002d50:	88ba      	ldrh	r2, [r7, #4]
 8002d52:	883b      	ldrh	r3, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002d64:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8002d68:	9200      	str	r2, [sp, #0]
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	f7ff fd18 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_W-RURA_LIN, y+h, lx-x, SCR_HEIGHT-y-h, RURA_LIN_COLOR); // linia prawa
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	3325      	adds	r3, #37	; 0x25
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	b218      	sxth	r0, r3
 8002d78:	88ba      	ldrh	r2, [r7, #4]
 8002d7a:	883b      	ldrh	r3, [r7, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b219      	sxth	r1, r3
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b21c      	sxth	r4, r3
 8002d8c:	88ba      	ldrh	r2, [r7, #4]
 8002d8e:	883b      	ldrh	r3, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8002da0:	9200      	str	r2, [sp, #0]
 8002da2:	4622      	mov	r2, r4
 8002da4:	f7ff fcfc 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, y+h, lx-x, RURA_LIN, RURA_LIN_COLOR); // pozioma linia
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	3303      	adds	r3, #3
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	b218      	sxth	r0, r3
 8002db0:	88ba      	ldrh	r2, [r7, #4]
 8002db2:	883b      	ldrh	r3, [r7, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	b219      	sxth	r1, r3
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	f646 336b 	movw	r3, #27499	; 0x6b6b
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2303      	movs	r3, #3
 8002dcc:	f7ff fce8 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, y+h+RURA_LIN, lx-x, SCR_HEIGHT-y-h-RURA_LIN, RURA_COLOR); // tło rury
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	b218      	sxth	r0, r3
 8002dd8:	88ba      	ldrh	r2, [r7, #4]
 8002dda:	883b      	ldrh	r3, [r7, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3303      	adds	r3, #3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b219      	sxth	r1, r3
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b21c      	sxth	r4, r3
 8002df0:	88ba      	ldrh	r2, [r7, #4]
 8002df2:	883b      	ldrh	r3, [r7, #0]
 8002df4:	4413      	add	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f1c3 03ed 	rsb	r3, r3, #237	; 0xed
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	f641 621e 	movw	r2, #7710	; 0x1e1e
 8002e04:	9200      	str	r2, [sp, #0]
 8002e06:	4622      	mov	r2, r4
 8002e08:	f7ff fcca 	bl	80027a0 <safeFillRect>
 8002e0c:	e05f      	b.n	8002ece <updateRura+0x302>
		}
		else { // jeśli więcej niż grubość linii
			safeFillRect(x, y+h, RURA_LIN, SCR_HEIGHT-y-h, RURA_LIN_COLOR); // linia lewa
 8002e0e:	88ba      	ldrh	r2, [r7, #4]
 8002e10:	883b      	ldrh	r3, [r7, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	b219      	sxth	r1, r3
 8002e18:	88ba      	ldrh	r2, [r7, #4]
 8002e1a:	883b      	ldrh	r3, [r7, #0]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002e2c:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8002e30:	9200      	str	r2, [sp, #0]
 8002e32:	2203      	movs	r2, #3
 8002e34:	f7ff fcb4 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, y+h+RURA_LIN, lx-x-RURA_LIN, SCR_HEIGHT-y-h-RURA_LIN, RURA_COLOR); // tło rury
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	3303      	adds	r3, #3
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b218      	sxth	r0, r3
 8002e40:	88ba      	ldrh	r2, [r7, #4]
 8002e42:	883b      	ldrh	r3, [r7, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3303      	adds	r3, #3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b219      	sxth	r1, r3
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b03      	subs	r3, #3
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b21c      	sxth	r4, r3
 8002e5c:	88ba      	ldrh	r2, [r7, #4]
 8002e5e:	883b      	ldrh	r3, [r7, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f1c3 03ed 	rsb	r3, r3, #237	; 0xed
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	f641 621e 	movw	r2, #7710	; 0x1e1e
 8002e70:	9200      	str	r2, [sp, #0]
 8002e72:	4622      	mov	r2, r4
 8002e74:	f7ff fc94 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_W-RURA_LIN, y+h, RURA_LIN, SCR_HEIGHT-y-h, RURA_LIN_COLOR); // linia prawa
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	3325      	adds	r3, #37	; 0x25
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b218      	sxth	r0, r3
 8002e80:	88ba      	ldrh	r2, [r7, #4]
 8002e82:	883b      	ldrh	r3, [r7, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	b219      	sxth	r1, r3
 8002e8a:	88ba      	ldrh	r2, [r7, #4]
 8002e8c:	883b      	ldrh	r3, [r7, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8002e9e:	9200      	str	r2, [sp, #0]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f7ff fc7d 	bl	80027a0 <safeFillRect>
			safeFillRect(x+RURA_LIN, y+h, lx-x, RURA_LIN, RURA_LIN_COLOR); // pozioma linia
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	b218      	sxth	r0, r3
 8002eae:	88ba      	ldrh	r2, [r7, #4]
 8002eb0:	883b      	ldrh	r3, [r7, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b219      	sxth	r1, r3
 8002eb8:	887a      	ldrh	r2, [r7, #2]
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	f646 336b 	movw	r3, #27499	; 0x6b6b
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2303      	movs	r3, #3
 8002eca:	f7ff fc69 	bl	80027a0 <safeFillRect>
		}

#ifdef SIATKA_TUA
		uint16_t hcnt = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	81fb      	strh	r3, [r7, #14]
		while(hcnt < y) { // przeleć przez całą wysokość górnej rury
 8002ed2:	e027      	b.n	8002f24 <updateRura+0x358>
			safeFillRect(x+RURA_W, hcnt, lx-x, SIATKA_TUA, GRA_BG); // kratka
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	3328      	adds	r3, #40	; 0x28
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	b218      	sxth	r0, r3
 8002edc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002ee0:	887a      	ldrh	r2, [r7, #2]
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b21a      	sxth	r2, r3
 8002eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	231d      	movs	r3, #29
 8002ef2:	f7ff fc55 	bl	80027a0 <safeFillRect>
			hcnt += SIATKA_TUA;
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	331d      	adds	r3, #29
 8002efa:	81fb      	strh	r3, [r7, #14]
			safeFillRect(x+RURA_W, hcnt, lx-x, 1,          RURA_LIN_COLOR); // linia
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	3328      	adds	r3, #40	; 0x28
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b218      	sxth	r0, r3
 8002f04:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002f08:	887a      	ldrh	r2, [r7, #2]
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	b21a      	sxth	r2, r3
 8002f12:	f646 336b 	movw	r3, #27499	; 0x6b6b
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f7ff fc41 	bl	80027a0 <safeFillRect>
			hcnt++;
 8002f1e:	89fb      	ldrh	r3, [r7, #14]
 8002f20:	3301      	adds	r3, #1
 8002f22:	81fb      	strh	r3, [r7, #14]
		while(hcnt < y) { // przeleć przez całą wysokość górnej rury
 8002f24:	89fa      	ldrh	r2, [r7, #14]
 8002f26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	dbd2      	blt.n	8002ed4 <updateRura+0x308>
		}
		hcnt = (y+h) / (SIATKA_TUA+1);
 8002f2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002f32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f36:	4413      	add	r3, r2
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <updateRura+0x3ec>)
 8002f3a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f3e:	441a      	add	r2, r3
 8002f40:	1112      	asrs	r2, r2, #4
 8002f42:	17db      	asrs	r3, r3, #31
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	81fb      	strh	r3, [r7, #14]
		hcnt *= (SIATKA_TUA+1); // po to żeby zaokrąglić do całkowitych kratek
 8002f48:	89fb      	ldrh	r3, [r7, #14]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	81fb      	strh	r3, [r7, #14]
		while(hcnt < SCR_HEIGHT) { // przeleć przez całą wysokość dolnej rury
 8002f54:	e027      	b.n	8002fa6 <updateRura+0x3da>
			safeFillRect(x+RURA_W, hcnt, lx-x, SIATKA_TUA, GRA_BG); // kratka
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	3328      	adds	r3, #40	; 0x28
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	b218      	sxth	r0, r3
 8002f5e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	b21a      	sxth	r2, r3
 8002f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	231d      	movs	r3, #29
 8002f74:	f7ff fc14 	bl	80027a0 <safeFillRect>
			hcnt += SIATKA_TUA;
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	331d      	adds	r3, #29
 8002f7c:	81fb      	strh	r3, [r7, #14]
			safeFillRect(x+RURA_W, hcnt, lx-x, 1,          RURA_LIN_COLOR); // linia
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	3328      	adds	r3, #40	; 0x28
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	b218      	sxth	r0, r3
 8002f86:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b21a      	sxth	r2, r3
 8002f94:	f646 336b 	movw	r3, #27499	; 0x6b6b
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f7ff fc00 	bl	80027a0 <safeFillRect>
			hcnt++;
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	81fb      	strh	r3, [r7, #14]
		while(hcnt < SCR_HEIGHT) { // przeleć przez całą wysokość dolnej rury
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	2bef      	cmp	r3, #239	; 0xef
 8002faa:	d9d4      	bls.n	8002f56 <updateRura+0x38a>
 8002fac:	e000      	b.n	8002fb0 <updateRura+0x3e4>
	if(x == lx) return; // jeśli obecna rura jest taka sama jak poprzednia to nic nie rób
 8002fae:	bf00      	nop
#else // jeśli tylko jednolite tło
		safeFillRect(x+RURA_W, 0, lx-x, y, GRA_BG); // wymaż górną część rury
		safeFillRect(x+RURA_W, y+h, lx-x, SCR_HEIGHT-y-h, GRA_BG); // wymaż dolną część rury
#endif
	}
}
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	88888889 	.word	0x88888889

08002fbc <updatePos>:
#endif

uint16_t updatePos(uint8_t press) { // oblicza aktualną pozycję gracza
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
	static int16_t curPos; // aktualne położenie
	//static uint32_t lastTimer;
	static int16_t speed; // szybkość [px/s]
	static uint8_t lastPress; // czy przy poprzednim wywołaniu funkcji był naciśnięty przycisk
	static int16_t accel; // przyspieszenie [px/s2]
	const int16_t MAX_SPD = 100; // maksymalna osiągalna szybkość [px/s]
 8002fc6:	2364      	movs	r3, #100	; 0x64
 8002fc8:	81fb      	strh	r3, [r7, #14]
	const int16_t DOWN_ACCEL  =  1; // przyspieszenie w dół
 8002fca:	2301      	movs	r3, #1
 8002fcc:	81bb      	strh	r3, [r7, #12]
	const int16_t UP_ACCEL    = -2; // przyspieszenie w górę
 8002fce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002fd2:	817b      	strh	r3, [r7, #10]
	const int16_t START_SPEED = -1; // startowa prędkość po naciśnięciu przycisku
 8002fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fd8:	813b      	strh	r3, [r7, #8]

	if(!lastPress && press) { // jeśli właśnie podskoczono
 8002fda:	4b53      	ldr	r3, [pc, #332]	; (8003128 <updatePos+0x16c>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <updatePos+0x54>
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <updatePos+0x54>
		accel = UP_ACCEL; // zdefiniowane przyspieszenie do góry
 8002fe8:	4a50      	ldr	r2, [pc, #320]	; (800312c <updatePos+0x170>)
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	8013      	strh	r3, [r2, #0]
		speed = START_SPEED; // prędkość startowa (musi być przynajmniej 1)
 8002fee:	4a50      	ldr	r2, [pc, #320]	; (8003130 <updatePos+0x174>)
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	8013      	strh	r3, [r2, #0]
		curPos += speed; // zwiększ położenie o szybkość
 8002ff4:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <updatePos+0x178>)
 8002ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <updatePos+0x174>)
 8002ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4413      	add	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	b21a      	sxth	r2, r3
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <updatePos+0x178>)
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	e057      	b.n	80030c0 <updatePos+0x104>
	}
	else if(lastPress && press) { // jeśli skacze już jakiś czas
 8003010:	4b45      	ldr	r3, [pc, #276]	; (8003128 <updatePos+0x16c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d02c      	beq.n	8003072 <updatePos+0xb6>
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d029      	beq.n	8003072 <updatePos+0xb6>
		speed += accel; // zwiększ szybkość o przyspieszenie
 800301e:	4b44      	ldr	r3, [pc, #272]	; (8003130 <updatePos+0x174>)
 8003020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003024:	b29a      	uxth	r2, r3
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <updatePos+0x170>)
 8003028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302c:	b29b      	uxth	r3, r3
 800302e:	4413      	add	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	b21a      	sxth	r2, r3
 8003034:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <updatePos+0x174>)
 8003036:	801a      	strh	r2, [r3, #0]
		if(speed < -MAX_SPD) speed = -MAX_SPD; // zdefiniowana maksymalna szybkość do góry
 8003038:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <updatePos+0x174>)
 800303a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303e:	461a      	mov	r2, r3
 8003040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003044:	425b      	negs	r3, r3
 8003046:	429a      	cmp	r2, r3
 8003048:	da05      	bge.n	8003056 <updatePos+0x9a>
 800304a:	89fb      	ldrh	r3, [r7, #14]
 800304c:	425b      	negs	r3, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	b21a      	sxth	r2, r3
 8003052:	4b37      	ldr	r3, [pc, #220]	; (8003130 <updatePos+0x174>)
 8003054:	801a      	strh	r2, [r3, #0]
		curPos += speed; // zwiększ położenie o szybkość
 8003056:	4b37      	ldr	r3, [pc, #220]	; (8003134 <updatePos+0x178>)
 8003058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305c:	b29a      	uxth	r2, r3
 800305e:	4b34      	ldr	r3, [pc, #208]	; (8003130 <updatePos+0x174>)
 8003060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4413      	add	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	b21a      	sxth	r2, r3
 800306c:	4b31      	ldr	r3, [pc, #196]	; (8003134 <updatePos+0x178>)
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	e026      	b.n	80030c0 <updatePos+0x104>
	}
	else { // jeśli spada
		accel = DOWN_ACCEL; // ustaw przyspieszenie na przyspieszenie w duu
 8003072:	4a2e      	ldr	r2, [pc, #184]	; (800312c <updatePos+0x170>)
 8003074:	89bb      	ldrh	r3, [r7, #12]
 8003076:	8013      	strh	r3, [r2, #0]
		speed += accel; // zwiększ szybkość o przyspieszenie
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <updatePos+0x174>)
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b2a      	ldr	r3, [pc, #168]	; (800312c <updatePos+0x170>)
 8003082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4413      	add	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	b21a      	sxth	r2, r3
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <updatePos+0x174>)
 8003090:	801a      	strh	r2, [r3, #0]
		if(speed > MAX_SPD) speed = MAX_SPD; // definiujemy maksymalną prędkość spadania
 8003092:	4b27      	ldr	r3, [pc, #156]	; (8003130 <updatePos+0x174>)
 8003094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003098:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800309c:	429a      	cmp	r2, r3
 800309e:	da02      	bge.n	80030a6 <updatePos+0xea>
 80030a0:	4a23      	ldr	r2, [pc, #140]	; (8003130 <updatePos+0x174>)
 80030a2:	89fb      	ldrh	r3, [r7, #14]
 80030a4:	8013      	strh	r3, [r2, #0]
		curPos += speed; // zwiększ położenie o szybkość
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <updatePos+0x178>)
 80030a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <updatePos+0x174>)
 80030b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	b21a      	sxth	r2, r3
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <updatePos+0x178>)
 80030be:	801a      	strh	r2, [r3, #0]
	}

	lastPress = press; // zapamiętaj stan przycisku na przyszłość
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <updatePos+0x16c>)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	7013      	strb	r3, [r2, #0]

	if(curPos+FACE_RADIUS >= SCR_HEIGHT-1) { // jeśli leży na ziemi
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <updatePos+0x178>)
 80030c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030cc:	2bd9      	cmp	r3, #217	; 0xd9
 80030ce:	dd0d      	ble.n	80030ec <updatePos+0x130>
		curPos = SCR_HEIGHT-1-FACE_RADIUS; // ustaw położenie na dno
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <updatePos+0x178>)
 80030d2:	22da      	movs	r2, #218	; 0xda
 80030d4:	801a      	strh	r2, [r3, #0]
		accel = 0;
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <updatePos+0x170>)
 80030d8:	2200      	movs	r2, #0
 80030da:	801a      	strh	r2, [r3, #0]
		speed = 0;
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <updatePos+0x174>)
 80030de:	2200      	movs	r2, #0
 80030e0:	801a      	strh	r2, [r3, #0]
		return curPos; // zwróć aktualne położenie
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <updatePos+0x178>)
 80030e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	e016      	b.n	800311a <updatePos+0x15e>
	}

	if(curPos <= FACE_RADIUS) { // jeśli walnął w sufit
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <updatePos+0x178>)
 80030ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f2:	2b15      	cmp	r3, #21
 80030f4:	dc0d      	bgt.n	8003112 <updatePos+0x156>
		curPos = FACE_RADIUS; // ustaw położenie na pod sufitem
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <updatePos+0x178>)
 80030f8:	2215      	movs	r2, #21
 80030fa:	801a      	strh	r2, [r3, #0]
		accel = 0;
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <updatePos+0x170>)
 80030fe:	2200      	movs	r2, #0
 8003100:	801a      	strh	r2, [r3, #0]
		speed = 0;
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <updatePos+0x174>)
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
		return curPos; // zwróć aktualne położenie
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <updatePos+0x178>)
 800310a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310e:	b29b      	uxth	r3, r3
 8003110:	e003      	b.n	800311a <updatePos+0x15e>
	}

	return curPos;
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <updatePos+0x178>)
 8003114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003118:	b29b      	uxth	r3, r3
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200002c5 	.word	0x200002c5
 800312c:	200002c6 	.word	0x200002c6
 8003130:	200002c8 	.word	0x200002c8
 8003134:	200002ca 	.word	0x200002ca

08003138 <checkColision>:
	int16_t r1 = xa-xb; // odległość w poziomie
	int16_t r2 = ya-yb; // odległość w pionie
	return sqrtf( r1*r1 + r2+r2 ); // suma geometryczna
}

uint8_t checkColision(uint16_t x, uint16_t y) { // sprawdza kolizję gracza z rurą
 8003138:	b490      	push	{r4, r7}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	460a      	mov	r2, r1
 8003142:	80fb      	strh	r3, [r7, #6]
 8003144:	4613      	mov	r3, r2
 8003146:	80bb      	strh	r3, [r7, #4]
	uint16_t leftGr = x-FACE_RADIUS; // lewa granica mordy
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	3b15      	subs	r3, #21
 800314c:	82bb      	strh	r3, [r7, #20]
	uint16_t rightGr = x+FACE_RADIUS; // prawa granica mordy
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	3315      	adds	r3, #21
 8003152:	827b      	strh	r3, [r7, #18]
	uint16_t upGr = y-FACE_RADIUS; // górna granica mordy
 8003154:	88bb      	ldrh	r3, [r7, #4]
 8003156:	3b15      	subs	r3, #21
 8003158:	823b      	strh	r3, [r7, #16]
	uint16_t dnGr = y+FACE_RADIUS; // dolna granica mordy
 800315a:	88bb      	ldrh	r3, [r7, #4]
 800315c:	3315      	adds	r3, #21
 800315e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 8003160:	2300      	movs	r3, #0
 8003162:	75fb      	strb	r3, [r7, #23]
 8003164:	e043      	b.n	80031ee <checkColision+0xb6>
		if(rightGr > rury[i][0] && // kolizja z lewą stroną rury
 8003166:	8a79      	ldrh	r1, [r7, #18]
 8003168:	7dfa      	ldrb	r2, [r7, #23]
 800316a:	4825      	ldr	r0, [pc, #148]	; (8003200 <checkColision+0xc8>)
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4403      	add	r3, r0
 8003176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317a:	4299      	cmp	r1, r3
 800317c:	dd34      	ble.n	80031e8 <checkColision+0xb0>
		   (upGr < rury[i][1] || dnGr > rury[i][1]+rury[i][2]) && // kolizja z górą lub dołem rury
 800317e:	8a39      	ldrh	r1, [r7, #16]
 8003180:	7dfa      	ldrb	r2, [r7, #23]
 8003182:	481f      	ldr	r0, [pc, #124]	; (8003200 <checkColision+0xc8>)
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4403      	add	r3, r0
 800318e:	3302      	adds	r3, #2
 8003190:	f9b3 3000 	ldrsh.w	r3, [r3]
		if(rightGr > rury[i][0] && // kolizja z lewą stroną rury
 8003194:	4299      	cmp	r1, r3
 8003196:	db18      	blt.n	80031ca <checkColision+0x92>
		   (upGr < rury[i][1] || dnGr > rury[i][1]+rury[i][2]) && // kolizja z górą lub dołem rury
 8003198:	89f9      	ldrh	r1, [r7, #14]
 800319a:	7dfa      	ldrb	r2, [r7, #23]
 800319c:	4818      	ldr	r0, [pc, #96]	; (8003200 <checkColision+0xc8>)
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4403      	add	r3, r0
 80031a8:	3302      	adds	r3, #2
 80031aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ae:	461c      	mov	r4, r3
 80031b0:	7dfa      	ldrb	r2, [r7, #23]
 80031b2:	4813      	ldr	r0, [pc, #76]	; (8003200 <checkColision+0xc8>)
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4403      	add	r3, r0
 80031be:	3304      	adds	r3, #4
 80031c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c4:	4423      	add	r3, r4
 80031c6:	4299      	cmp	r1, r3
 80031c8:	dd0e      	ble.n	80031e8 <checkColision+0xb0>
		   (leftGr <= rury[i][0]+RURA_W) // rura nie może być za mordą
 80031ca:	8ab9      	ldrh	r1, [r7, #20]
 80031cc:	7dfa      	ldrb	r2, [r7, #23]
 80031ce:	480c      	ldr	r0, [pc, #48]	; (8003200 <checkColision+0xc8>)
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4403      	add	r3, r0
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	3328      	adds	r3, #40	; 0x28
		   (upGr < rury[i][1] || dnGr > rury[i][1]+rury[i][2]) && // kolizja z górą lub dołem rury
 80031e0:	4299      	cmp	r1, r3
 80031e2:	dc01      	bgt.n	80031e8 <checkColision+0xb0>
		   ) return 1; // jeśli kolizja ustaw flagę
 80031e4:	2301      	movs	r3, #1
 80031e6:	e006      	b.n	80031f6 <checkColision+0xbe>
	for(uint8_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	3301      	adds	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	d9b8      	bls.n	8003166 <checkColision+0x2e>
	}
	return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc90      	pop	{r4, r7}
 80031fe:	4770      	bx	lr
 8003200:	2000001c 	.word	0x2000001c

08003204 <nearby>:

uint8_t nearby() { // sprawdza czy morda jest w pobliżu którejś rury
 8003204:	b490      	push	{r4, r7}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
	uint16_t marginv = 10; // margines powyżej promienia w pionie
 800320a:	230a      	movs	r3, #10
 800320c:	81bb      	strh	r3, [r7, #12]
	uint16_t marginh = 7; // margines powyżej promienia w poziomie
 800320e:	2307      	movs	r3, #7
 8003210:	817b      	strh	r3, [r7, #10]
	uint16_t leftGr = FACE_X-FACE_RADIUS-marginh; // lewa granica mordy
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	f1c3 031d 	rsb	r3, r3, #29
 8003218:	813b      	strh	r3, [r7, #8]
	uint16_t rightGr = FACE_X+FACE_RADIUS+marginh; // prawa granica mordy
 800321a:	897b      	ldrh	r3, [r7, #10]
 800321c:	3347      	adds	r3, #71	; 0x47
 800321e:	80fb      	strh	r3, [r7, #6]
	uint16_t upGr = mordaY-FACE_RADIUS-marginv; // górna granica mordy
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <nearby+0xe0>)
 8003222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003226:	b29a      	uxth	r2, r3
 8003228:	89bb      	ldrh	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b15      	subs	r3, #21
 8003230:	80bb      	strh	r3, [r7, #4]
	uint16_t dnGr = mordaY+FACE_RADIUS+marginv; // dolna granica mordy
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <nearby+0xe0>)
 8003234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003238:	b29a      	uxth	r2, r3
 800323a:	89bb      	ldrh	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	3315      	adds	r3, #21
 8003242:	807b      	strh	r3, [r7, #2]
	for(uint8_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e043      	b.n	80032d2 <nearby+0xce>
		if(rightGr > rury[i][0] && (upGr < rury[i][1] || dnGr > rury[i][1]+rury[i][2]) && leftGr <= rury[i][0]+RURA_W) return 1;
 800324a:	88f9      	ldrh	r1, [r7, #6]
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	4826      	ldr	r0, [pc, #152]	; (80032e8 <nearby+0xe4>)
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4403      	add	r3, r0
 800325a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800325e:	4299      	cmp	r1, r3
 8003260:	dd34      	ble.n	80032cc <nearby+0xc8>
 8003262:	88b9      	ldrh	r1, [r7, #4]
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	4820      	ldr	r0, [pc, #128]	; (80032e8 <nearby+0xe4>)
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4403      	add	r3, r0
 8003272:	3302      	adds	r3, #2
 8003274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003278:	4299      	cmp	r1, r3
 800327a:	db18      	blt.n	80032ae <nearby+0xaa>
 800327c:	8879      	ldrh	r1, [r7, #2]
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	4819      	ldr	r0, [pc, #100]	; (80032e8 <nearby+0xe4>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4403      	add	r3, r0
 800328c:	3302      	adds	r3, #2
 800328e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003292:	461c      	mov	r4, r3
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	4814      	ldr	r0, [pc, #80]	; (80032e8 <nearby+0xe4>)
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4403      	add	r3, r0
 80032a2:	3304      	adds	r3, #4
 80032a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a8:	4423      	add	r3, r4
 80032aa:	4299      	cmp	r1, r3
 80032ac:	dd0e      	ble.n	80032cc <nearby+0xc8>
 80032ae:	8939      	ldrh	r1, [r7, #8]
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	480d      	ldr	r0, [pc, #52]	; (80032e8 <nearby+0xe4>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4403      	add	r3, r0
 80032be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c2:	3328      	adds	r3, #40	; 0x28
 80032c4:	4299      	cmp	r1, r3
 80032c6:	dc01      	bgt.n	80032cc <nearby+0xc8>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e006      	b.n	80032da <nearby+0xd6>
	for(uint8_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	3301      	adds	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b09      	cmp	r3, #9
 80032d6:	d9b8      	bls.n	800324a <nearby+0x46>
	}
	return 0;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc90      	pop	{r4, r7}
 80032e2:	4770      	bx	lr
 80032e4:	2000011c 	.word	0x2000011c
 80032e8:	2000001c 	.word	0x2000001c

080032ec <crossed>:

void crossed() { // aktualizuje flagi przekroczonych rur
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
	uint16_t leftGr = FACE_X-FACE_RADIUS; // lewa granica mordy
 80032f2:	231d      	movs	r3, #29
 80032f4:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 80032f6:	2300      	movs	r3, #0
 80032f8:	71fb      	strb	r3, [r7, #7]
 80032fa:	e01e      	b.n	800333a <crossed+0x4e>
		if(ruraCrossed[i] == 0) { // jeśli dana rura nie była jeszcze przekroczona
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	4a14      	ldr	r2, [pc, #80]	; (8003350 <crossed+0x64>)
 8003300:	5cd3      	ldrb	r3, [r2, r3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <crossed+0x48>
			if(leftGr > rury[i][0]+RURA_W) { // jeśli lewa granica mordy jest dalej niż prawa granica rury
 8003306:	88b9      	ldrh	r1, [r7, #4]
 8003308:	79fa      	ldrb	r2, [r7, #7]
 800330a:	4812      	ldr	r0, [pc, #72]	; (8003354 <crossed+0x68>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4403      	add	r3, r0
 8003316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331a:	3328      	adds	r3, #40	; 0x28
 800331c:	4299      	cmp	r1, r3
 800331e:	dd09      	ble.n	8003334 <crossed+0x48>
				minigraScore++; // inkrementuj wynik gry
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <crossed+0x6c>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <crossed+0x6c>)
 800332a:	701a      	strb	r2, [r3, #0]
				ruraCrossed[i] = 1; // ustaw flagę rury na przekroczoną
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	4a08      	ldr	r2, [pc, #32]	; (8003350 <crossed+0x64>)
 8003330:	2101      	movs	r1, #1
 8003332:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	3301      	adds	r3, #1
 8003338:	71fb      	strb	r3, [r7, #7]
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	2b09      	cmp	r3, #9
 800333e:	d9dd      	bls.n	80032fc <crossed+0x10>
			}
		}
	}
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000110 	.word	0x20000110
 8003354:	2000001c 	.word	0x2000001c
 8003358:	2000011e 	.word	0x2000011e

0800335c <minigraDrawScore>:
	minigraSampleCnt = minigraSampleMax;
	listenMode[0] = 0;
}
#endif

void minigraDrawScore(uint8_t score) { // rysuje aktualny wynik w rogu ekranu
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b08d      	sub	sp, #52	; 0x34
 8003360:	af02      	add	r7, sp, #8
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
	const uint16_t xpos = 335; // położenie wyniku na ekranie
 8003366:	f240 134f 	movw	r3, #335	; 0x14f
 800336a:	84fb      	strh	r3, [r7, #38]	; 0x26
	const uint16_t ypos = 232;
 800336c:	23e8      	movs	r3, #232	; 0xe8
 800336e:	84bb      	strh	r3, [r7, #36]	; 0x24
	const uint16_t bar_w = 65; // wymiary wskaźnika wyniku
 8003370:	2341      	movs	r3, #65	; 0x41
 8003372:	847b      	strh	r3, [r7, #34]	; 0x22
	const uint16_t bar_h = 8;
 8003374:	2308      	movs	r3, #8
 8003376:	843b      	strh	r3, [r7, #32]

	cur_x = xpos; cur_y = ypos+1; txt_color = GAMESCR_SCORE_COLOR; txt_bg = GAMESCR_SCORE_BG; // ustaw kursor, oraz kolory tekstu
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <minigraDrawScore+0x70>)
 800337a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800337c:	8013      	strh	r3, [r2, #0]
 800337e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003380:	3301      	adds	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <minigraDrawScore+0x74>)
 8003386:	801a      	strh	r2, [r3, #0]
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <minigraDrawScore+0x78>)
 800338a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <minigraDrawScore+0x7c>)
 8003392:	2200      	movs	r2, #0
 8003394:	801a      	strh	r2, [r3, #0]
	char message[20];
	sprintf(message, "SCORE: %3u", score); // wpisz nowy wynik do stringa
 8003396:	79fa      	ldrb	r2, [r7, #7]
 8003398:	f107 030c 	add.w	r3, r7, #12
 800339c:	490f      	ldr	r1, [pc, #60]	; (80033dc <minigraDrawScore+0x80>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fcaa 	bl	8005cf8 <siprintf>
	fillRect(xpos, ypos, bar_w, bar_h, txt_bg); // zamaż poprzednie wskazanie
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <minigraDrawScore+0x7c>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	8c3c      	ldrh	r4, [r7, #32]
 80033aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033ac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80033ae:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4623      	mov	r3, r4
 80033b4:	f7fd fed4 	bl	8001160 <fillRect>
	naivePrint(message); // narysuj stringa
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fe25 	bl	800200c <naivePrint>
}
 80033c2:	bf00      	nop
 80033c4:	372c      	adds	r7, #44	; 0x2c
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd90      	pop	{r4, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000102 	.word	0x20000102
 80033d0:	20000104 	.word	0x20000104
 80033d4:	2000001a 	.word	0x2000001a
 80033d8:	20000106 	.word	0x20000106
 80033dc:	080065f8 	.word	0x080065f8

080033e0 <minigraGenerateScreen>:

void minigraGenerateScreen() { // generuje na świeżo ekran gry
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af02      	add	r7, sp, #8
#ifdef MINIGRA_USE_SOUND
	playSound(3);
#endif
#ifdef SIATKA_TUA // jeśli włączone generowanie tła w postaci siatki
	// wygeneruj tablicę kolorów tła
	int16_t rlicz = SIATKA_TUA; // licznik wierszy ekranu
 80033e6:	231d      	movs	r3, #29
 80033e8:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<SCR_HEIGHT; i++) { // wszystkie linie ekranu
 80033ea:	2300      	movs	r3, #0
 80033ec:	80bb      	strh	r3, [r7, #4]
 80033ee:	e017      	b.n	8003420 <minigraGenerateScreen+0x40>
		if(rlicz == 0) { // co któryś wiersz rysuj linię
 80033f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <minigraGenerateScreen+0x26>
			tuorows[i] = RURA_LIN_COLOR & 0xFF; // ustaw pozycję w tablicy na kolor linii
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	4a20      	ldr	r2, [pc, #128]	; (800347c <minigraGenerateScreen+0x9c>)
 80033fc:	216b      	movs	r1, #107	; 0x6b
 80033fe:	54d1      	strb	r1, [r2, r3]
			rlicz = SIATKA_TUA; // zresetuj licznik wierszy
 8003400:	231d      	movs	r3, #29
 8003402:	80fb      	strh	r3, [r7, #6]
 8003404:	e009      	b.n	800341a <minigraGenerateScreen+0x3a>
		}
		else { // pozostałe wiersze pozostają białe
			tuorows[i] = GRA_BG & 0xFF; // ustaw pozycję w tablicy na kolor tła
 8003406:	88bb      	ldrh	r3, [r7, #4]
 8003408:	4a1c      	ldr	r2, [pc, #112]	; (800347c <minigraGenerateScreen+0x9c>)
 800340a:	21ff      	movs	r1, #255	; 0xff
 800340c:	54d1      	strb	r1, [r2, r3]
			rlicz--; // dekrementuj licznik wierszy
 800340e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29b      	uxth	r3, r3
 8003418:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<SCR_HEIGHT; i++) { // wszystkie linie ekranu
 800341a:	88bb      	ldrh	r3, [r7, #4]
 800341c:	3301      	adds	r3, #1
 800341e:	80bb      	strh	r3, [r7, #4]
 8003420:	88bb      	ldrh	r3, [r7, #4]
 8003422:	2bef      	cmp	r3, #239	; 0xef
 8003424:	d9e4      	bls.n	80033f0 <minigraGenerateScreen+0x10>
		}
	}

	uint16_t hcnt = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	807b      	strh	r3, [r7, #2]
	while(hcnt < SCR_HEIGHT) { // przeleć przez całą wysokość ekranu
 800342a:	e01b      	b.n	8003464 <minigraGenerateScreen+0x84>
		safeFillRect(0, hcnt, SCR_WIDTH, SIATKA_TUA, GRA_BG); // kratka
 800342c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	231d      	movs	r3, #29
 8003438:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800343c:	2000      	movs	r0, #0
 800343e:	f7ff f9af 	bl	80027a0 <safeFillRect>
		hcnt += SIATKA_TUA;
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	331d      	adds	r3, #29
 8003446:	807b      	strh	r3, [r7, #2]
		safeFillRect(0, hcnt, SCR_WIDTH, 1,          RURA_LIN_COLOR); // linia
 8003448:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800344c:	f646 336b 	movw	r3, #27499	; 0x6b6b
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2301      	movs	r3, #1
 8003454:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003458:	2000      	movs	r0, #0
 800345a:	f7ff f9a1 	bl	80027a0 <safeFillRect>
		hcnt++;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	3301      	adds	r3, #1
 8003462:	807b      	strh	r3, [r7, #2]
	while(hcnt < SCR_HEIGHT) { // przeleć przez całą wysokość ekranu
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	2bef      	cmp	r3, #239	; 0xef
 8003468:	d9e0      	bls.n	800342c <minigraGenerateScreen+0x4c>
	}
#else
	fillScreen(GRA_BG); // jeśli siatka wyłączona, narysuj tylko białe tło
#endif
	startoweRury(); // wygeneruj początkowe rury
 800346a:	f7ff f943 	bl	80026f4 <startoweRury>
	//__disable_irq(); // wyłącz przerwania. Potrzebujemy CAAAAłą moc do rysowania izydora!
	//DISPLAY_INT = DEFAULT_DISP_INT; // 20ms -> 50Hz
	minigraScore = 0; // zresetuj licznik aktualnego wyniku
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <minigraGenerateScreen+0xa0>)
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000120 	.word	0x20000120
 8003480:	2000011e 	.word	0x2000011e

08003484 <minigraLost>:
void minigraExit() { // wychodzi z minigry. W sumie nic nie robi w tej wersji. Potem można wywalić
	__enable_irq();
	//DISPLAY_INT = 100;
}

void minigraLost() { // wywoływana kiedy przypadkiem pójdziesz na wykład, ale w sumie i tak nie ma studentów
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
	if(minigraScore > minigraBest) { // jeśli nowy rekord
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <minigraLost+0x38>)
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <minigraLost+0x3c>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d903      	bls.n	800349c <minigraLost+0x18>
		minigraBest = minigraScore;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <minigraLost+0x38>)
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <minigraLost+0x3c>)
 800349a:	701a      	strb	r2, [r3, #0]
#ifdef USE_EEPROM
		eeprom_writeByte(BESTSCOREADDR, minigraBest);
#endif
	}
	minigraScore = 0; // zresetuj aktualny wynik
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <minigraLost+0x38>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
	drawFace(FACE_X, mordaY, NAWYQUADZIE_MORDA); // narysuj mordę na wykładzie
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <minigraLost+0x40>)
 80034a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2202      	movs	r2, #2
 80034ac:	4619      	mov	r1, r3
 80034ae:	2032      	movs	r0, #50	; 0x32
 80034b0:	f7ff f9ec 	bl	800288c <drawFace>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80034b4:	b662      	cpsie	i
}
 80034b6:	bf00      	nop
	playSound(6);
	HAL_Delay(2500);
	niePlaySound();
#endif
	//DISPLAY_INT = 100;
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000011e 	.word	0x2000011e
 80034c0:	2000011f 	.word	0x2000011f
 80034c4:	2000011c 	.word	0x2000011c

080034c8 <minigraRefreshScreen>:

void minigraRefreshScreen() { // odświeża ekran gry
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
	for(int16_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 80034ce:	2300      	movs	r3, #0
 80034d0:	80fb      	strh	r3, [r7, #6]
 80034d2:	e04e      	b.n	8003572 <minigraRefreshScreen+0xaa>
		updateRura(rury[i][0]-2, rury[i][1], rury[i][0], rury[i][2]); // zaktualizuj rury
 80034d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034d8:	4977      	ldr	r1, [pc, #476]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	440b      	add	r3, r1
 80034e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b02      	subs	r3, #2
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	b218      	sxth	r0, r3
 80034f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034f4:	4970      	ldr	r1, [pc, #448]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	440b      	add	r3, r1
 8003500:	3302      	adds	r3, #2
 8003502:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800350a:	4c6b      	ldr	r4, [pc, #428]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4423      	add	r3, r4
 8003516:	f9b3 4000 	ldrsh.w	r4, [r3]
 800351a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800351e:	4d66      	ldr	r5, [pc, #408]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	442b      	add	r3, r5
 800352a:	3304      	adds	r3, #4
 800352c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003530:	4622      	mov	r2, r4
 8003532:	f7ff fb4b 	bl	8002bcc <updateRura>
		rury[i][0] -= MOVE_RURA; // przesuń rury o zdefiniowaną liczbę pikseli
 8003536:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800353a:	495f      	ldr	r1, [pc, #380]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	440b      	add	r3, r1
 8003546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b02      	subs	r3, #2
 800354e:	b29b      	uxth	r3, r3
 8003550:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003554:	b218      	sxth	r0, r3
 8003556:	4958      	ldr	r1, [pc, #352]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	440b      	add	r3, r1
 8003562:	4602      	mov	r2, r0
 8003564:	801a      	strh	r2, [r3, #0]
	for(int16_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 8003566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356a:	b29b      	uxth	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	80fb      	strh	r3, [r7, #6]
 8003572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003576:	2b09      	cmp	r3, #9
 8003578:	ddac      	ble.n	80034d4 <minigraRefreshScreen+0xc>
	}

	for(int16_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 800357a:	2300      	movs	r3, #0
 800357c:	80bb      	strh	r3, [r7, #4]
 800357e:	e065      	b.n	800364c <minigraRefreshScreen+0x184>
		if(rury[i][0] < -RURA_W) {// jeśli rura już wyszła z ekranu
 8003580:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003584:	494c      	ldr	r1, [pc, #304]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	440b      	add	r3, r1
 8003590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003594:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8003598:	da52      	bge.n	8003640 <minigraRefreshScreen+0x178>
			generateRura(rury[i]); // wygeneruj nową rurę
 800359a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4a44      	ldr	r2, [pc, #272]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 80035a8:	4413      	add	r3, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe ffd8 	bl	8002560 <generateRura>
			 // znajdź rurę która jest najbardziej w prawo:
			maxx = rury[0][0];
 80035b0:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 80035b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <minigraRefreshScreen+0x1f4>)
 80035b8:	801a      	strh	r2, [r3, #0]
			for(uint16_t k=1; k<LICZBA_RUR; k++) {
 80035ba:	2301      	movs	r3, #1
 80035bc:	807b      	strh	r3, [r7, #2]
 80035be:	e01b      	b.n	80035f8 <minigraRefreshScreen+0x130>
				if(rury[k][0] > maxx) maxx = rury[k][0];
 80035c0:	887a      	ldrh	r2, [r7, #2]
 80035c2:	493d      	ldr	r1, [pc, #244]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <minigraRefreshScreen+0x1f4>)
 80035d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d8:	429a      	cmp	r2, r3
 80035da:	dd0a      	ble.n	80035f2 <minigraRefreshScreen+0x12a>
 80035dc:	887a      	ldrh	r2, [r7, #2]
 80035de:	4936      	ldr	r1, [pc, #216]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	440b      	add	r3, r1
 80035ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035ee:	4b33      	ldr	r3, [pc, #204]	; (80036bc <minigraRefreshScreen+0x1f4>)
 80035f0:	801a      	strh	r2, [r3, #0]
			for(uint16_t k=1; k<LICZBA_RUR; k++) {
 80035f2:	887b      	ldrh	r3, [r7, #2]
 80035f4:	3301      	adds	r3, #1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	d9e0      	bls.n	80035c0 <minigraRefreshScreen+0xf8>
			}
			rury[i][0] += maxx; // przesuń nową rurę tak by była po prawej od wszystkich
 80035fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003602:	492d      	ldr	r1, [pc, #180]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	440b      	add	r3, r1
 800360e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <minigraRefreshScreen+0x1f4>)
 8003616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361a:	b29b      	uxth	r3, r3
 800361c:	4413      	add	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003624:	b218      	sxth	r0, r3
 8003626:	4924      	ldr	r1, [pc, #144]	; (80036b8 <minigraRefreshScreen+0x1f0>)
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	440b      	add	r3, r1
 8003632:	4602      	mov	r2, r0
 8003634:	801a      	strh	r2, [r3, #0]
			ruraCrossed[i] = 0; // ustaw rurę na nieprzekroczoną
 8003636:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <minigraRefreshScreen+0x1f8>)
 800363c:	2100      	movs	r1, #0
 800363e:	54d1      	strb	r1, [r2, r3]
	for(int16_t i=0; i<LICZBA_RUR; i++) { // przeleć przez wszystkie rury
 8003640:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003644:	b29b      	uxth	r3, r3
 8003646:	3301      	adds	r3, #1
 8003648:	b29b      	uxth	r3, r3
 800364a:	80bb      	strh	r3, [r7, #4]
 800364c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003650:	2b09      	cmp	r3, #9
 8003652:	dd95      	ble.n	8003580 <minigraRefreshScreen+0xb8>
		}
	}

	mordaY = updatePos(but(0)); // zaktualizuj położenie mordy na podstawie aktualnego przycisku
 8003654:	2000      	movs	r0, #0
 8003656:	f7fd fb1f 	bl	8000c98 <but>
 800365a:	4603      	mov	r3, r0
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fcad 	bl	8002fbc <updatePos>
 8003662:	4603      	mov	r3, r0
 8003664:	b21a      	sxth	r2, r3
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <minigraRefreshScreen+0x1fc>)
 8003668:	801a      	strh	r2, [r3, #0]
	drawFace(FACE_X, mordaY, nearby()); // narysuj mordę
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <minigraRefreshScreen+0x1fc>)
 800366c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003670:	b29c      	uxth	r4, r3
 8003672:	f7ff fdc7 	bl	8003204 <nearby>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	4621      	mov	r1, r4
 800367c:	2032      	movs	r0, #50	; 0x32
 800367e:	f7ff f905 	bl	800288c <drawFace>

	crossed(); // aktualizuje flagi przekroczonych rur
 8003682:	f7ff fe33 	bl	80032ec <crossed>
	minigraDrawScore(minigraScore);
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <minigraRefreshScreen+0x200>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fe66 	bl	800335c <minigraDrawScore>

	if(checkColision(FACE_X, mordaY)) { // sprawdź czy nie jesteś na wykładzie
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <minigraRefreshScreen+0x1fc>)
 8003692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003696:	b29b      	uxth	r3, r3
 8003698:	4619      	mov	r1, r3
 800369a:	2032      	movs	r0, #50	; 0x32
 800369c:	f7ff fd4c 	bl	8003138 <checkColision>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <minigraRefreshScreen+0x1e8>
		//HAL_Delay(500);
		minigraLost(); // odpal procedurę przegrania
 80036a6:	f7ff feed 	bl	8003484 <minigraLost>
		menu[0] = HOME_INDEX; // menu główne
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <minigraRefreshScreen+0x204>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
	}
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdb0      	pop	{r4, r5, r7, pc}
 80036b8:	2000001c 	.word	0x2000001c
 80036bc:	2000011a 	.word	0x2000011a
 80036c0:	20000110 	.word	0x20000110
 80036c4:	2000011c 	.word	0x2000011c
 80036c8:	2000011e 	.word	0x2000011e
 80036cc:	20000000 	.word	0x20000000

080036d0 <minigraEkranStartowy>:

void minigraEkranStartowy(bool fresh, bool sen) { // przyjmuje ustawienia czy rysujemy ekran na świeżo, i czy włączyć dźwięki
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	4603      	mov	r3, r0
 80036d8:	460a      	mov	r2, r1
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	4613      	mov	r3, r2
 80036de:	71bb      	strb	r3, [r7, #6]
	const uint32_t BLINK_INT = 15; // co ile klatek obrazu ma wystąpić miganie
 80036e0:	230f      	movs	r3, #15
 80036e2:	617b      	str	r3, [r7, #20]

	static uint32_t blinkTimer; // licznik migania obrazu
	static bool blinkSt; // aktualny status migania
	if(fresh==1) { // jeśli rysujemy ekran na świeżo
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <minigraEkranStartowy+0x34>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ea:	b672      	cpsid	i
}
 80036ec:	bf00      	nop
		__disable_irq(); // wyłącz przerwania żeby było szyyyyybko!
		drawBitmapLo(PI_400x240, 0, 0, SCR_WIDTH, SCR_HEIGHT); // narysuj 8-bitową grafikę tła
 80036ee:	23f0      	movs	r3, #240	; 0xf0
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80036f6:	2200      	movs	r2, #0
 80036f8:	2100      	movs	r1, #0
 80036fa:	483f      	ldr	r0, [pc, #252]	; (80037f8 <minigraEkranStartowy+0x128>)
 80036fc:	f7fd fe90 	bl	8001420 <drawBitmapLo>
  __ASM volatile ("cpsie i" : : : "memory");
 8003700:	b662      	cpsie	i
}
 8003702:	bf00      	nop
#ifdef USE_EEPROM
		minigraBest = eeprom_readByte(BESTSCOREADDR);
#endif
	}

	if(blinkTimer > BLINK_INT) { // wybił interwał migania
 8003704:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <minigraEkranStartowy+0x12c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	429a      	cmp	r2, r3
 800370c:	d26a      	bcs.n	80037e4 <minigraEkranStartowy+0x114>
		blinkTimer = 0; // zresetuj licznik migania
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <minigraEkranStartowy+0x12c>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
		if(blinkSt) { // jeśli wyświetlamy wynik
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <minigraEkranStartowy+0x130>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02d      	beq.n	8003778 <minigraEkranStartowy+0xa8>
			blinkSt = 0; // zmieniamy na "press button"
 800371c:	4b38      	ldr	r3, [pc, #224]	; (8003800 <minigraEkranStartowy+0x130>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
			cur_x = HOMESCR_PRESSBUT_X; cur_y = HOMESCR_PRESSBUT_Y; txt_color = HOMESCR_PRESSBUT_COLOR; txt_bg = HOMESCR_BG; // ustaw parametry tekstu
 8003722:	4b38      	ldr	r3, [pc, #224]	; (8003804 <minigraEkranStartowy+0x134>)
 8003724:	225a      	movs	r2, #90	; 0x5a
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	4b37      	ldr	r3, [pc, #220]	; (8003808 <minigraEkranStartowy+0x138>)
 800372a:	22c8      	movs	r2, #200	; 0xc8
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <minigraEkranStartowy+0x13c>)
 8003730:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	4b36      	ldr	r3, [pc, #216]	; (8003810 <minigraEkranStartowy+0x140>)
 8003738:	f644 224a 	movw	r2, #19018	; 0x4a4a
 800373c:	801a      	strh	r2, [r3, #0]
			setFont(&FreeSansBold24pt7b); // ustaw cionkę
 800373e:	4835      	ldr	r0, [pc, #212]	; (8003814 <minigraEkranStartowy+0x144>)
 8003740:	f7fe fcb6 	bl	80020b0 <setFont>
			fillRect(0, HOMESCR_ZAMAZ_Y, SCR_WIDTH, HOMESCR_ZAMAZ_H, txt_bg); // zamaż wynik
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <minigraEkranStartowy+0x140>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2346      	movs	r3, #70	; 0x46
 800374c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003750:	2196      	movs	r1, #150	; 0x96
 8003752:	2000      	movs	r0, #0
 8003754:	f7fd fd04 	bl	8001160 <fillRect>
			naiveCusPrint("PRESS"); // napisz "press"
 8003758:	482f      	ldr	r0, [pc, #188]	; (8003818 <minigraEkranStartowy+0x148>)
 800375a:	f7fe fe3f 	bl	80023dc <naiveCusPrint>
			drawMonoBitmap(HOMESCR_BUTSYM_X, HOMESCR_BUTSYM_Y, GenSymbol_79x60, txt_color, txt_bg); // narysuj grafikę przycisku
 800375e:	4b2b      	ldr	r3, [pc, #172]	; (800380c <minigraEkranStartowy+0x13c>)
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <minigraEkranStartowy+0x140>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	4a2c      	ldr	r2, [pc, #176]	; (800381c <minigraEkranStartowy+0x14c>)
 800376c:	219b      	movs	r1, #155	; 0x9b
 800376e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003772:	f7fd ffe9 	bl	8001748 <drawMonoBitmap>
			sprintf(message, "%3u", minigraBest); // wygeneruj stringa z najlepszym wynikiem
			naiveCusPrint(message); // napisz najlepszy wynik
		}
	}
	else blinkTimer++; // jeśli nie wybił interwał migania, inkrementuj licznik
}
 8003776:	e03a      	b.n	80037ee <minigraEkranStartowy+0x11e>
			blinkSt = 1; // zmień na wynik
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <minigraEkranStartowy+0x130>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
			cur_x = HOMESCR_BEST_X; cur_y = HOMESCR_BEST_Y; txt_color = HOMESCR_BEST_COLOR; txt_bg = HOMESCR_BG;// ustaw parametry tekstu
 800377e:	4b21      	ldr	r3, [pc, #132]	; (8003804 <minigraEkranStartowy+0x134>)
 8003780:	2200      	movs	r2, #0
 8003782:	801a      	strh	r2, [r3, #0]
 8003784:	4b20      	ldr	r3, [pc, #128]	; (8003808 <minigraEkranStartowy+0x138>)
 8003786:	22b4      	movs	r2, #180	; 0xb4
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <minigraEkranStartowy+0x13c>)
 800378c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003790:	801a      	strh	r2, [r3, #0]
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <minigraEkranStartowy+0x140>)
 8003794:	f644 224a 	movw	r2, #19018	; 0x4a4a
 8003798:	801a      	strh	r2, [r3, #0]
			setFont(DEF_FONT); // ustaw cionkę
 800379a:	4821      	ldr	r0, [pc, #132]	; (8003820 <minigraEkranStartowy+0x150>)
 800379c:	f7fe fc88 	bl	80020b0 <setFont>
			fillRect(0, HOMESCR_ZAMAZ_Y, SCR_WIDTH, HOMESCR_ZAMAZ_H, txt_bg); // zamaż napis "press button"
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <minigraEkranStartowy+0x140>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2346      	movs	r3, #70	; 0x46
 80037a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037ac:	2196      	movs	r1, #150	; 0x96
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7fd fcd6 	bl	8001160 <fillRect>
			naiveCusPrint("BEST:");
 80037b4:	481b      	ldr	r0, [pc, #108]	; (8003824 <minigraEkranStartowy+0x154>)
 80037b6:	f7fe fe11 	bl	80023dc <naiveCusPrint>
			cur_x = HOMESCR_SCORE_X; cur_y = HOMESCR_SCORE_Y;
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <minigraEkranStartowy+0x134>)
 80037bc:	220a      	movs	r2, #10
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <minigraEkranStartowy+0x138>)
 80037c2:	22d2      	movs	r2, #210	; 0xd2
 80037c4:	801a      	strh	r2, [r3, #0]
			sprintf(message, "%3u", minigraBest); // wygeneruj stringa z najlepszym wynikiem
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <minigraEkranStartowy+0x158>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	4916      	ldr	r1, [pc, #88]	; (800382c <minigraEkranStartowy+0x15c>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 fa90 	bl	8005cf8 <siprintf>
			naiveCusPrint(message); // napisz najlepszy wynik
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fdfd 	bl	80023dc <naiveCusPrint>
}
 80037e2:	e004      	b.n	80037ee <minigraEkranStartowy+0x11e>
	else blinkTimer++; // jeśli nie wybił interwał migania, inkrementuj licznik
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <minigraEkranStartowy+0x12c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <minigraEkranStartowy+0x12c>)
 80037ec:	6013      	str	r3, [r2, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	0800b608 	.word	0x0800b608
 80037fc:	200002cc 	.word	0x200002cc
 8003800:	200002d0 	.word	0x200002d0
 8003804:	20000102 	.word	0x20000102
 8003808:	20000104 	.word	0x20000104
 800380c:	2000001a 	.word	0x2000001a
 8003810:	20000106 	.word	0x20000106
 8003814:	080096b4 	.word	0x080096b4
 8003818:	08006604 	.word	0x08006604
 800381c:	08022d08 	.word	0x08022d08
 8003820:	080073dc 	.word	0x080073dc
 8003824:	0800660c 	.word	0x0800660c
 8003828:	2000011f 	.word	0x2000011f
 800382c:	08006614 	.word	0x08006614

08003830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003834:	f000 fb76 	bl	8003f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003838:	f000 f866 	bl	8003908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800383c:	f000 f96a 	bl	8003b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8003840:	f000 f948 	bl	8003ad4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003844:	f000 f8ca 	bl	80039dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  initDisplay();
 8003848:	f7fe f95a 	bl	8001b00 <initDisplay>
  HAL_Delay(100);
 800384c:	2064      	movs	r0, #100	; 0x64
 800384e:	f000 fbdb 	bl	8004008 <HAL_Delay>
  setRotation(1);
 8003852:	2001      	movs	r0, #1
 8003854:	f7fe f990 	bl	8001b78 <setRotation>
  setFont(DEF_FONT);
 8003858:	4826      	ldr	r0, [pc, #152]	; (80038f4 <main+0xc4>)
 800385a:	f7fe fc29 	bl	80020b0 <setFont>

  HAL_ADC_Start_DMA(&hadc1, ADC_INS, ADC_N); // inicjalizuj DMA ADC
 800385e:	2204      	movs	r2, #4
 8003860:	4925      	ldr	r1, [pc, #148]	; (80038f8 <main+0xc8>)
 8003862:	4826      	ldr	r0, [pc, #152]	; (80038fc <main+0xcc>)
 8003864:	f000 fc38 	bl	80040d8 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() >= scrTimer) { // jeśli wybił interwał odświeżania ekranu
 8003868:	f000 fbc2 	bl	8003ff0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <main+0xd0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d32c      	bcc.n	80038d0 <main+0xa0>
		  scrTimer = HAL_GetTick() + DISPLAY_INT; // ustaw czas następnego odświeżenia ekranu
 8003876:	f000 fbbb 	bl	8003ff0 <HAL_GetTick>
 800387a:	4603      	mov	r3, r0
 800387c:	3319      	adds	r3, #25
 800387e:	4a20      	ldr	r2, [pc, #128]	; (8003900 <main+0xd0>)
 8003880:	6013      	str	r3, [r2, #0]

		  if(menu[1] != menu[0]) { // jeśli zmienił się wyświetlany ekran
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <main+0xd4>)
 8003884:	785a      	ldrb	r2, [r3, #1]
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <main+0xd4>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d012      	beq.n	80038b4 <main+0x84>
			  switch(menu[0]) {
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <main+0xd4>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <main+0x6c>
 8003896:	2b01      	cmp	r3, #1
 8003898:	d005      	beq.n	80038a6 <main+0x76>
 800389a:	e007      	b.n	80038ac <main+0x7c>
			  case HOME_INDEX: // ekran startowy minigry
				  minigraEkranStartowy(1, 0);
 800389c:	2100      	movs	r1, #0
 800389e:	2001      	movs	r0, #1
 80038a0:	f7ff ff16 	bl	80036d0 <minigraEkranStartowy>
				  break;
 80038a4:	e002      	b.n	80038ac <main+0x7c>

			  case GAME_INDEX: // ekran minigry
				  minigraGenerateScreen();
 80038a6:	f7ff fd9b 	bl	80033e0 <minigraGenerateScreen>
				  break;
 80038aa:	bf00      	nop
			  }
			  menu[1] = menu[0];
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <main+0xd4>)
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <main+0xd4>)
 80038b2:	705a      	strb	r2, [r3, #1]
		  }

		  switch(menu[0]) { // odśwież dane wyświetlane na ekranie
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <main+0xd4>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <main+0x96>
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d108      	bne.n	80038d2 <main+0xa2>
		  case GAME_INDEX: // ekran minigry
			  minigraRefreshScreen();
 80038c0:	f7ff fe02 	bl	80034c8 <minigraRefreshScreen>
			  break;
 80038c4:	e005      	b.n	80038d2 <main+0xa2>

		  case HOME_INDEX: // ekran startowy minigry
			  minigraEkranStartowy(0, 0);
 80038c6:	2100      	movs	r1, #0
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7ff ff01 	bl	80036d0 <minigraEkranStartowy>
			  break;
 80038ce:	e000      	b.n	80038d2 <main+0xa2>
		  }
	  }
 80038d0:	bf00      	nop

	  switch(menu[0]) { // rola przycisku
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <main+0xd4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <main+0xae>
 80038da:	2b01      	cmp	r3, #1
			  menu[0] = GAME_INDEX;
			  //butLock(0);
		  }
		  break;
	  case GAME_INDEX:
		   break;
 80038dc:	e009      	b.n	80038f2 <main+0xc2>
		  if(but(0)) {
 80038de:	2000      	movs	r0, #0
 80038e0:	f7fd f9da 	bl	8000c98 <but>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <main+0xc0>
			  menu[0] = GAME_INDEX;
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <main+0xd4>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
		  break;
 80038f0:	bf00      	nop
	  if(HAL_GetTick() >= scrTimer) { // jeśli wybił interwał odświeżania ekranu
 80038f2:	e7b9      	b.n	8003868 <main+0x38>
 80038f4:	080073dc 	.word	0x080073dc
 80038f8:	200000ec 	.word	0x200000ec
 80038fc:	20000210 	.word	0x20000210
 8003900:	200000e8 	.word	0x200000e8
 8003904:	20000000 	.word	0x20000000

08003908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b094      	sub	sp, #80	; 0x50
 800390c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800390e:	f107 0320 	add.w	r3, r7, #32
 8003912:	2230      	movs	r2, #48	; 0x30
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f002 f9e6 	bl	8005ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <SystemClock_Config+0xcc>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <SystemClock_Config+0xcc>)
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393a:	6413      	str	r3, [r2, #64]	; 0x40
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <SystemClock_Config+0xcc>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003948:	2300      	movs	r3, #0
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <SystemClock_Config+0xd0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003954:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <SystemClock_Config+0xd0>)
 8003956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <SystemClock_Config+0xd0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800396c:	2301      	movs	r3, #1
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003970:	2310      	movs	r3, #16
 8003972:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003974:	2302      	movs	r3, #2
 8003976:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003978:	2300      	movs	r3, #0
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800397c:	2310      	movs	r3, #16
 800397e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003980:	23a8      	movs	r3, #168	; 0xa8
 8003982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003984:	2302      	movs	r3, #2
 8003986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003988:	2304      	movs	r3, #4
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800398c:	f107 0320 	add.w	r3, r7, #32
 8003990:	4618      	mov	r0, r3
 8003992:	f001 fd5b 	bl	800544c <HAL_RCC_OscConfig>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800399c:	f000 f954 	bl	8003c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039a0:	230f      	movs	r3, #15
 80039a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039a4:	2302      	movs	r3, #2
 80039a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039b6:	f107 030c 	add.w	r3, r7, #12
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 ffbd 	bl	800593c <HAL_RCC_ClockConfig>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80039c8:	f000 f93e 	bl	8003c48 <Error_Handler>
  }
}
 80039cc:	bf00      	nop
 80039ce:	3750      	adds	r7, #80	; 0x50
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40007000 	.word	0x40007000

080039dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039e2:	463b      	mov	r3, r7
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039ee:	4b36      	ldr	r3, [pc, #216]	; (8003ac8 <MX_ADC1_Init+0xec>)
 80039f0:	4a36      	ldr	r2, [pc, #216]	; (8003acc <MX_ADC1_Init+0xf0>)
 80039f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039f4:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <MX_ADC1_Init+0xec>)
 80039f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <MX_ADC1_Init+0xec>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003a02:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a08:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a16:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <MX_ADC1_Init+0xf4>)
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003a2e:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a3c:	4822      	ldr	r0, [pc, #136]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a3e:	f000 fb07 	bl	8004050 <HAL_ADC_Init>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003a48:	f000 f8fe 	bl	8003c48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a58:	463b      	mov	r3, r7
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	481a      	ldr	r0, [pc, #104]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a5e:	f000 fc35 	bl	80042cc <HAL_ADC_ConfigChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003a68:	f000 f8ee 	bl	8003c48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a70:	2302      	movs	r3, #2
 8003a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a74:	463b      	mov	r3, r7
 8003a76:	4619      	mov	r1, r3
 8003a78:	4813      	ldr	r0, [pc, #76]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a7a:	f000 fc27 	bl	80042cc <HAL_ADC_ConfigChannel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003a84:	f000 f8e0 	bl	8003c48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a90:	463b      	mov	r3, r7
 8003a92:	4619      	mov	r1, r3
 8003a94:	480c      	ldr	r0, [pc, #48]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003a96:	f000 fc19 	bl	80042cc <HAL_ADC_ConfigChannel>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003aa0:	f000 f8d2 	bl	8003c48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003aac:	463b      	mov	r3, r7
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_ADC1_Init+0xec>)
 8003ab2:	f000 fc0b 	bl	80042cc <HAL_ADC_ConfigChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003abc:	f000 f8c4 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000210 	.word	0x20000210
 8003acc:	40012000 	.word	0x40012000
 8003ad0:	0f000001 	.word	0x0f000001

08003ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <MX_DMA_Init+0x3c>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <MX_DMA_Init+0x3c>)
 8003ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <MX_DMA_Init+0x3c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	2038      	movs	r0, #56	; 0x38
 8003afc:	f000 ff61 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003b00:	2038      	movs	r0, #56	; 0x38
 8003b02:	f000 ff7a 	bl	80049fa <HAL_NVIC_EnableIRQ>

}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800

08003b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	60da      	str	r2, [r3, #12]
 8003b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a41      	ldr	r2, [pc, #260]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a3a      	ldr	r2, [pc, #232]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a33      	ldr	r2, [pc, #204]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <MX_GPIO_Init+0x124>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003ba0:	4826      	ldr	r0, [pc, #152]	; (8003c3c <MX_GPIO_Init+0x128>)
 8003ba2:	f001 fc39 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	21ff      	movs	r1, #255	; 0xff
 8003baa:	4825      	ldr	r0, [pc, #148]	; (8003c40 <MX_GPIO_Init+0x12c>)
 8003bac:	f001 fc34 	bl	8005418 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8003bb6:	4823      	ldr	r0, [pc, #140]	; (8003c44 <MX_GPIO_Init+0x130>)
 8003bb8:	f001 fc2e 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_RST_Pin;
 8003bbc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4819      	ldr	r0, [pc, #100]	; (8003c3c <MX_GPIO_Init+0x128>)
 8003bd6:	f001 fa9b 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003bda:	23ff      	movs	r3, #255	; 0xff
 8003bdc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bde:	2301      	movs	r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4813      	ldr	r0, [pc, #76]	; (8003c40 <MX_GPIO_Init+0x12c>)
 8003bf2:	f001 fa8d 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_Pin */
  GPIO_InitStruct.Pin = BUT_Pin;
 8003bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c00:	2301      	movs	r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	480d      	ldr	r0, [pc, #52]	; (8003c40 <MX_GPIO_Init+0x12c>)
 8003c0c:	f001 fa80 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003c10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	4619      	mov	r1, r3
 8003c28:	4806      	ldr	r0, [pc, #24]	; (8003c44 <MX_GPIO_Init+0x130>)
 8003c2a:	f001 fa71 	bl	8005110 <HAL_GPIO_Init>

}
 8003c2e:	bf00      	nop
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40020000 	.word	0x40020000

08003c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4c:	b672      	cpsid	i
}
 8003c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c50:	e7fe      	b.n	8003c50 <Error_Handler+0x8>
	...

08003c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <HAL_MspInit+0x90>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <HAL_MspInit+0x90>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c68:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_MspInit+0x90>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_MspInit+0x90>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <HAL_MspInit+0x90>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <HAL_MspInit+0x90>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2101      	movs	r1, #1
 8003c96:	f06f 000b 	mvn.w	r0, #11
 8003c9a:	f000 fe92 	bl	80049c2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	f06f 000a 	mvn.w	r0, #10
 8003ca6:	f000 fe8c 	bl	80049c2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2102      	movs	r1, #2
 8003cae:	f06f 0009 	mvn.w	r0, #9
 8003cb2:	f000 fe86 	bl	80049c2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2102      	movs	r1, #2
 8003cba:	f06f 0004 	mvn.w	r0, #4
 8003cbe:	f000 fe80 	bl	80049c2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	f06f 0003 	mvn.w	r0, #3
 8003cca:	f000 fe7a 	bl	80049c2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	f06f 0001 	mvn.w	r0, #1
 8003cd6:	f000 fe74 	bl	80049c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <HAL_ADC_MspInit+0xdc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d157      	bne.n	8003dba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <HAL_ADC_MspInit+0xe0>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <HAL_ADC_MspInit+0xe0>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_ADC_MspInit+0xe0>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <HAL_ADC_MspInit+0xe0>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <HAL_ADC_MspInit+0xe0>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_ADC_MspInit+0xe0>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003d42:	230f      	movs	r3, #15
 8003d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d46:	2303      	movs	r3, #3
 8003d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4619      	mov	r1, r3
 8003d54:	481d      	ldr	r0, [pc, #116]	; (8003dcc <HAL_ADC_MspInit+0xe4>)
 8003d56:	f001 f9db 	bl	8005110 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_ADC_MspInit+0xec>)
 8003d5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d9e:	480c      	ldr	r0, [pc, #48]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003da0:	f000 fe46 	bl	8004a30 <HAL_DMA_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003daa:	f7ff ff4d 	bl	8003c48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
 8003db4:	4a06      	ldr	r2, [pc, #24]	; (8003dd0 <HAL_ADC_MspInit+0xe8>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003dba:	bf00      	nop
 8003dbc:	3728      	adds	r7, #40	; 0x28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40012000 	.word	0x40012000
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40020000 	.word	0x40020000
 8003dd0:	20000258 	.word	0x20000258
 8003dd4:	40026410 	.word	0x40026410

08003dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <NMI_Handler+0x4>

08003dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003de2:	e7fe      	b.n	8003de2 <HardFault_Handler+0x4>

08003de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003de8:	e7fe      	b.n	8003de8 <MemManage_Handler+0x4>

08003dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dee:	e7fe      	b.n	8003dee <BusFault_Handler+0x4>

08003df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003df4:	e7fe      	b.n	8003df4 <UsageFault_Handler+0x4>

08003df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e24:	f000 f8d0 	bl	8003fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <DMA2_Stream0_IRQHandler+0x10>)
 8003e32:	f000 ff03 	bl	8004c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000258 	.word	0x20000258

08003e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <_sbrk+0x5c>)
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <_sbrk+0x60>)
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <_sbrk+0x64>)
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <_sbrk+0x68>)
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <_sbrk+0x64>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d207      	bcs.n	8003e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e70:	f001 ff10 	bl	8005c94 <__errno>
 8003e74:	4603      	mov	r3, r0
 8003e76:	220c      	movs	r2, #12
 8003e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	e009      	b.n	8003e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <_sbrk+0x64>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <_sbrk+0x64>)
 8003e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20010000 	.word	0x20010000
 8003ea0:	00000400 	.word	0x00000400
 8003ea4:	200002d4 	.word	0x200002d4
 8003ea8:	200002f0 	.word	0x200002f0

08003eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <SystemInit+0x20>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <SystemInit+0x20>)
 8003eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ed4:	480d      	ldr	r0, [pc, #52]	; (8003f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ed6:	490e      	ldr	r1, [pc, #56]	; (8003f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003edc:	e002      	b.n	8003ee4 <LoopCopyDataInit>

08003ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ee2:	3304      	adds	r3, #4

08003ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee8:	d3f9      	bcc.n	8003ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eec:	4c0b      	ldr	r4, [pc, #44]	; (8003f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef0:	e001      	b.n	8003ef6 <LoopFillZerobss>

08003ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef4:	3204      	adds	r2, #4

08003ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef8:	d3fb      	bcc.n	8003ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003efa:	f7ff ffd7 	bl	8003eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003efe:	f001 fecf 	bl	8005ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f02:	f7ff fc95 	bl	8003830 <main>
  bx  lr    
 8003f06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f10:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8003f14:	08022fec 	.word	0x08022fec
  ldr r2, =_sbss
 8003f18:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8003f1c:	200002ec 	.word	0x200002ec

08003f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f20:	e7fe      	b.n	8003f20 <ADC_IRQHandler>
	...

08003f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f28:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <HAL_Init+0x40>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <HAL_Init+0x40>)
 8003f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_Init+0x40>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <HAL_Init+0x40>)
 8003f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <HAL_Init+0x40>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <HAL_Init+0x40>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	f000 fd2d 	bl	80049ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f52:	200f      	movs	r0, #15
 8003f54:	f000 f808 	bl	8003f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f58:	f7ff fe7c 	bl	8003c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00

08003f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_InitTick+0x54>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_InitTick+0x58>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fd45 	bl	8004a16 <HAL_SYSTICK_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e00e      	b.n	8003fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	d80a      	bhi.n	8003fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	f000 fd0d 	bl	80049c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fa8:	4a06      	ldr	r2, [pc, #24]	; (8003fc4 <HAL_InitTick+0x5c>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000058 	.word	0x20000058
 8003fc0:	20000060 	.word	0x20000060
 8003fc4:	2000005c 	.word	0x2000005c

08003fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_IncTick+0x20>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_IncTick+0x24>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <HAL_IncTick+0x24>)
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000060 	.word	0x20000060
 8003fec:	200002d8 	.word	0x200002d8

08003ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_GetTick+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	200002d8 	.word	0x200002d8

08004008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004010:	f7ff ffee 	bl	8003ff0 <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d005      	beq.n	800402e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_Delay+0x44>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800402e:	bf00      	nop
 8004030:	f7ff ffde 	bl	8003ff0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d8f7      	bhi.n	8004030 <HAL_Delay+0x28>
  {
  }
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000060 	.word	0x20000060

08004050 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e033      	b.n	80040ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fe3a 	bl	8003ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d118      	bne.n	80040c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004096:	f023 0302 	bic.w	r3, r3, #2
 800409a:	f043 0202 	orr.w	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa34 	bl	8004510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
 80040be:	e001      	b.n	80040c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_Start_DMA+0x1e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0ce      	b.n	8004294 <HAL_ADC_Start_DMA+0x1bc>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d018      	beq.n	800413e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800411c:	4b5f      	ldr	r3, [pc, #380]	; (800429c <HAL_ADC_Start_DMA+0x1c4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5f      	ldr	r2, [pc, #380]	; (80042a0 <HAL_ADC_Start_DMA+0x1c8>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0c9a      	lsrs	r2, r3, #18
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004130:	e002      	b.n	8004138 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3b01      	subs	r3, #1
 8004136:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f9      	bne.n	8004132 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414c:	d107      	bne.n	800415e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b01      	cmp	r3, #1
 800416a:	f040 8086 	bne.w	800427a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004198:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d106      	bne.n	80041bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f023 0206 	bic.w	r2, r3, #6
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
 80041ba:	e002      	b.n	80041c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <HAL_ADC_Start_DMA+0x1cc>)
 80041cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	4a35      	ldr	r2, [pc, #212]	; (80042a8 <HAL_ADC_Start_DMA+0x1d0>)
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	4a34      	ldr	r2, [pc, #208]	; (80042ac <HAL_ADC_Start_DMA+0x1d4>)
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	4a33      	ldr	r2, [pc, #204]	; (80042b0 <HAL_ADC_Start_DMA+0x1d8>)
 80041e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	334c      	adds	r3, #76	; 0x4c
 800421a:	4619      	mov	r1, r3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f000 fcb4 	bl	8004b8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d129      	bne.n	8004292 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	e020      	b.n	8004292 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <HAL_ADC_Start_DMA+0x1dc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d11b      	bne.n	8004292 <HAL_ADC_Start_DMA+0x1ba>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d114      	bne.n	8004292 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	e00b      	b.n	8004292 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0210 	orr.w	r2, r3, #16
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000058 	.word	0x20000058
 80042a0:	431bde83 	.word	0x431bde83
 80042a4:	40012300 	.word	0x40012300
 80042a8:	08004709 	.word	0x08004709
 80042ac:	080047c3 	.word	0x080047c3
 80042b0:	080047df 	.word	0x080047df
 80042b4:	40012000 	.word	0x40012000

080042b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x1c>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e105      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x228>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	d925      	bls.n	8004344 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68d9      	ldr	r1, [r3, #12]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	3b1e      	subs	r3, #30
 800430e:	2207      	movs	r2, #7
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43da      	mvns	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	400a      	ands	r2, r1
 800431c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68d9      	ldr	r1, [r3, #12]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	4618      	mov	r0, r3
 8004330:	4603      	mov	r3, r0
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4403      	add	r3, r0
 8004336:	3b1e      	subs	r3, #30
 8004338:	409a      	lsls	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	e022      	b.n	800438a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6919      	ldr	r1, [r3, #16]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	2207      	movs	r2, #7
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	400a      	ands	r2, r1
 8004366:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6919      	ldr	r1, [r3, #16]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	4618      	mov	r0, r3
 800437a:	4603      	mov	r3, r0
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4403      	add	r3, r0
 8004380:	409a      	lsls	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b06      	cmp	r3, #6
 8004390:	d824      	bhi.n	80043dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	3b05      	subs	r3, #5
 80043a4:	221f      	movs	r2, #31
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	400a      	ands	r2, r1
 80043b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	4618      	mov	r0, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	3b05      	subs	r3, #5
 80043ce:	fa00 f203 	lsl.w	r2, r0, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	635a      	str	r2, [r3, #52]	; 0x34
 80043da:	e04c      	b.n	8004476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d824      	bhi.n	800442e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	3b23      	subs	r3, #35	; 0x23
 80043f6:	221f      	movs	r2, #31
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43da      	mvns	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	400a      	ands	r2, r1
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	b29b      	uxth	r3, r3
 8004412:	4618      	mov	r0, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	3b23      	subs	r3, #35	; 0x23
 8004420:	fa00 f203 	lsl.w	r2, r0, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
 800442c:	e023      	b.n	8004476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	3b41      	subs	r3, #65	; 0x41
 8004440:	221f      	movs	r2, #31
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43da      	mvns	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	400a      	ands	r2, r1
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	4618      	mov	r0, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	3b41      	subs	r3, #65	; 0x41
 800446a:	fa00 f203 	lsl.w	r2, r0, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_ADC_ConfigChannel+0x234>)
 8004478:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_ADC_ConfigChannel+0x238>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d109      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x1cc>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b12      	cmp	r3, #18
 800448a:	d105      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <HAL_ADC_ConfigChannel+0x238>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d123      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x21e>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d003      	beq.n	80044b2 <HAL_ADC_ConfigChannel+0x1e6>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b11      	cmp	r3, #17
 80044b0:	d11b      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d111      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_ADC_ConfigChannel+0x23c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a10      	ldr	r2, [pc, #64]	; (800450c <HAL_ADC_ConfigChannel+0x240>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	0c9a      	lsrs	r2, r3, #18
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044dc:	e002      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f9      	bne.n	80044de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40012300 	.word	0x40012300
 8004504:	40012000 	.word	0x40012000
 8004508:	20000058 	.word	0x20000058
 800450c:	431bde83 	.word	0x431bde83

08004510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004518:	4b79      	ldr	r3, [pc, #484]	; (8004700 <ADC_Init+0x1f0>)
 800451a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	021a      	lsls	r2, r3, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6859      	ldr	r1, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6899      	ldr	r1, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	4a58      	ldr	r2, [pc, #352]	; (8004704 <ADC_Init+0x1f4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d022      	beq.n	80045ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6899      	ldr	r1, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	e00f      	b.n	800460e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800460c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0202 	bic.w	r2, r2, #2
 800461c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7e1b      	ldrb	r3, [r3, #24]
 8004628:	005a      	lsls	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01b      	beq.n	8004674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800464a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800465a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	3b01      	subs	r3, #1
 8004668:	035a      	lsls	r2, r3, #13
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	e007      	b.n	8004684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	3b01      	subs	r3, #1
 80046a0:	051a      	lsls	r2, r3, #20
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6899      	ldr	r1, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046c6:	025a      	lsls	r2, r3, #9
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	029a      	lsls	r2, r3, #10
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40012300 	.word	0x40012300
 8004704:	0f000001 	.word	0x0f000001

08004708 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800471e:	2b00      	cmp	r3, #0
 8004720:	d13c      	bne.n	800479c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d12b      	bne.n	8004794 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004740:	2b00      	cmp	r3, #0
 8004742:	d127      	bne.n	8004794 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800474e:	2b00      	cmp	r3, #0
 8004750:	d006      	beq.n	8004760 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800475c:	2b00      	cmp	r3, #0
 800475e:	d119      	bne.n	8004794 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0220 	bic.w	r2, r2, #32
 800476e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7fd fe40 	bl	800241a <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800479a:	e00e      	b.n	80047ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fd85 	bl	80042b8 <HAL_ADC_ErrorCallback>
}
 80047ae:	e004      	b.n	80047ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7fd fe2c 	bl	800242e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fd5a 	bl	80042b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004828:	4013      	ands	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483e:	4a04      	ldr	r2, [pc, #16]	; (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	60d3      	str	r3, [r2, #12]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <__NVIC_GetPriorityGrouping+0x18>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0307 	and.w	r3, r3, #7
}
 8004862:	4618      	mov	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db0b      	blt.n	800489a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	f003 021f 	and.w	r2, r3, #31
 8004888:	4907      	ldr	r1, [pc, #28]	; (80048a8 <__NVIC_EnableIRQ+0x38>)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2001      	movs	r0, #1
 8004892:	fa00 f202 	lsl.w	r2, r0, r2
 8004896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	e000e100 	.word	0xe000e100

080048ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0a      	blt.n	80048d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	490c      	ldr	r1, [pc, #48]	; (80048f8 <__NVIC_SetPriority+0x4c>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d4:	e00a      	b.n	80048ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4908      	ldr	r1, [pc, #32]	; (80048fc <__NVIC_SetPriority+0x50>)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3b04      	subs	r3, #4
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	761a      	strb	r2, [r3, #24]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	.word	0xe000e100
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf28      	it	cs
 800491e:	2304      	movcs	r3, #4
 8004920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3304      	adds	r3, #4
 8004926:	2b06      	cmp	r3, #6
 8004928:	d902      	bls.n	8004930 <NVIC_EncodePriority+0x30>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3b03      	subs	r3, #3
 800492e:	e000      	b.n	8004932 <NVIC_EncodePriority+0x32>
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	401a      	ands	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004948:	f04f 31ff 	mov.w	r1, #4294967295
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43d9      	mvns	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	4313      	orrs	r3, r2
         );
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004978:	d301      	bcc.n	800497e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497a:	2301      	movs	r3, #1
 800497c:	e00f      	b.n	800499e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <SysTick_Config+0x40>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004986:	210f      	movs	r1, #15
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	f7ff ff8e 	bl	80048ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <SysTick_Config+0x40>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004996:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <SysTick_Config+0x40>)
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	e000e010 	.word	0xe000e010

080049ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff29 	bl	800480c <__NVIC_SetPriorityGrouping>
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d4:	f7ff ff3e 	bl	8004854 <__NVIC_GetPriorityGrouping>
 80049d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f7ff ff8e 	bl	8004900 <NVIC_EncodePriority>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff5d 	bl	80048ac <__NVIC_SetPriority>
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff31 	bl	8004870 <__NVIC_EnableIRQ>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ffa2 	bl	8004968 <SysTick_Config>
 8004a24:	4603      	mov	r3, r0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a3c:	f7ff fad8 	bl	8003ff0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e099      	b.n	8004b80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a6c:	e00f      	b.n	8004a8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a6e:	f7ff fabf 	bl	8003ff0 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d908      	bls.n	8004a8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2203      	movs	r2, #3
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e078      	b.n	8004b80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e8      	bne.n	8004a6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4b38      	ldr	r3, [pc, #224]	; (8004b88 <HAL_DMA_Init+0x158>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d107      	bne.n	8004af8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	4313      	orrs	r3, r2
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d117      	bne.n	8004b52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa6f 	bl	8005018 <DMA_CheckFifoParam>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e016      	b.n	8004b80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa26 	bl	8004fac <DMA_CalcBaseAndBitshift>
 8004b60:	4603      	mov	r3, r0
 8004b62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	223f      	movs	r2, #63	; 0x3f
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	f010803f 	.word	0xf010803f

08004b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_DMA_Start_IT+0x26>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e040      	b.n	8004c34 <HAL_DMA_Start_IT+0xa8>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d12f      	bne.n	8004c26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f9b8 	bl	8004f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	223f      	movs	r2, #63	; 0x3f
 8004be6:	409a      	lsls	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0216 	orr.w	r2, r2, #22
 8004bfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e005      	b.n	8004c32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c48:	4b8e      	ldr	r3, [pc, #568]	; (8004e84 <HAL_DMA_IRQHandler+0x248>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a8e      	ldr	r2, [pc, #568]	; (8004e88 <HAL_DMA_IRQHandler+0x24c>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	0a9b      	lsrs	r3, r3, #10
 8004c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c66:	2208      	movs	r2, #8
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01a      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	2208      	movs	r2, #8
 8004c96:	409a      	lsls	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	2201      	movs	r2, #1
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d012      	beq.n	8004cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cca:	2201      	movs	r2, #1
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd6:	f043 0202 	orr.w	r2, r3, #2
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d012      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00b      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	2204      	movs	r2, #4
 8004d02:	409a      	lsls	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	f043 0204 	orr.w	r2, r3, #4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	2210      	movs	r2, #16
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d043      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03c      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	2210      	movs	r2, #16
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d024      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
 8004d6a:	e01f      	b.n	8004dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
 8004d7c:	e016      	b.n	8004dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0208 	bic.w	r2, r2, #8
 8004d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db0:	2220      	movs	r2, #32
 8004db2:	409a      	lsls	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 808f 	beq.w	8004edc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8087 	beq.w	8004edc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d136      	bne.n	8004e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0216 	bic.w	r2, r2, #22
 8004df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_DMA_IRQHandler+0x1da>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0208 	bic.w	r2, r2, #8
 8004e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	223f      	movs	r2, #63	; 0x3f
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d07e      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
        }
        return;
 8004e52:	e079      	b.n	8004f48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01d      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10d      	bne.n	8004e8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d031      	beq.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
 8004e80:	e02c      	b.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
 8004e82:	bf00      	nop
 8004e84:	20000058 	.word	0x20000058
 8004e88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d023      	beq.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
 8004e9c:	e01e      	b.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10f      	bne.n	8004ecc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0210 	bic.w	r2, r2, #16
 8004eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d032      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d022      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d307      	bcc.n	8004f24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f2      	bne.n	8004f08 <HAL_DMA_IRQHandler+0x2cc>
 8004f22:	e000      	b.n	8004f26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
 8004f46:	e000      	b.n	8004f4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f48:	bf00      	nop
    }
  }
}
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d108      	bne.n	8004f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f8e:	e007      	b.n	8004fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	60da      	str	r2, [r3, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	3b10      	subs	r3, #16
 8004fbc:	4a14      	ldr	r2, [pc, #80]	; (8005010 <DMA_CalcBaseAndBitshift+0x64>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	091b      	lsrs	r3, r3, #4
 8004fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fc6:	4a13      	ldr	r2, [pc, #76]	; (8005014 <DMA_CalcBaseAndBitshift+0x68>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d909      	bls.n	8004fee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	1d1a      	adds	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	659a      	str	r2, [r3, #88]	; 0x58
 8004fec:	e007      	b.n	8004ffe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	aaaaaaab 	.word	0xaaaaaaab
 8005014:	08022fa0 	.word	0x08022fa0

08005018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11f      	bne.n	8005072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d856      	bhi.n	80050e6 <DMA_CheckFifoParam+0xce>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <DMA_CheckFifoParam+0x28>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005051 	.word	0x08005051
 8005044:	08005063 	.word	0x08005063
 8005048:	08005051 	.word	0x08005051
 800504c:	080050e7 	.word	0x080050e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d046      	beq.n	80050ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005060:	e043      	b.n	80050ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800506a:	d140      	bne.n	80050ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005070:	e03d      	b.n	80050ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507a:	d121      	bne.n	80050c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d837      	bhi.n	80050f2 <DMA_CheckFifoParam+0xda>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <DMA_CheckFifoParam+0x70>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	08005099 	.word	0x08005099
 800508c:	0800509f 	.word	0x0800509f
 8005090:	08005099 	.word	0x08005099
 8005094:	080050b1 	.word	0x080050b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e030      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d025      	beq.n	80050f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ae:	e022      	b.n	80050f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050b8:	d11f      	bne.n	80050fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050be:	e01c      	b.n	80050fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d903      	bls.n	80050ce <DMA_CheckFifoParam+0xb6>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d003      	beq.n	80050d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050cc:	e018      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      break;
 80050d2:	e015      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e00b      	b.n	80050fe <DMA_CheckFifoParam+0xe6>
      break;
 80050e6:	bf00      	nop
 80050e8:	e00a      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050ea:	bf00      	nop
 80050ec:	e008      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
 80050f0:	e006      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050f2:	bf00      	nop
 80050f4:	e004      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050f6:	bf00      	nop
 80050f8:	e002      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;   
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050fe:	bf00      	nop
    }
  } 
  
  return status; 
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	e159      	b.n	80053e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800512c:	2201      	movs	r2, #1
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4013      	ands	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	429a      	cmp	r2, r3
 8005146:	f040 8148 	bne.w	80053da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d005      	beq.n	8005162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800515e:	2b02      	cmp	r3, #2
 8005160:	d130      	bne.n	80051c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	2203      	movs	r2, #3
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005198:	2201      	movs	r2, #1
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4013      	ands	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 0201 	and.w	r2, r3, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d017      	beq.n	8005200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	2203      	movs	r2, #3
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d123      	bne.n	8005254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	08da      	lsrs	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3208      	adds	r2, #8
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	220f      	movs	r2, #15
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	08da      	lsrs	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3208      	adds	r2, #8
 800524e:	69b9      	ldr	r1, [r7, #24]
 8005250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	2203      	movs	r2, #3
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4013      	ands	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0203 	and.w	r2, r3, #3
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80a2 	beq.w	80053da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <HAL_GPIO_Init+0x2e8>)
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <HAL_GPIO_Init+0x2e8>)
 80052a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a4:	6453      	str	r3, [r2, #68]	; 0x44
 80052a6:	4b54      	ldr	r3, [pc, #336]	; (80053f8 <HAL_GPIO_Init+0x2e8>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052b2:	4a52      	ldr	r2, [pc, #328]	; (80053fc <HAL_GPIO_Init+0x2ec>)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	3302      	adds	r3, #2
 80052ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	220f      	movs	r2, #15
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a49      	ldr	r2, [pc, #292]	; (8005400 <HAL_GPIO_Init+0x2f0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d019      	beq.n	8005312 <HAL_GPIO_Init+0x202>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a48      	ldr	r2, [pc, #288]	; (8005404 <HAL_GPIO_Init+0x2f4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_GPIO_Init+0x1fe>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a47      	ldr	r2, [pc, #284]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00d      	beq.n	800530a <HAL_GPIO_Init+0x1fa>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a46      	ldr	r2, [pc, #280]	; (800540c <HAL_GPIO_Init+0x2fc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <HAL_GPIO_Init+0x1f6>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a45      	ldr	r2, [pc, #276]	; (8005410 <HAL_GPIO_Init+0x300>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_GPIO_Init+0x1f2>
 80052fe:	2304      	movs	r3, #4
 8005300:	e008      	b.n	8005314 <HAL_GPIO_Init+0x204>
 8005302:	2307      	movs	r3, #7
 8005304:	e006      	b.n	8005314 <HAL_GPIO_Init+0x204>
 8005306:	2303      	movs	r3, #3
 8005308:	e004      	b.n	8005314 <HAL_GPIO_Init+0x204>
 800530a:	2302      	movs	r3, #2
 800530c:	e002      	b.n	8005314 <HAL_GPIO_Init+0x204>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_GPIO_Init+0x204>
 8005312:	2300      	movs	r3, #0
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	f002 0203 	and.w	r2, r2, #3
 800531a:	0092      	lsls	r2, r2, #2
 800531c:	4093      	lsls	r3, r2
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005324:	4935      	ldr	r1, [pc, #212]	; (80053fc <HAL_GPIO_Init+0x2ec>)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	3302      	adds	r3, #2
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005332:	4b38      	ldr	r3, [pc, #224]	; (8005414 <HAL_GPIO_Init+0x304>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005356:	4a2f      	ldr	r2, [pc, #188]	; (8005414 <HAL_GPIO_Init+0x304>)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_GPIO_Init+0x304>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	43db      	mvns	r3, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4013      	ands	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005380:	4a24      	ldr	r2, [pc, #144]	; (8005414 <HAL_GPIO_Init+0x304>)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005386:	4b23      	ldr	r3, [pc, #140]	; (8005414 <HAL_GPIO_Init+0x304>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053aa:	4a1a      	ldr	r2, [pc, #104]	; (8005414 <HAL_GPIO_Init+0x304>)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053b0:	4b18      	ldr	r3, [pc, #96]	; (8005414 <HAL_GPIO_Init+0x304>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053d4:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <HAL_GPIO_Init+0x304>)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3301      	adds	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b0f      	cmp	r3, #15
 80053e4:	f67f aea2 	bls.w	800512c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	3724      	adds	r7, #36	; 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40013800 	.word	0x40013800
 8005400:	40020000 	.word	0x40020000
 8005404:	40020400 	.word	0x40020400
 8005408:	40020800 	.word	0x40020800
 800540c:	40020c00 	.word	0x40020c00
 8005410:	40021000 	.word	0x40021000
 8005414:	40013c00 	.word	0x40013c00

08005418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
 8005424:	4613      	mov	r3, r2
 8005426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005434:	e003      	b.n	800543e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005436:	887b      	ldrh	r3, [r7, #2]
 8005438:	041a      	lsls	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	619a      	str	r2, [r3, #24]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e267      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d075      	beq.n	8005556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800546a:	4b88      	ldr	r3, [pc, #544]	; (800568c <HAL_RCC_OscConfig+0x240>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b04      	cmp	r3, #4
 8005474:	d00c      	beq.n	8005490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005476:	4b85      	ldr	r3, [pc, #532]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800547e:	2b08      	cmp	r3, #8
 8005480:	d112      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005482:	4b82      	ldr	r3, [pc, #520]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548e:	d10b      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	4b7e      	ldr	r3, [pc, #504]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05b      	beq.n	8005554 <HAL_RCC_OscConfig+0x108>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d157      	bne.n	8005554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e242      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b0:	d106      	bne.n	80054c0 <HAL_RCC_OscConfig+0x74>
 80054b2:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a75      	ldr	r2, [pc, #468]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e01d      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x98>
 80054ca:	4b70      	ldr	r3, [pc, #448]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a6f      	ldr	r2, [pc, #444]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4b6d      	ldr	r3, [pc, #436]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6c      	ldr	r2, [pc, #432]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e00b      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054e4:	4b69      	ldr	r3, [pc, #420]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a68      	ldr	r2, [pc, #416]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	4b66      	ldr	r3, [pc, #408]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a65      	ldr	r2, [pc, #404]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80054f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fe fd74 	bl	8003ff0 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f7fe fd70 	bl	8003ff0 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e207      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	4b5b      	ldr	r3, [pc, #364]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0xc0>
 800552a:	e014      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fe fd60 	bl	8003ff0 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005534:	f7fe fd5c 	bl	8003ff0 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e1f3      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	4b51      	ldr	r3, [pc, #324]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0xe8>
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d063      	beq.n	800562a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005562:	4b4a      	ldr	r3, [pc, #296]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005576:	2b08      	cmp	r3, #8
 8005578:	d11c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCC_OscConfig+0x240>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e1c7      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4937      	ldr	r1, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	e03a      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055bc:	4b34      	ldr	r3, [pc, #208]	; (8005690 <HAL_RCC_OscConfig+0x244>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fe fd15 	bl	8003ff0 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ca:	f7fe fd11 	bl	8003ff0 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e1a8      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4925      	ldr	r1, [pc, #148]	; (800568c <HAL_RCC_OscConfig+0x240>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_OscConfig+0x244>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fe fcf4 	bl	8003ff0 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560c:	f7fe fcf0 	bl	8003ff0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e187      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	4b1b      	ldr	r3, [pc, #108]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d036      	beq.n	80056a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <HAL_RCC_OscConfig+0x248>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fe fcd4 	bl	8003ff0 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564c:	f7fe fcd0 	bl	8003ff0 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e167      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCC_OscConfig+0x240>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x200>
 800566a:	e01b      	b.n	80056a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <HAL_RCC_OscConfig+0x248>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005672:	f7fe fcbd 	bl	8003ff0 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005678:	e00e      	b.n	8005698 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567a:	f7fe fcb9 	bl	8003ff0 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d907      	bls.n	8005698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e150      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
 800568c:	40023800 	.word	0x40023800
 8005690:	42470000 	.word	0x42470000
 8005694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	4b88      	ldr	r3, [pc, #544]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ea      	bne.n	800567a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8097 	beq.w	80057e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b6:	4b81      	ldr	r3, [pc, #516]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	4b7d      	ldr	r3, [pc, #500]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	4a7c      	ldr	r2, [pc, #496]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6413      	str	r3, [r2, #64]	; 0x40
 80056d2:	4b7a      	ldr	r3, [pc, #488]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b77      	ldr	r3, [pc, #476]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d118      	bne.n	8005720 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ee:	4b74      	ldr	r3, [pc, #464]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a73      	ldr	r2, [pc, #460]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fa:	f7fe fc79 	bl	8003ff0 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005702:	f7fe fc75 	bl	8003ff0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e10c      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	4b6a      	ldr	r3, [pc, #424]	; (80058c0 <HAL_RCC_OscConfig+0x474>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x2ea>
 8005728:	4b64      	ldr	r3, [pc, #400]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	4a63      	ldr	r2, [pc, #396]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6713      	str	r3, [r2, #112]	; 0x70
 8005734:	e01c      	b.n	8005770 <HAL_RCC_OscConfig+0x324>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b05      	cmp	r3, #5
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x30c>
 800573e:	4b5f      	ldr	r3, [pc, #380]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a5e      	ldr	r2, [pc, #376]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005744:	f043 0304 	orr.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
 800574a:	4b5c      	ldr	r3, [pc, #368]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a5b      	ldr	r2, [pc, #364]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6713      	str	r3, [r2, #112]	; 0x70
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0x324>
 8005758:	4b58      	ldr	r3, [pc, #352]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a57      	ldr	r2, [pc, #348]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	4b55      	ldr	r3, [pc, #340]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a54      	ldr	r2, [pc, #336]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 800576a:	f023 0304 	bic.w	r3, r3, #4
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fe fc3a 	bl	8003ff0 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577e:	e00a      	b.n	8005796 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005780:	f7fe fc36 	bl	8003ff0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0cb      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005796:	4b49      	ldr	r3, [pc, #292]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ee      	beq.n	8005780 <HAL_RCC_OscConfig+0x334>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a4:	f7fe fc24 	bl	8003ff0 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ac:	f7fe fc20 	bl	8003ff0 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0b5      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c2:	4b3e      	ldr	r3, [pc, #248]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ee      	bne.n	80057ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d105      	bne.n	80057e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d4:	4b39      	ldr	r3, [pc, #228]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	4a38      	ldr	r2, [pc, #224]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a1 	beq.w	800592c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ea:	4b34      	ldr	r3, [pc, #208]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d05c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d141      	bne.n	8005882 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fe:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005804:	f7fe fbf4 	bl	8003ff0 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800580c:	f7fe fbf0 	bl	8003ff0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e087      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	4b27      	ldr	r3, [pc, #156]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	019b      	lsls	r3, r3, #6
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	3b01      	subs	r3, #1
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	491b      	ldr	r1, [pc, #108]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005854:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fe fbc9 	bl	8003ff0 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005862:	f7fe fbc5 	bl	8003ff0 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e05c      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x416>
 8005880:	e054      	b.n	800592c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fe fbb2 	bl	8003ff0 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005890:	f7fe fbae 	bl	8003ff0 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e045      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_RCC_OscConfig+0x470>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x444>
 80058ae:	e03d      	b.n	800592c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d107      	bne.n	80058c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e038      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40007000 	.word	0x40007000
 80058c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c8:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <HAL_RCC_OscConfig+0x4ec>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d028      	beq.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d121      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d11a      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005900:	4293      	cmp	r3, r2
 8005902:	d111      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	3b01      	subs	r3, #1
 8005912:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d107      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d001      	beq.n	800592c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800

0800593c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0cc      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005950:	4b68      	ldr	r3, [pc, #416]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d90c      	bls.n	8005978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b63      	ldr	r3, [pc, #396]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0b8      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005990:	4b59      	ldr	r3, [pc, #356]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	4a58      	ldr	r2, [pc, #352]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800599a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059a8:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4a52      	ldr	r2, [pc, #328]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b4:	4b50      	ldr	r3, [pc, #320]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	494d      	ldr	r1, [pc, #308]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d044      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b47      	ldr	r3, [pc, #284]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d119      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e07f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d003      	beq.n	80059fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fa:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e06f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0a:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e067      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a1a:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4934      	ldr	r1, [pc, #208]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a2c:	f7fe fae0 	bl	8003ff0 <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a34:	f7fe fadc 	bl	8003ff0 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e04f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 020c 	and.w	r2, r3, #12
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1eb      	bne.n	8005a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d20c      	bcs.n	8005a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e032      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a90:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4916      	ldr	r1, [pc, #88]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	490e      	ldr	r1, [pc, #56]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ac2:	f000 f821 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	490a      	ldr	r1, [pc, #40]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005ad4:	5ccb      	ldrb	r3, [r1, r3]
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe fa40 	bl	8003f68 <HAL_InitTick>

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023c00 	.word	0x40023c00
 8005af8:	40023800 	.word	0x40023800
 8005afc:	08022f90 	.word	0x08022f90
 8005b00:	20000058 	.word	0x20000058
 8005b04:	2000005c 	.word	0x2000005c

08005b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b0c:	b090      	sub	sp, #64	; 0x40
 8005b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
 8005b14:	2300      	movs	r3, #0
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b18:	2300      	movs	r3, #0
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b20:	4b59      	ldr	r3, [pc, #356]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d00d      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x40>
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	f200 80a1 	bhi.w	8005c74 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x34>
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d003      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b3a:	e09b      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b3c:	4b53      	ldr	r3, [pc, #332]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005b40:	e09b      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b42:	4b53      	ldr	r3, [pc, #332]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b46:	e098      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b48:	4b4f      	ldr	r3, [pc, #316]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b52:	4b4d      	ldr	r3, [pc, #308]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d028      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5e:	4b4a      	ldr	r3, [pc, #296]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	099b      	lsrs	r3, r3, #6
 8005b64:	2200      	movs	r2, #0
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	627a      	str	r2, [r7, #36]	; 0x24
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b70:	2100      	movs	r1, #0
 8005b72:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b74:	fb03 f201 	mul.w	r2, r3, r1
 8005b78:	2300      	movs	r3, #0
 8005b7a:	fb00 f303 	mul.w	r3, r0, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	4a43      	ldr	r2, [pc, #268]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b82:	fba0 1202 	umull	r1, r2, r0, r2
 8005b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b88:	460a      	mov	r2, r1
 8005b8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8e:	4413      	add	r3, r2
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	2200      	movs	r2, #0
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	61fa      	str	r2, [r7, #28]
 8005b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ba2:	f7fa fea3 	bl	80008ec <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4613      	mov	r3, r2
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bae:	e053      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb0:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	617a      	str	r2, [r7, #20]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005bc2:	f04f 0b00 	mov.w	fp, #0
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	465b      	mov	r3, fp
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	0159      	lsls	r1, r3, #5
 8005bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd8:	0150      	lsls	r0, r2, #5
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	ebb2 080a 	subs.w	r8, r2, sl
 8005be2:	eb63 090b 	sbc.w	r9, r3, fp
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005bf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005bf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bfa:	ebb2 0408 	subs.w	r4, r2, r8
 8005bfe:	eb63 0509 	sbc.w	r5, r3, r9
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	00eb      	lsls	r3, r5, #3
 8005c0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c10:	00e2      	lsls	r2, r4, #3
 8005c12:	4614      	mov	r4, r2
 8005c14:	461d      	mov	r5, r3
 8005c16:	eb14 030a 	adds.w	r3, r4, sl
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	eb45 030b 	adc.w	r3, r5, fp
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c2e:	4629      	mov	r1, r5
 8005c30:	028b      	lsls	r3, r1, #10
 8005c32:	4621      	mov	r1, r4
 8005c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c38:	4621      	mov	r1, r4
 8005c3a:	028a      	lsls	r2, r1, #10
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	2200      	movs	r2, #0
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	60fa      	str	r2, [r7, #12]
 8005c48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c4c:	f7fa fe4e 	bl	80008ec <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4613      	mov	r3, r2
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	3301      	adds	r3, #1
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c72:	e002      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8005c76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3740      	adds	r7, #64	; 0x40
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	00f42400 	.word	0x00f42400
 8005c90:	017d7840 	.word	0x017d7840

08005c94 <__errno>:
 8005c94:	4b01      	ldr	r3, [pc, #4]	; (8005c9c <__errno+0x8>)
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20000064 	.word	0x20000064

08005ca0 <__libc_init_array>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	4d0d      	ldr	r5, [pc, #52]	; (8005cd8 <__libc_init_array+0x38>)
 8005ca4:	4c0d      	ldr	r4, [pc, #52]	; (8005cdc <__libc_init_array+0x3c>)
 8005ca6:	1b64      	subs	r4, r4, r5
 8005ca8:	10a4      	asrs	r4, r4, #2
 8005caa:	2600      	movs	r6, #0
 8005cac:	42a6      	cmp	r6, r4
 8005cae:	d109      	bne.n	8005cc4 <__libc_init_array+0x24>
 8005cb0:	4d0b      	ldr	r5, [pc, #44]	; (8005ce0 <__libc_init_array+0x40>)
 8005cb2:	4c0c      	ldr	r4, [pc, #48]	; (8005ce4 <__libc_init_array+0x44>)
 8005cb4:	f000 fc8e 	bl	80065d4 <_init>
 8005cb8:	1b64      	subs	r4, r4, r5
 8005cba:	10a4      	asrs	r4, r4, #2
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	42a6      	cmp	r6, r4
 8005cc0:	d105      	bne.n	8005cce <__libc_init_array+0x2e>
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc8:	4798      	blx	r3
 8005cca:	3601      	adds	r6, #1
 8005ccc:	e7ee      	b.n	8005cac <__libc_init_array+0xc>
 8005cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd2:	4798      	blx	r3
 8005cd4:	3601      	adds	r6, #1
 8005cd6:	e7f2      	b.n	8005cbe <__libc_init_array+0x1e>
 8005cd8:	08022fe4 	.word	0x08022fe4
 8005cdc:	08022fe4 	.word	0x08022fe4
 8005ce0:	08022fe4 	.word	0x08022fe4
 8005ce4:	08022fe8 	.word	0x08022fe8

08005ce8 <memset>:
 8005ce8:	4402      	add	r2, r0
 8005cea:	4603      	mov	r3, r0
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d100      	bne.n	8005cf2 <memset+0xa>
 8005cf0:	4770      	bx	lr
 8005cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf6:	e7f9      	b.n	8005cec <memset+0x4>

08005cf8 <siprintf>:
 8005cf8:	b40e      	push	{r1, r2, r3}
 8005cfa:	b500      	push	{lr}
 8005cfc:	b09c      	sub	sp, #112	; 0x70
 8005cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8005d00:	9002      	str	r0, [sp, #8]
 8005d02:	9006      	str	r0, [sp, #24]
 8005d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d08:	4809      	ldr	r0, [pc, #36]	; (8005d30 <siprintf+0x38>)
 8005d0a:	9107      	str	r1, [sp, #28]
 8005d0c:	9104      	str	r1, [sp, #16]
 8005d0e:	4909      	ldr	r1, [pc, #36]	; (8005d34 <siprintf+0x3c>)
 8005d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d14:	9105      	str	r1, [sp, #20]
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	a902      	add	r1, sp, #8
 8005d1c:	f000 f868 	bl	8005df0 <_svfiprintf_r>
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	b01c      	add	sp, #112	; 0x70
 8005d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d2c:	b003      	add	sp, #12
 8005d2e:	4770      	bx	lr
 8005d30:	20000064 	.word	0x20000064
 8005d34:	ffff0208 	.word	0xffff0208

08005d38 <__ssputs_r>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	688e      	ldr	r6, [r1, #8]
 8005d3e:	429e      	cmp	r6, r3
 8005d40:	4682      	mov	sl, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	4690      	mov	r8, r2
 8005d46:	461f      	mov	r7, r3
 8005d48:	d838      	bhi.n	8005dbc <__ssputs_r+0x84>
 8005d4a:	898a      	ldrh	r2, [r1, #12]
 8005d4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d50:	d032      	beq.n	8005db8 <__ssputs_r+0x80>
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	6909      	ldr	r1, [r1, #16]
 8005d56:	eba5 0901 	sub.w	r9, r5, r1
 8005d5a:	6965      	ldr	r5, [r4, #20]
 8005d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d64:	3301      	adds	r3, #1
 8005d66:	444b      	add	r3, r9
 8005d68:	106d      	asrs	r5, r5, #1
 8005d6a:	429d      	cmp	r5, r3
 8005d6c:	bf38      	it	cc
 8005d6e:	461d      	movcc	r5, r3
 8005d70:	0553      	lsls	r3, r2, #21
 8005d72:	d531      	bpl.n	8005dd8 <__ssputs_r+0xa0>
 8005d74:	4629      	mov	r1, r5
 8005d76:	f000 fb63 	bl	8006440 <_malloc_r>
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	b950      	cbnz	r0, 8005d94 <__ssputs_r+0x5c>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	f8ca 3000 	str.w	r3, [sl]
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	6921      	ldr	r1, [r4, #16]
 8005d96:	464a      	mov	r2, r9
 8005d98:	f000 fabe 	bl	8006318 <memcpy>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	6126      	str	r6, [r4, #16]
 8005daa:	6165      	str	r5, [r4, #20]
 8005dac:	444e      	add	r6, r9
 8005dae:	eba5 0509 	sub.w	r5, r5, r9
 8005db2:	6026      	str	r6, [r4, #0]
 8005db4:	60a5      	str	r5, [r4, #8]
 8005db6:	463e      	mov	r6, r7
 8005db8:	42be      	cmp	r6, r7
 8005dba:	d900      	bls.n	8005dbe <__ssputs_r+0x86>
 8005dbc:	463e      	mov	r6, r7
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	f000 fab6 	bl	8006334 <memmove>
 8005dc8:	68a3      	ldr	r3, [r4, #8]
 8005dca:	1b9b      	subs	r3, r3, r6
 8005dcc:	60a3      	str	r3, [r4, #8]
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	4433      	add	r3, r6
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	e7db      	b.n	8005d90 <__ssputs_r+0x58>
 8005dd8:	462a      	mov	r2, r5
 8005dda:	f000 fba5 	bl	8006528 <_realloc_r>
 8005dde:	4606      	mov	r6, r0
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d1e1      	bne.n	8005da8 <__ssputs_r+0x70>
 8005de4:	6921      	ldr	r1, [r4, #16]
 8005de6:	4650      	mov	r0, sl
 8005de8:	f000 fabe 	bl	8006368 <_free_r>
 8005dec:	e7c7      	b.n	8005d7e <__ssputs_r+0x46>
	...

08005df0 <_svfiprintf_r>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	4698      	mov	r8, r3
 8005df6:	898b      	ldrh	r3, [r1, #12]
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	b09d      	sub	sp, #116	; 0x74
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	4614      	mov	r4, r2
 8005e02:	d50e      	bpl.n	8005e22 <_svfiprintf_r+0x32>
 8005e04:	690b      	ldr	r3, [r1, #16]
 8005e06:	b963      	cbnz	r3, 8005e22 <_svfiprintf_r+0x32>
 8005e08:	2140      	movs	r1, #64	; 0x40
 8005e0a:	f000 fb19 	bl	8006440 <_malloc_r>
 8005e0e:	6028      	str	r0, [r5, #0]
 8005e10:	6128      	str	r0, [r5, #16]
 8005e12:	b920      	cbnz	r0, 8005e1e <_svfiprintf_r+0x2e>
 8005e14:	230c      	movs	r3, #12
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1c:	e0d1      	b.n	8005fc2 <_svfiprintf_r+0x1d2>
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	616b      	str	r3, [r5, #20]
 8005e22:	2300      	movs	r3, #0
 8005e24:	9309      	str	r3, [sp, #36]	; 0x24
 8005e26:	2320      	movs	r3, #32
 8005e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e30:	2330      	movs	r3, #48	; 0x30
 8005e32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fdc <_svfiprintf_r+0x1ec>
 8005e36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e3a:	f04f 0901 	mov.w	r9, #1
 8005e3e:	4623      	mov	r3, r4
 8005e40:	469a      	mov	sl, r3
 8005e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e46:	b10a      	cbz	r2, 8005e4c <_svfiprintf_r+0x5c>
 8005e48:	2a25      	cmp	r2, #37	; 0x25
 8005e4a:	d1f9      	bne.n	8005e40 <_svfiprintf_r+0x50>
 8005e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e50:	d00b      	beq.n	8005e6a <_svfiprintf_r+0x7a>
 8005e52:	465b      	mov	r3, fp
 8005e54:	4622      	mov	r2, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff ff6d 	bl	8005d38 <__ssputs_r>
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f000 80aa 	beq.w	8005fb8 <_svfiprintf_r+0x1c8>
 8005e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e66:	445a      	add	r2, fp
 8005e68:	9209      	str	r2, [sp, #36]	; 0x24
 8005e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80a2 	beq.w	8005fb8 <_svfiprintf_r+0x1c8>
 8005e74:	2300      	movs	r3, #0
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e7e:	f10a 0a01 	add.w	sl, sl, #1
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	9307      	str	r3, [sp, #28]
 8005e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e8c:	4654      	mov	r4, sl
 8005e8e:	2205      	movs	r2, #5
 8005e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e94:	4851      	ldr	r0, [pc, #324]	; (8005fdc <_svfiprintf_r+0x1ec>)
 8005e96:	f7fa f9ab 	bl	80001f0 <memchr>
 8005e9a:	9a04      	ldr	r2, [sp, #16]
 8005e9c:	b9d8      	cbnz	r0, 8005ed6 <_svfiprintf_r+0xe6>
 8005e9e:	06d0      	lsls	r0, r2, #27
 8005ea0:	bf44      	itt	mi
 8005ea2:	2320      	movmi	r3, #32
 8005ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea8:	0711      	lsls	r1, r2, #28
 8005eaa:	bf44      	itt	mi
 8005eac:	232b      	movmi	r3, #43	; 0x2b
 8005eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb8:	d015      	beq.n	8005ee6 <_svfiprintf_r+0xf6>
 8005eba:	9a07      	ldr	r2, [sp, #28]
 8005ebc:	4654      	mov	r4, sl
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f04f 0c0a 	mov.w	ip, #10
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eca:	3b30      	subs	r3, #48	; 0x30
 8005ecc:	2b09      	cmp	r3, #9
 8005ece:	d94e      	bls.n	8005f6e <_svfiprintf_r+0x17e>
 8005ed0:	b1b0      	cbz	r0, 8005f00 <_svfiprintf_r+0x110>
 8005ed2:	9207      	str	r2, [sp, #28]
 8005ed4:	e014      	b.n	8005f00 <_svfiprintf_r+0x110>
 8005ed6:	eba0 0308 	sub.w	r3, r0, r8
 8005eda:	fa09 f303 	lsl.w	r3, r9, r3
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	46a2      	mov	sl, r4
 8005ee4:	e7d2      	b.n	8005e8c <_svfiprintf_r+0x9c>
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	1d19      	adds	r1, r3, #4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	9103      	str	r1, [sp, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bfbb      	ittet	lt
 8005ef2:	425b      	neglt	r3, r3
 8005ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef8:	9307      	strge	r3, [sp, #28]
 8005efa:	9307      	strlt	r3, [sp, #28]
 8005efc:	bfb8      	it	lt
 8005efe:	9204      	strlt	r2, [sp, #16]
 8005f00:	7823      	ldrb	r3, [r4, #0]
 8005f02:	2b2e      	cmp	r3, #46	; 0x2e
 8005f04:	d10c      	bne.n	8005f20 <_svfiprintf_r+0x130>
 8005f06:	7863      	ldrb	r3, [r4, #1]
 8005f08:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0a:	d135      	bne.n	8005f78 <_svfiprintf_r+0x188>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	1d1a      	adds	r2, r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	9203      	str	r2, [sp, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfb8      	it	lt
 8005f18:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f1c:	3402      	adds	r4, #2
 8005f1e:	9305      	str	r3, [sp, #20]
 8005f20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fec <_svfiprintf_r+0x1fc>
 8005f24:	7821      	ldrb	r1, [r4, #0]
 8005f26:	2203      	movs	r2, #3
 8005f28:	4650      	mov	r0, sl
 8005f2a:	f7fa f961 	bl	80001f0 <memchr>
 8005f2e:	b140      	cbz	r0, 8005f42 <_svfiprintf_r+0x152>
 8005f30:	2340      	movs	r3, #64	; 0x40
 8005f32:	eba0 000a 	sub.w	r0, r0, sl
 8005f36:	fa03 f000 	lsl.w	r0, r3, r0
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	4303      	orrs	r3, r0
 8005f3e:	3401      	adds	r4, #1
 8005f40:	9304      	str	r3, [sp, #16]
 8005f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f46:	4826      	ldr	r0, [pc, #152]	; (8005fe0 <_svfiprintf_r+0x1f0>)
 8005f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f4c:	2206      	movs	r2, #6
 8005f4e:	f7fa f94f 	bl	80001f0 <memchr>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d038      	beq.n	8005fc8 <_svfiprintf_r+0x1d8>
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <_svfiprintf_r+0x1f4>)
 8005f58:	bb1b      	cbnz	r3, 8005fa2 <_svfiprintf_r+0x1b2>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	3307      	adds	r3, #7
 8005f5e:	f023 0307 	bic.w	r3, r3, #7
 8005f62:	3308      	adds	r3, #8
 8005f64:	9303      	str	r3, [sp, #12]
 8005f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f68:	4433      	add	r3, r6
 8005f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f6c:	e767      	b.n	8005e3e <_svfiprintf_r+0x4e>
 8005f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f72:	460c      	mov	r4, r1
 8005f74:	2001      	movs	r0, #1
 8005f76:	e7a5      	b.n	8005ec4 <_svfiprintf_r+0xd4>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	3401      	adds	r4, #1
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f04f 0c0a 	mov.w	ip, #10
 8005f84:	4620      	mov	r0, r4
 8005f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f8a:	3a30      	subs	r2, #48	; 0x30
 8005f8c:	2a09      	cmp	r2, #9
 8005f8e:	d903      	bls.n	8005f98 <_svfiprintf_r+0x1a8>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0c5      	beq.n	8005f20 <_svfiprintf_r+0x130>
 8005f94:	9105      	str	r1, [sp, #20]
 8005f96:	e7c3      	b.n	8005f20 <_svfiprintf_r+0x130>
 8005f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7f0      	b.n	8005f84 <_svfiprintf_r+0x194>
 8005fa2:	ab03      	add	r3, sp, #12
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	462a      	mov	r2, r5
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <_svfiprintf_r+0x1f8>)
 8005faa:	a904      	add	r1, sp, #16
 8005fac:	4638      	mov	r0, r7
 8005fae:	f3af 8000 	nop.w
 8005fb2:	1c42      	adds	r2, r0, #1
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	d1d6      	bne.n	8005f66 <_svfiprintf_r+0x176>
 8005fb8:	89ab      	ldrh	r3, [r5, #12]
 8005fba:	065b      	lsls	r3, r3, #25
 8005fbc:	f53f af2c 	bmi.w	8005e18 <_svfiprintf_r+0x28>
 8005fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fc2:	b01d      	add	sp, #116	; 0x74
 8005fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc8:	ab03      	add	r3, sp, #12
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	462a      	mov	r2, r5
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <_svfiprintf_r+0x1f8>)
 8005fd0:	a904      	add	r1, sp, #16
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f000 f87a 	bl	80060cc <_printf_i>
 8005fd8:	e7eb      	b.n	8005fb2 <_svfiprintf_r+0x1c2>
 8005fda:	bf00      	nop
 8005fdc:	08022fa8 	.word	0x08022fa8
 8005fe0:	08022fb2 	.word	0x08022fb2
 8005fe4:	00000000 	.word	0x00000000
 8005fe8:	08005d39 	.word	0x08005d39
 8005fec:	08022fae 	.word	0x08022fae

08005ff0 <_printf_common>:
 8005ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff4:	4616      	mov	r6, r2
 8005ff6:	4699      	mov	r9, r3
 8005ff8:	688a      	ldr	r2, [r1, #8]
 8005ffa:	690b      	ldr	r3, [r1, #16]
 8005ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006000:	4293      	cmp	r3, r2
 8006002:	bfb8      	it	lt
 8006004:	4613      	movlt	r3, r2
 8006006:	6033      	str	r3, [r6, #0]
 8006008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800600c:	4607      	mov	r7, r0
 800600e:	460c      	mov	r4, r1
 8006010:	b10a      	cbz	r2, 8006016 <_printf_common+0x26>
 8006012:	3301      	adds	r3, #1
 8006014:	6033      	str	r3, [r6, #0]
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	0699      	lsls	r1, r3, #26
 800601a:	bf42      	ittt	mi
 800601c:	6833      	ldrmi	r3, [r6, #0]
 800601e:	3302      	addmi	r3, #2
 8006020:	6033      	strmi	r3, [r6, #0]
 8006022:	6825      	ldr	r5, [r4, #0]
 8006024:	f015 0506 	ands.w	r5, r5, #6
 8006028:	d106      	bne.n	8006038 <_printf_common+0x48>
 800602a:	f104 0a19 	add.w	sl, r4, #25
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	6832      	ldr	r2, [r6, #0]
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	42ab      	cmp	r3, r5
 8006036:	dc26      	bgt.n	8006086 <_printf_common+0x96>
 8006038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800603c:	1e13      	subs	r3, r2, #0
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	bf18      	it	ne
 8006042:	2301      	movne	r3, #1
 8006044:	0692      	lsls	r2, r2, #26
 8006046:	d42b      	bmi.n	80060a0 <_printf_common+0xb0>
 8006048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800604c:	4649      	mov	r1, r9
 800604e:	4638      	mov	r0, r7
 8006050:	47c0      	blx	r8
 8006052:	3001      	adds	r0, #1
 8006054:	d01e      	beq.n	8006094 <_printf_common+0xa4>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	68e5      	ldr	r5, [r4, #12]
 800605a:	6832      	ldr	r2, [r6, #0]
 800605c:	f003 0306 	and.w	r3, r3, #6
 8006060:	2b04      	cmp	r3, #4
 8006062:	bf08      	it	eq
 8006064:	1aad      	subeq	r5, r5, r2
 8006066:	68a3      	ldr	r3, [r4, #8]
 8006068:	6922      	ldr	r2, [r4, #16]
 800606a:	bf0c      	ite	eq
 800606c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006070:	2500      	movne	r5, #0
 8006072:	4293      	cmp	r3, r2
 8006074:	bfc4      	itt	gt
 8006076:	1a9b      	subgt	r3, r3, r2
 8006078:	18ed      	addgt	r5, r5, r3
 800607a:	2600      	movs	r6, #0
 800607c:	341a      	adds	r4, #26
 800607e:	42b5      	cmp	r5, r6
 8006080:	d11a      	bne.n	80060b8 <_printf_common+0xc8>
 8006082:	2000      	movs	r0, #0
 8006084:	e008      	b.n	8006098 <_printf_common+0xa8>
 8006086:	2301      	movs	r3, #1
 8006088:	4652      	mov	r2, sl
 800608a:	4649      	mov	r1, r9
 800608c:	4638      	mov	r0, r7
 800608e:	47c0      	blx	r8
 8006090:	3001      	adds	r0, #1
 8006092:	d103      	bne.n	800609c <_printf_common+0xac>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609c:	3501      	adds	r5, #1
 800609e:	e7c6      	b.n	800602e <_printf_common+0x3e>
 80060a0:	18e1      	adds	r1, r4, r3
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	2030      	movs	r0, #48	; 0x30
 80060a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060aa:	4422      	add	r2, r4
 80060ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060b4:	3302      	adds	r3, #2
 80060b6:	e7c7      	b.n	8006048 <_printf_common+0x58>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4622      	mov	r2, r4
 80060bc:	4649      	mov	r1, r9
 80060be:	4638      	mov	r0, r7
 80060c0:	47c0      	blx	r8
 80060c2:	3001      	adds	r0, #1
 80060c4:	d0e6      	beq.n	8006094 <_printf_common+0xa4>
 80060c6:	3601      	adds	r6, #1
 80060c8:	e7d9      	b.n	800607e <_printf_common+0x8e>
	...

080060cc <_printf_i>:
 80060cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d0:	7e0f      	ldrb	r7, [r1, #24]
 80060d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d4:	2f78      	cmp	r7, #120	; 0x78
 80060d6:	4691      	mov	r9, r2
 80060d8:	4680      	mov	r8, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	469a      	mov	sl, r3
 80060de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060e2:	d807      	bhi.n	80060f4 <_printf_i+0x28>
 80060e4:	2f62      	cmp	r7, #98	; 0x62
 80060e6:	d80a      	bhi.n	80060fe <_printf_i+0x32>
 80060e8:	2f00      	cmp	r7, #0
 80060ea:	f000 80d8 	beq.w	800629e <_printf_i+0x1d2>
 80060ee:	2f58      	cmp	r7, #88	; 0x58
 80060f0:	f000 80a3 	beq.w	800623a <_printf_i+0x16e>
 80060f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060fc:	e03a      	b.n	8006174 <_printf_i+0xa8>
 80060fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006102:	2b15      	cmp	r3, #21
 8006104:	d8f6      	bhi.n	80060f4 <_printf_i+0x28>
 8006106:	a101      	add	r1, pc, #4	; (adr r1, 800610c <_printf_i+0x40>)
 8006108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800610c:	08006165 	.word	0x08006165
 8006110:	08006179 	.word	0x08006179
 8006114:	080060f5 	.word	0x080060f5
 8006118:	080060f5 	.word	0x080060f5
 800611c:	080060f5 	.word	0x080060f5
 8006120:	080060f5 	.word	0x080060f5
 8006124:	08006179 	.word	0x08006179
 8006128:	080060f5 	.word	0x080060f5
 800612c:	080060f5 	.word	0x080060f5
 8006130:	080060f5 	.word	0x080060f5
 8006134:	080060f5 	.word	0x080060f5
 8006138:	08006285 	.word	0x08006285
 800613c:	080061a9 	.word	0x080061a9
 8006140:	08006267 	.word	0x08006267
 8006144:	080060f5 	.word	0x080060f5
 8006148:	080060f5 	.word	0x080060f5
 800614c:	080062a7 	.word	0x080062a7
 8006150:	080060f5 	.word	0x080060f5
 8006154:	080061a9 	.word	0x080061a9
 8006158:	080060f5 	.word	0x080060f5
 800615c:	080060f5 	.word	0x080060f5
 8006160:	0800626f 	.word	0x0800626f
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	1d1a      	adds	r2, r3, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	602a      	str	r2, [r5, #0]
 800616c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006174:	2301      	movs	r3, #1
 8006176:	e0a3      	b.n	80062c0 <_printf_i+0x1f4>
 8006178:	6820      	ldr	r0, [r4, #0]
 800617a:	6829      	ldr	r1, [r5, #0]
 800617c:	0606      	lsls	r6, r0, #24
 800617e:	f101 0304 	add.w	r3, r1, #4
 8006182:	d50a      	bpl.n	800619a <_printf_i+0xce>
 8006184:	680e      	ldr	r6, [r1, #0]
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	2e00      	cmp	r6, #0
 800618a:	da03      	bge.n	8006194 <_printf_i+0xc8>
 800618c:	232d      	movs	r3, #45	; 0x2d
 800618e:	4276      	negs	r6, r6
 8006190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006194:	485e      	ldr	r0, [pc, #376]	; (8006310 <_printf_i+0x244>)
 8006196:	230a      	movs	r3, #10
 8006198:	e019      	b.n	80061ce <_printf_i+0x102>
 800619a:	680e      	ldr	r6, [r1, #0]
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061a2:	bf18      	it	ne
 80061a4:	b236      	sxthne	r6, r6
 80061a6:	e7ef      	b.n	8006188 <_printf_i+0xbc>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	1d19      	adds	r1, r3, #4
 80061ae:	6029      	str	r1, [r5, #0]
 80061b0:	0601      	lsls	r1, r0, #24
 80061b2:	d501      	bpl.n	80061b8 <_printf_i+0xec>
 80061b4:	681e      	ldr	r6, [r3, #0]
 80061b6:	e002      	b.n	80061be <_printf_i+0xf2>
 80061b8:	0646      	lsls	r6, r0, #25
 80061ba:	d5fb      	bpl.n	80061b4 <_printf_i+0xe8>
 80061bc:	881e      	ldrh	r6, [r3, #0]
 80061be:	4854      	ldr	r0, [pc, #336]	; (8006310 <_printf_i+0x244>)
 80061c0:	2f6f      	cmp	r7, #111	; 0x6f
 80061c2:	bf0c      	ite	eq
 80061c4:	2308      	moveq	r3, #8
 80061c6:	230a      	movne	r3, #10
 80061c8:	2100      	movs	r1, #0
 80061ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ce:	6865      	ldr	r5, [r4, #4]
 80061d0:	60a5      	str	r5, [r4, #8]
 80061d2:	2d00      	cmp	r5, #0
 80061d4:	bfa2      	ittt	ge
 80061d6:	6821      	ldrge	r1, [r4, #0]
 80061d8:	f021 0104 	bicge.w	r1, r1, #4
 80061dc:	6021      	strge	r1, [r4, #0]
 80061de:	b90e      	cbnz	r6, 80061e4 <_printf_i+0x118>
 80061e0:	2d00      	cmp	r5, #0
 80061e2:	d04d      	beq.n	8006280 <_printf_i+0x1b4>
 80061e4:	4615      	mov	r5, r2
 80061e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ea:	fb03 6711 	mls	r7, r3, r1, r6
 80061ee:	5dc7      	ldrb	r7, [r0, r7]
 80061f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061f4:	4637      	mov	r7, r6
 80061f6:	42bb      	cmp	r3, r7
 80061f8:	460e      	mov	r6, r1
 80061fa:	d9f4      	bls.n	80061e6 <_printf_i+0x11a>
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d10b      	bne.n	8006218 <_printf_i+0x14c>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	07de      	lsls	r6, r3, #31
 8006204:	d508      	bpl.n	8006218 <_printf_i+0x14c>
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	6861      	ldr	r1, [r4, #4]
 800620a:	4299      	cmp	r1, r3
 800620c:	bfde      	ittt	le
 800620e:	2330      	movle	r3, #48	; 0x30
 8006210:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006214:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006218:	1b52      	subs	r2, r2, r5
 800621a:	6122      	str	r2, [r4, #16]
 800621c:	f8cd a000 	str.w	sl, [sp]
 8006220:	464b      	mov	r3, r9
 8006222:	aa03      	add	r2, sp, #12
 8006224:	4621      	mov	r1, r4
 8006226:	4640      	mov	r0, r8
 8006228:	f7ff fee2 	bl	8005ff0 <_printf_common>
 800622c:	3001      	adds	r0, #1
 800622e:	d14c      	bne.n	80062ca <_printf_i+0x1fe>
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	b004      	add	sp, #16
 8006236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623a:	4835      	ldr	r0, [pc, #212]	; (8006310 <_printf_i+0x244>)
 800623c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006240:	6829      	ldr	r1, [r5, #0]
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	f851 6b04 	ldr.w	r6, [r1], #4
 8006248:	6029      	str	r1, [r5, #0]
 800624a:	061d      	lsls	r5, r3, #24
 800624c:	d514      	bpl.n	8006278 <_printf_i+0x1ac>
 800624e:	07df      	lsls	r7, r3, #31
 8006250:	bf44      	itt	mi
 8006252:	f043 0320 	orrmi.w	r3, r3, #32
 8006256:	6023      	strmi	r3, [r4, #0]
 8006258:	b91e      	cbnz	r6, 8006262 <_printf_i+0x196>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	f023 0320 	bic.w	r3, r3, #32
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	2310      	movs	r3, #16
 8006264:	e7b0      	b.n	80061c8 <_printf_i+0xfc>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	f043 0320 	orr.w	r3, r3, #32
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	2378      	movs	r3, #120	; 0x78
 8006270:	4828      	ldr	r0, [pc, #160]	; (8006314 <_printf_i+0x248>)
 8006272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006276:	e7e3      	b.n	8006240 <_printf_i+0x174>
 8006278:	0659      	lsls	r1, r3, #25
 800627a:	bf48      	it	mi
 800627c:	b2b6      	uxthmi	r6, r6
 800627e:	e7e6      	b.n	800624e <_printf_i+0x182>
 8006280:	4615      	mov	r5, r2
 8006282:	e7bb      	b.n	80061fc <_printf_i+0x130>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	6826      	ldr	r6, [r4, #0]
 8006288:	6961      	ldr	r1, [r4, #20]
 800628a:	1d18      	adds	r0, r3, #4
 800628c:	6028      	str	r0, [r5, #0]
 800628e:	0635      	lsls	r5, r6, #24
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	d501      	bpl.n	8006298 <_printf_i+0x1cc>
 8006294:	6019      	str	r1, [r3, #0]
 8006296:	e002      	b.n	800629e <_printf_i+0x1d2>
 8006298:	0670      	lsls	r0, r6, #25
 800629a:	d5fb      	bpl.n	8006294 <_printf_i+0x1c8>
 800629c:	8019      	strh	r1, [r3, #0]
 800629e:	2300      	movs	r3, #0
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	4615      	mov	r5, r2
 80062a4:	e7ba      	b.n	800621c <_printf_i+0x150>
 80062a6:	682b      	ldr	r3, [r5, #0]
 80062a8:	1d1a      	adds	r2, r3, #4
 80062aa:	602a      	str	r2, [r5, #0]
 80062ac:	681d      	ldr	r5, [r3, #0]
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	2100      	movs	r1, #0
 80062b2:	4628      	mov	r0, r5
 80062b4:	f7f9 ff9c 	bl	80001f0 <memchr>
 80062b8:	b108      	cbz	r0, 80062be <_printf_i+0x1f2>
 80062ba:	1b40      	subs	r0, r0, r5
 80062bc:	6060      	str	r0, [r4, #4]
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	2300      	movs	r3, #0
 80062c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c8:	e7a8      	b.n	800621c <_printf_i+0x150>
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	462a      	mov	r2, r5
 80062ce:	4649      	mov	r1, r9
 80062d0:	4640      	mov	r0, r8
 80062d2:	47d0      	blx	sl
 80062d4:	3001      	adds	r0, #1
 80062d6:	d0ab      	beq.n	8006230 <_printf_i+0x164>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	079b      	lsls	r3, r3, #30
 80062dc:	d413      	bmi.n	8006306 <_printf_i+0x23a>
 80062de:	68e0      	ldr	r0, [r4, #12]
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	4298      	cmp	r0, r3
 80062e4:	bfb8      	it	lt
 80062e6:	4618      	movlt	r0, r3
 80062e8:	e7a4      	b.n	8006234 <_printf_i+0x168>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4632      	mov	r2, r6
 80062ee:	4649      	mov	r1, r9
 80062f0:	4640      	mov	r0, r8
 80062f2:	47d0      	blx	sl
 80062f4:	3001      	adds	r0, #1
 80062f6:	d09b      	beq.n	8006230 <_printf_i+0x164>
 80062f8:	3501      	adds	r5, #1
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	9903      	ldr	r1, [sp, #12]
 80062fe:	1a5b      	subs	r3, r3, r1
 8006300:	42ab      	cmp	r3, r5
 8006302:	dcf2      	bgt.n	80062ea <_printf_i+0x21e>
 8006304:	e7eb      	b.n	80062de <_printf_i+0x212>
 8006306:	2500      	movs	r5, #0
 8006308:	f104 0619 	add.w	r6, r4, #25
 800630c:	e7f5      	b.n	80062fa <_printf_i+0x22e>
 800630e:	bf00      	nop
 8006310:	08022fb9 	.word	0x08022fb9
 8006314:	08022fca 	.word	0x08022fca

08006318 <memcpy>:
 8006318:	440a      	add	r2, r1
 800631a:	4291      	cmp	r1, r2
 800631c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006320:	d100      	bne.n	8006324 <memcpy+0xc>
 8006322:	4770      	bx	lr
 8006324:	b510      	push	{r4, lr}
 8006326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800632e:	4291      	cmp	r1, r2
 8006330:	d1f9      	bne.n	8006326 <memcpy+0xe>
 8006332:	bd10      	pop	{r4, pc}

08006334 <memmove>:
 8006334:	4288      	cmp	r0, r1
 8006336:	b510      	push	{r4, lr}
 8006338:	eb01 0402 	add.w	r4, r1, r2
 800633c:	d902      	bls.n	8006344 <memmove+0x10>
 800633e:	4284      	cmp	r4, r0
 8006340:	4623      	mov	r3, r4
 8006342:	d807      	bhi.n	8006354 <memmove+0x20>
 8006344:	1e43      	subs	r3, r0, #1
 8006346:	42a1      	cmp	r1, r4
 8006348:	d008      	beq.n	800635c <memmove+0x28>
 800634a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800634e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006352:	e7f8      	b.n	8006346 <memmove+0x12>
 8006354:	4402      	add	r2, r0
 8006356:	4601      	mov	r1, r0
 8006358:	428a      	cmp	r2, r1
 800635a:	d100      	bne.n	800635e <memmove+0x2a>
 800635c:	bd10      	pop	{r4, pc}
 800635e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006366:	e7f7      	b.n	8006358 <memmove+0x24>

08006368 <_free_r>:
 8006368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800636a:	2900      	cmp	r1, #0
 800636c:	d044      	beq.n	80063f8 <_free_r+0x90>
 800636e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006372:	9001      	str	r0, [sp, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f1a1 0404 	sub.w	r4, r1, #4
 800637a:	bfb8      	it	lt
 800637c:	18e4      	addlt	r4, r4, r3
 800637e:	f000 f913 	bl	80065a8 <__malloc_lock>
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <_free_r+0x94>)
 8006384:	9801      	ldr	r0, [sp, #4]
 8006386:	6813      	ldr	r3, [r2, #0]
 8006388:	b933      	cbnz	r3, 8006398 <_free_r+0x30>
 800638a:	6063      	str	r3, [r4, #4]
 800638c:	6014      	str	r4, [r2, #0]
 800638e:	b003      	add	sp, #12
 8006390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006394:	f000 b90e 	b.w	80065b4 <__malloc_unlock>
 8006398:	42a3      	cmp	r3, r4
 800639a:	d908      	bls.n	80063ae <_free_r+0x46>
 800639c:	6825      	ldr	r5, [r4, #0]
 800639e:	1961      	adds	r1, r4, r5
 80063a0:	428b      	cmp	r3, r1
 80063a2:	bf01      	itttt	eq
 80063a4:	6819      	ldreq	r1, [r3, #0]
 80063a6:	685b      	ldreq	r3, [r3, #4]
 80063a8:	1949      	addeq	r1, r1, r5
 80063aa:	6021      	streq	r1, [r4, #0]
 80063ac:	e7ed      	b.n	800638a <_free_r+0x22>
 80063ae:	461a      	mov	r2, r3
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	b10b      	cbz	r3, 80063b8 <_free_r+0x50>
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	d9fa      	bls.n	80063ae <_free_r+0x46>
 80063b8:	6811      	ldr	r1, [r2, #0]
 80063ba:	1855      	adds	r5, r2, r1
 80063bc:	42a5      	cmp	r5, r4
 80063be:	d10b      	bne.n	80063d8 <_free_r+0x70>
 80063c0:	6824      	ldr	r4, [r4, #0]
 80063c2:	4421      	add	r1, r4
 80063c4:	1854      	adds	r4, r2, r1
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	6011      	str	r1, [r2, #0]
 80063ca:	d1e0      	bne.n	800638e <_free_r+0x26>
 80063cc:	681c      	ldr	r4, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	6053      	str	r3, [r2, #4]
 80063d2:	4421      	add	r1, r4
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	e7da      	b.n	800638e <_free_r+0x26>
 80063d8:	d902      	bls.n	80063e0 <_free_r+0x78>
 80063da:	230c      	movs	r3, #12
 80063dc:	6003      	str	r3, [r0, #0]
 80063de:	e7d6      	b.n	800638e <_free_r+0x26>
 80063e0:	6825      	ldr	r5, [r4, #0]
 80063e2:	1961      	adds	r1, r4, r5
 80063e4:	428b      	cmp	r3, r1
 80063e6:	bf04      	itt	eq
 80063e8:	6819      	ldreq	r1, [r3, #0]
 80063ea:	685b      	ldreq	r3, [r3, #4]
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	bf04      	itt	eq
 80063f0:	1949      	addeq	r1, r1, r5
 80063f2:	6021      	streq	r1, [r4, #0]
 80063f4:	6054      	str	r4, [r2, #4]
 80063f6:	e7ca      	b.n	800638e <_free_r+0x26>
 80063f8:	b003      	add	sp, #12
 80063fa:	bd30      	pop	{r4, r5, pc}
 80063fc:	200002dc 	.word	0x200002dc

08006400 <sbrk_aligned>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	4e0e      	ldr	r6, [pc, #56]	; (800643c <sbrk_aligned+0x3c>)
 8006404:	460c      	mov	r4, r1
 8006406:	6831      	ldr	r1, [r6, #0]
 8006408:	4605      	mov	r5, r0
 800640a:	b911      	cbnz	r1, 8006412 <sbrk_aligned+0x12>
 800640c:	f000 f8bc 	bl	8006588 <_sbrk_r>
 8006410:	6030      	str	r0, [r6, #0]
 8006412:	4621      	mov	r1, r4
 8006414:	4628      	mov	r0, r5
 8006416:	f000 f8b7 	bl	8006588 <_sbrk_r>
 800641a:	1c43      	adds	r3, r0, #1
 800641c:	d00a      	beq.n	8006434 <sbrk_aligned+0x34>
 800641e:	1cc4      	adds	r4, r0, #3
 8006420:	f024 0403 	bic.w	r4, r4, #3
 8006424:	42a0      	cmp	r0, r4
 8006426:	d007      	beq.n	8006438 <sbrk_aligned+0x38>
 8006428:	1a21      	subs	r1, r4, r0
 800642a:	4628      	mov	r0, r5
 800642c:	f000 f8ac 	bl	8006588 <_sbrk_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d101      	bne.n	8006438 <sbrk_aligned+0x38>
 8006434:	f04f 34ff 	mov.w	r4, #4294967295
 8006438:	4620      	mov	r0, r4
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	200002e0 	.word	0x200002e0

08006440 <_malloc_r>:
 8006440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	1ccd      	adds	r5, r1, #3
 8006446:	f025 0503 	bic.w	r5, r5, #3
 800644a:	3508      	adds	r5, #8
 800644c:	2d0c      	cmp	r5, #12
 800644e:	bf38      	it	cc
 8006450:	250c      	movcc	r5, #12
 8006452:	2d00      	cmp	r5, #0
 8006454:	4607      	mov	r7, r0
 8006456:	db01      	blt.n	800645c <_malloc_r+0x1c>
 8006458:	42a9      	cmp	r1, r5
 800645a:	d905      	bls.n	8006468 <_malloc_r+0x28>
 800645c:	230c      	movs	r3, #12
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	2600      	movs	r6, #0
 8006462:	4630      	mov	r0, r6
 8006464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006468:	4e2e      	ldr	r6, [pc, #184]	; (8006524 <_malloc_r+0xe4>)
 800646a:	f000 f89d 	bl	80065a8 <__malloc_lock>
 800646e:	6833      	ldr	r3, [r6, #0]
 8006470:	461c      	mov	r4, r3
 8006472:	bb34      	cbnz	r4, 80064c2 <_malloc_r+0x82>
 8006474:	4629      	mov	r1, r5
 8006476:	4638      	mov	r0, r7
 8006478:	f7ff ffc2 	bl	8006400 <sbrk_aligned>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	4604      	mov	r4, r0
 8006480:	d14d      	bne.n	800651e <_malloc_r+0xde>
 8006482:	6834      	ldr	r4, [r6, #0]
 8006484:	4626      	mov	r6, r4
 8006486:	2e00      	cmp	r6, #0
 8006488:	d140      	bne.n	800650c <_malloc_r+0xcc>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	4631      	mov	r1, r6
 800648e:	4638      	mov	r0, r7
 8006490:	eb04 0803 	add.w	r8, r4, r3
 8006494:	f000 f878 	bl	8006588 <_sbrk_r>
 8006498:	4580      	cmp	r8, r0
 800649a:	d13a      	bne.n	8006512 <_malloc_r+0xd2>
 800649c:	6821      	ldr	r1, [r4, #0]
 800649e:	3503      	adds	r5, #3
 80064a0:	1a6d      	subs	r5, r5, r1
 80064a2:	f025 0503 	bic.w	r5, r5, #3
 80064a6:	3508      	adds	r5, #8
 80064a8:	2d0c      	cmp	r5, #12
 80064aa:	bf38      	it	cc
 80064ac:	250c      	movcc	r5, #12
 80064ae:	4629      	mov	r1, r5
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff ffa5 	bl	8006400 <sbrk_aligned>
 80064b6:	3001      	adds	r0, #1
 80064b8:	d02b      	beq.n	8006512 <_malloc_r+0xd2>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	442b      	add	r3, r5
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	e00e      	b.n	80064e0 <_malloc_r+0xa0>
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	1b52      	subs	r2, r2, r5
 80064c6:	d41e      	bmi.n	8006506 <_malloc_r+0xc6>
 80064c8:	2a0b      	cmp	r2, #11
 80064ca:	d916      	bls.n	80064fa <_malloc_r+0xba>
 80064cc:	1961      	adds	r1, r4, r5
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	6025      	str	r5, [r4, #0]
 80064d2:	bf18      	it	ne
 80064d4:	6059      	strne	r1, [r3, #4]
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	bf08      	it	eq
 80064da:	6031      	streq	r1, [r6, #0]
 80064dc:	5162      	str	r2, [r4, r5]
 80064de:	604b      	str	r3, [r1, #4]
 80064e0:	4638      	mov	r0, r7
 80064e2:	f104 060b 	add.w	r6, r4, #11
 80064e6:	f000 f865 	bl	80065b4 <__malloc_unlock>
 80064ea:	f026 0607 	bic.w	r6, r6, #7
 80064ee:	1d23      	adds	r3, r4, #4
 80064f0:	1af2      	subs	r2, r6, r3
 80064f2:	d0b6      	beq.n	8006462 <_malloc_r+0x22>
 80064f4:	1b9b      	subs	r3, r3, r6
 80064f6:	50a3      	str	r3, [r4, r2]
 80064f8:	e7b3      	b.n	8006462 <_malloc_r+0x22>
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	bf0c      	ite	eq
 8006500:	6032      	streq	r2, [r6, #0]
 8006502:	605a      	strne	r2, [r3, #4]
 8006504:	e7ec      	b.n	80064e0 <_malloc_r+0xa0>
 8006506:	4623      	mov	r3, r4
 8006508:	6864      	ldr	r4, [r4, #4]
 800650a:	e7b2      	b.n	8006472 <_malloc_r+0x32>
 800650c:	4634      	mov	r4, r6
 800650e:	6876      	ldr	r6, [r6, #4]
 8006510:	e7b9      	b.n	8006486 <_malloc_r+0x46>
 8006512:	230c      	movs	r3, #12
 8006514:	603b      	str	r3, [r7, #0]
 8006516:	4638      	mov	r0, r7
 8006518:	f000 f84c 	bl	80065b4 <__malloc_unlock>
 800651c:	e7a1      	b.n	8006462 <_malloc_r+0x22>
 800651e:	6025      	str	r5, [r4, #0]
 8006520:	e7de      	b.n	80064e0 <_malloc_r+0xa0>
 8006522:	bf00      	nop
 8006524:	200002dc 	.word	0x200002dc

08006528 <_realloc_r>:
 8006528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652c:	4680      	mov	r8, r0
 800652e:	4614      	mov	r4, r2
 8006530:	460e      	mov	r6, r1
 8006532:	b921      	cbnz	r1, 800653e <_realloc_r+0x16>
 8006534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	4611      	mov	r1, r2
 800653a:	f7ff bf81 	b.w	8006440 <_malloc_r>
 800653e:	b92a      	cbnz	r2, 800654c <_realloc_r+0x24>
 8006540:	f7ff ff12 	bl	8006368 <_free_r>
 8006544:	4625      	mov	r5, r4
 8006546:	4628      	mov	r0, r5
 8006548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800654c:	f000 f838 	bl	80065c0 <_malloc_usable_size_r>
 8006550:	4284      	cmp	r4, r0
 8006552:	4607      	mov	r7, r0
 8006554:	d802      	bhi.n	800655c <_realloc_r+0x34>
 8006556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800655a:	d812      	bhi.n	8006582 <_realloc_r+0x5a>
 800655c:	4621      	mov	r1, r4
 800655e:	4640      	mov	r0, r8
 8006560:	f7ff ff6e 	bl	8006440 <_malloc_r>
 8006564:	4605      	mov	r5, r0
 8006566:	2800      	cmp	r0, #0
 8006568:	d0ed      	beq.n	8006546 <_realloc_r+0x1e>
 800656a:	42bc      	cmp	r4, r7
 800656c:	4622      	mov	r2, r4
 800656e:	4631      	mov	r1, r6
 8006570:	bf28      	it	cs
 8006572:	463a      	movcs	r2, r7
 8006574:	f7ff fed0 	bl	8006318 <memcpy>
 8006578:	4631      	mov	r1, r6
 800657a:	4640      	mov	r0, r8
 800657c:	f7ff fef4 	bl	8006368 <_free_r>
 8006580:	e7e1      	b.n	8006546 <_realloc_r+0x1e>
 8006582:	4635      	mov	r5, r6
 8006584:	e7df      	b.n	8006546 <_realloc_r+0x1e>
	...

08006588 <_sbrk_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	; (80065a4 <_sbrk_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fd fc54 	bl	8003e40 <_sbrk>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_sbrk_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_sbrk_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	200002e4 	.word	0x200002e4

080065a8 <__malloc_lock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	; (80065b0 <__malloc_lock+0x8>)
 80065aa:	f000 b811 	b.w	80065d0 <__retarget_lock_acquire_recursive>
 80065ae:	bf00      	nop
 80065b0:	200002e8 	.word	0x200002e8

080065b4 <__malloc_unlock>:
 80065b4:	4801      	ldr	r0, [pc, #4]	; (80065bc <__malloc_unlock+0x8>)
 80065b6:	f000 b80c 	b.w	80065d2 <__retarget_lock_release_recursive>
 80065ba:	bf00      	nop
 80065bc:	200002e8 	.word	0x200002e8

080065c0 <_malloc_usable_size_r>:
 80065c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c4:	1f18      	subs	r0, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfbc      	itt	lt
 80065ca:	580b      	ldrlt	r3, [r1, r0]
 80065cc:	18c0      	addlt	r0, r0, r3
 80065ce:	4770      	bx	lr

080065d0 <__retarget_lock_acquire_recursive>:
 80065d0:	4770      	bx	lr

080065d2 <__retarget_lock_release_recursive>:
 80065d2:	4770      	bx	lr

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr
